{
  "Basic intrinsics": {
    "Vector arithmetic": [
      {
        "name": "vadd_s8",
        "intrinsic": "int8x8_t vadd_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ADD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_s8",
        "intrinsic": "int8x16_t vaddq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ADD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_s16",
        "intrinsic": "int16x4_t vadd_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_s16",
        "intrinsic": "int16x8_t vaddq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_s32",
        "intrinsic": "int32x2_t vadd_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_s32",
        "intrinsic": "int32x4_t vaddq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_s64",
        "intrinsic": "int64x1_t vadd_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "ADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_s64",
        "intrinsic": "int64x2_t vaddq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ADD Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_u8",
        "intrinsic": "uint8x8_t vadd_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ADD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_u8",
        "intrinsic": "uint8x16_t vaddq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ADD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_u16",
        "intrinsic": "uint16x4_t vadd_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_u16",
        "intrinsic": "uint16x8_t vaddq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_u32",
        "intrinsic": "uint32x2_t vadd_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_u32",
        "intrinsic": "uint32x4_t vaddq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_u64",
        "intrinsic": "uint64x1_t vadd_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "ADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_u64",
        "intrinsic": "uint64x2_t vaddq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ADD Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_f32",
        "intrinsic": "float32x2_t vadd_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_f32",
        "intrinsic": "float32x4_t vaddq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_f64",
        "intrinsic": "float64x1_t vadd_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddq_f64",
        "intrinsic": "float64x2_t vaddq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FADD Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddd_s64",
        "intrinsic": "int64_t vaddd_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "ADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddd_u64",
        "intrinsic": "uint64_t vaddd_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "ADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddl_s8",
        "intrinsic": "int16x8_t vaddl_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SADDL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddl_s16",
        "intrinsic": "int32x4_t vaddl_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SADDL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddl_s32",
        "intrinsic": "int64x2_t vaddl_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SADDL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddl_u8",
        "intrinsic": "uint16x8_t vaddl_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UADDL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddl_u16",
        "intrinsic": "uint32x4_t vaddl_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UADDL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddl_u32",
        "intrinsic": "uint64x2_t vaddl_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UADDL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddl_high_s8",
        "intrinsic": "int16x8_t vaddl_high_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_high_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SADDL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddl_high_s16",
        "intrinsic": "int32x4_t vaddl_high_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_high_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SADDL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddl_high_s32",
        "intrinsic": "int64x2_t vaddl_high_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_high_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SADDL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddl_high_u8",
        "intrinsic": "uint16x8_t vaddl_high_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_high_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UADDL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddl_high_u16",
        "intrinsic": "uint32x4_t vaddl_high_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_high_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UADDL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddl_high_u32",
        "intrinsic": "uint64x2_t vaddl_high_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddl_high_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UADDL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddw_s8",
        "intrinsic": "int16x8_t vaddw_s8(int16x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_s8",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8B",
        "aarch64_instruction": "SADDW Vd.8H,Vn.8H,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddw_s16",
        "intrinsic": "int32x4_t vaddw_s16(int32x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_s16",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4H",
        "aarch64_instruction": "SADDW Vd.4S,Vn.4S,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddw_s32",
        "intrinsic": "int64x2_t vaddw_s32(int64x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_s32",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2S",
        "aarch64_instruction": "SADDW Vd.2D,Vn.2D,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddw_u8",
        "intrinsic": "uint16x8_t vaddw_u8(uint16x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_u8",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8B",
        "aarch64_instruction": "UADDW Vd.8H,Vn.8H,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddw_u16",
        "intrinsic": "uint32x4_t vaddw_u16(uint32x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_u16",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4H",
        "aarch64_instruction": "UADDW Vd.4S,Vn.4S,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddw_u32",
        "intrinsic": "uint64x2_t vaddw_u32(uint64x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_u32",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2S",
        "aarch64_instruction": "UADDW Vd.2D,Vn.2D,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddw_high_s8",
        "intrinsic": "int16x8_t vaddw_high_s8(int16x8_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_high_s8",
        "argument_preparation": "a -> Vn.8H; b -> Vm.16B",
        "aarch64_instruction": "SADDW2 Vd.8H,Vn.8H,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddw_high_s16",
        "intrinsic": "int32x4_t vaddw_high_s16(int32x4_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_high_s16",
        "argument_preparation": "a -> Vn.4S; b -> Vm.8H",
        "aarch64_instruction": "SADDW2 Vd.4S,Vn.4S,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddw_high_s32",
        "intrinsic": "int64x2_t vaddw_high_s32(int64x2_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_high_s32",
        "argument_preparation": "a -> Vn.2D; b -> Vm.4S",
        "aarch64_instruction": "SADDW2 Vd.2D,Vn.2D,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddw_high_u8",
        "intrinsic": "uint16x8_t vaddw_high_u8(uint16x8_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_high_u8",
        "argument_preparation": "a -> Vn.8H; b -> Vm.16B",
        "aarch64_instruction": "UADDW2 Vd.8H,Vn.8H,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddw_high_u16",
        "intrinsic": "uint32x4_t vaddw_high_u16(uint32x4_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_high_u16",
        "argument_preparation": "a -> Vn.4S; b -> Vm.8H",
        "aarch64_instruction": "UADDW2 Vd.4S,Vn.4S,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddw_high_u32",
        "intrinsic": "uint64x2_t vaddw_high_u32(uint64x2_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddw_high_u32",
        "argument_preparation": "a -> Vn.2D; b -> Vm.4S",
        "aarch64_instruction": "UADDW2 Vd.2D,Vn.2D,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vhadd_s8",
        "intrinsic": "int8x8_t vhadd_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhadd_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SHADD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhaddq_s8",
        "intrinsic": "int8x16_t vhaddq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhaddq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SHADD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhadd_s16",
        "intrinsic": "int16x4_t vhadd_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhadd_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SHADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhaddq_s16",
        "intrinsic": "int16x8_t vhaddq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhaddq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SHADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhadd_s32",
        "intrinsic": "int32x2_t vhadd_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhadd_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SHADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhaddq_s32",
        "intrinsic": "int32x4_t vhaddq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhaddq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SHADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhadd_u8",
        "intrinsic": "uint8x8_t vhadd_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhadd_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UHADD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhaddq_u8",
        "intrinsic": "uint8x16_t vhaddq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhaddq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UHADD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhadd_u16",
        "intrinsic": "uint16x4_t vhadd_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhadd_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UHADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhaddq_u16",
        "intrinsic": "uint16x8_t vhaddq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhaddq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UHADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhadd_u32",
        "intrinsic": "uint32x2_t vhadd_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhadd_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UHADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhaddq_u32",
        "intrinsic": "uint32x4_t vhaddq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhaddq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UHADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhadd_s8",
        "intrinsic": "int8x8_t vrhadd_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhadd_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SRHADD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhaddq_s8",
        "intrinsic": "int8x16_t vrhaddq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhaddq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SRHADD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhadd_s16",
        "intrinsic": "int16x4_t vrhadd_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhadd_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SRHADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhaddq_s16",
        "intrinsic": "int16x8_t vrhaddq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhaddq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SRHADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhadd_s32",
        "intrinsic": "int32x2_t vrhadd_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhadd_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SRHADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhaddq_s32",
        "intrinsic": "int32x4_t vrhaddq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhaddq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SRHADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhadd_u8",
        "intrinsic": "uint8x8_t vrhadd_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhadd_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "URHADD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhaddq_u8",
        "intrinsic": "uint8x16_t vrhaddq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhaddq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "URHADD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhadd_u16",
        "intrinsic": "uint16x4_t vrhadd_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhadd_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "URHADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhaddq_u16",
        "intrinsic": "uint16x8_t vrhaddq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhaddq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "URHADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhadd_u32",
        "intrinsic": "uint32x2_t vrhadd_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhadd_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "URHADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrhaddq_u32",
        "intrinsic": "uint32x4_t vrhaddq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrhaddq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "URHADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddhn_s16",
        "intrinsic": "int8x8_t vaddhn_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ADDHN Vd.8B,Vn.8H,Vm.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddhn_s32",
        "intrinsic": "int16x4_t vaddhn_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ADDHN Vd.4H,Vn.4S,Vm.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddhn_s64",
        "intrinsic": "int32x2_t vaddhn_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ADDHN Vd.2S,Vn.2D,Vm.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddhn_u16",
        "intrinsic": "uint8x8_t vaddhn_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ADDHN Vd.8B,Vn.8H,Vm.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddhn_u32",
        "intrinsic": "uint16x4_t vaddhn_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ADDHN Vd.4H,Vn.4S,Vm.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddhn_u64",
        "intrinsic": "uint32x2_t vaddhn_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ADDHN Vd.2S,Vn.2D,Vm.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddhn_high_s16",
        "intrinsic": "int8x16_t vaddhn_high_s16(int8x8_t r, int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_high_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ADDHN2 Vd.16B,Vn.8H,Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddhn_high_s32",
        "intrinsic": "int16x8_t vaddhn_high_s32(int16x4_t r, int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_high_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ADDHN2 Vd.8H,Vn.4S,Vm.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddhn_high_s64",
        "intrinsic": "int32x4_t vaddhn_high_s64(int32x2_t r, int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_high_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ADDHN2 Vd.4S,Vn.2D,Vm.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddhn_high_u16",
        "intrinsic": "uint8x16_t vaddhn_high_u16(uint8x8_t r, uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_high_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ADDHN2 Vd.16B,Vn.8H,Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddhn_high_u32",
        "intrinsic": "uint16x8_t vaddhn_high_u32(uint16x4_t r, uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_high_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ADDHN2 Vd.8H,Vn.4S,Vm.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddhn_high_u64",
        "intrinsic": "uint32x4_t vaddhn_high_u64(uint32x2_t r, uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddhn_high_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ADDHN2 Vd.4S,Vn.2D,Vm.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vraddhn_s16",
        "intrinsic": "int8x8_t vraddhn_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "RADDHN Vd.8B,Vn.8H,Vm.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vraddhn_s32",
        "intrinsic": "int16x4_t vraddhn_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "RADDHN Vd.4H,Vn.4S,Vm.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vraddhn_s64",
        "intrinsic": "int32x2_t vraddhn_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RADDHN Vd.2S,Vn.2D,Vm.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vraddhn_u16",
        "intrinsic": "uint8x8_t vraddhn_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "RADDHN Vd.8B,Vn.8H,Vm.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vraddhn_u32",
        "intrinsic": "uint16x4_t vraddhn_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "RADDHN Vd.4H,Vn.4S,Vm.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vraddhn_u64",
        "intrinsic": "uint32x2_t vraddhn_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RADDHN Vd.2S,Vn.2D,Vm.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vraddhn_high_s16",
        "intrinsic": "int8x16_t vraddhn_high_s16(int8x8_t r, int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_high_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "RADDHN2 Vd.16B,Vn.8H,Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vraddhn_high_s32",
        "intrinsic": "int16x8_t vraddhn_high_s32(int16x4_t r, int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_high_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "RADDHN2 Vd.8H,Vn.4S,Vm.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vraddhn_high_s64",
        "intrinsic": "int32x4_t vraddhn_high_s64(int32x2_t r, int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_high_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RADDHN2 Vd.4S,Vn.2D,Vm.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vraddhn_high_u16",
        "intrinsic": "uint8x16_t vraddhn_high_u16(uint8x8_t r, uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_high_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "RADDHN2 Vd.16B,Vn.8H,Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vraddhn_high_u32",
        "intrinsic": "uint16x8_t vraddhn_high_u32(uint16x4_t r, uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_high_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "RADDHN2 Vd.8H,Vn.4S,Vm.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vraddhn_high_u64",
        "intrinsic": "uint32x4_t vraddhn_high_u64(uint32x2_t r, uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vraddhn_high_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RADDHN2 Vd.4S,Vn.2D,Vm.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqadd_s8",
        "intrinsic": "int8x8_t vqadd_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadd_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SQADD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddq_s8",
        "intrinsic": "int8x16_t vqaddq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SQADD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqadd_s16",
        "intrinsic": "int16x4_t vqadd_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadd_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SQADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddq_s16",
        "intrinsic": "int16x8_t vqaddq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SQADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqadd_s32",
        "intrinsic": "int32x2_t vqadd_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadd_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SQADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddq_s32",
        "intrinsic": "int32x4_t vqaddq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SQADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqadd_s64",
        "intrinsic": "int64x1_t vqadd_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SQADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddq_s64",
        "intrinsic": "int64x2_t vqaddq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SQADD Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqadd_u8",
        "intrinsic": "uint8x8_t vqadd_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadd_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UQADD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddq_u8",
        "intrinsic": "uint8x16_t vqaddq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UQADD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqadd_u16",
        "intrinsic": "uint16x4_t vqadd_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadd_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UQADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddq_u16",
        "intrinsic": "uint16x8_t vqaddq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UQADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqadd_u32",
        "intrinsic": "uint32x2_t vqadd_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadd_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UQADD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddq_u32",
        "intrinsic": "uint32x4_t vqaddq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UQADD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqadd_u64",
        "intrinsic": "uint64x1_t vqadd_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "UQADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddq_u64",
        "intrinsic": "uint64x2_t vqaddq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UQADD Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqaddb_s8",
        "intrinsic": "int8_t vqaddb_s8(int8_t a, int8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddb_s8",
        "argument_preparation": "a -> Bn; b -> Bm",
        "aarch64_instruction": "SQADD Bd,Bn,Bm",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqaddh_s16",
        "intrinsic": "int16_t vqaddh_s16(int16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddh_s16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "SQADD Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqadds_s32",
        "intrinsic": "int32_t vqadds_s32(int32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadds_s32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "SQADD Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqaddd_s64",
        "intrinsic": "int64_t vqaddd_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SQADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqaddb_u8",
        "intrinsic": "uint8_t vqaddb_u8(uint8_t a, uint8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddb_u8",
        "argument_preparation": "a -> Bn; b -> Bm",
        "aarch64_instruction": "UQADD Bd,Bn,Bm",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqaddh_u16",
        "intrinsic": "uint16_t vqaddh_u16(uint16_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddh_u16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "UQADD Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqadds_u32",
        "intrinsic": "uint32_t vqadds_u32(uint32_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqadds_u32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "UQADD Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqaddd_u64",
        "intrinsic": "uint64_t vqaddd_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqaddd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "UQADD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqadd_s8",
        "intrinsic": "int8x8_t vuqadd_s8(int8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqadd_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B",
        "aarch64_instruction": "SUQADD Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqaddq_s8",
        "intrinsic": "int8x16_t vuqaddq_s8(int8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqaddq_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B",
        "aarch64_instruction": "SUQADD Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqadd_s16",
        "intrinsic": "int16x4_t vuqadd_s16(int16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqadd_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H",
        "aarch64_instruction": "SUQADD Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqaddq_s16",
        "intrinsic": "int16x8_t vuqaddq_s16(int16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqaddq_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H",
        "aarch64_instruction": "SUQADD Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqadd_s32",
        "intrinsic": "int32x2_t vuqadd_s32(int32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqadd_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S",
        "aarch64_instruction": "SUQADD Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqaddq_s32",
        "intrinsic": "int32x4_t vuqaddq_s32(int32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqaddq_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S",
        "aarch64_instruction": "SUQADD Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqadd_s64",
        "intrinsic": "int64x1_t vuqadd_s64(int64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqadd_s64",
        "argument_preparation": "a -> Dd; b -> Dn",
        "aarch64_instruction": "SUQADD Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqaddq_s64",
        "intrinsic": "int64x2_t vuqaddq_s64(int64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqaddq_s64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D",
        "aarch64_instruction": "SUQADD Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqaddb_s8",
        "intrinsic": "int8_t vuqaddb_s8(int8_t a, uint8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqaddb_s8",
        "argument_preparation": "a -> Bd; b -> Bn",
        "aarch64_instruction": "SUQADD Bd,Bn",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqaddh_s16",
        "intrinsic": "int16_t vuqaddh_s16(int16_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqaddh_s16",
        "argument_preparation": "a -> Hd; b -> Hn",
        "aarch64_instruction": "SUQADD Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqadds_s32",
        "intrinsic": "int32_t vuqadds_s32(int32_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqadds_s32",
        "argument_preparation": "a -> Sd; b -> Sn",
        "aarch64_instruction": "SUQADD Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuqaddd_s64",
        "intrinsic": "int64_t vuqaddd_s64(int64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuqaddd_s64",
        "argument_preparation": "a -> Dd; b -> Dn",
        "aarch64_instruction": "SUQADD Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqadd_u8",
        "intrinsic": "uint8x8_t vsqadd_u8(uint8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqadd_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B",
        "aarch64_instruction": "USQADD Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqaddq_u8",
        "intrinsic": "uint8x16_t vsqaddq_u8(uint8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqaddq_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B",
        "aarch64_instruction": "USQADD Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqadd_u16",
        "intrinsic": "uint16x4_t vsqadd_u16(uint16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqadd_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H",
        "aarch64_instruction": "USQADD Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqaddq_u16",
        "intrinsic": "uint16x8_t vsqaddq_u16(uint16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqaddq_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H",
        "aarch64_instruction": "USQADD Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqadd_u32",
        "intrinsic": "uint32x2_t vsqadd_u32(uint32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqadd_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S",
        "aarch64_instruction": "USQADD Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqaddq_u32",
        "intrinsic": "uint32x4_t vsqaddq_u32(uint32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqaddq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S",
        "aarch64_instruction": "USQADD Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqadd_u64",
        "intrinsic": "uint64x1_t vsqadd_u64(uint64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqadd_u64",
        "argument_preparation": "a -> Dd; b -> Dn",
        "aarch64_instruction": "USQADD Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqaddq_u64",
        "intrinsic": "uint64x2_t vsqaddq_u64(uint64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqaddq_u64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D",
        "aarch64_instruction": "USQADD Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqaddb_u8",
        "intrinsic": "uint8_t vsqaddb_u8(uint8_t a, int8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqaddb_u8",
        "argument_preparation": "a -> Bd; b -> Bn",
        "aarch64_instruction": "USQADD Bd,Bn",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqaddh_u16",
        "intrinsic": "uint16_t vsqaddh_u16(uint16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqaddh_u16",
        "argument_preparation": "a -> Hd; b -> Hn",
        "aarch64_instruction": "USQADD Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqadds_u32",
        "intrinsic": "uint32_t vsqadds_u32(uint32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqadds_u32",
        "argument_preparation": "a -> Sd; b -> Sn",
        "aarch64_instruction": "USQADD Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqaddd_u64",
        "intrinsic": "uint64_t vsqaddd_u64(uint64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqaddd_u64",
        "argument_preparation": "a -> Dd; b -> Dn",
        "aarch64_instruction": "USQADD Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_s8",
        "intrinsic": "int8x8_t vmul_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "MUL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_s8",
        "intrinsic": "int8x16_t vmulq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "MUL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_s16",
        "intrinsic": "int16x4_t vmul_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "MUL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_s16",
        "intrinsic": "int16x8_t vmulq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "MUL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_s32",
        "intrinsic": "int32x2_t vmul_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "MUL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_s32",
        "intrinsic": "int32x4_t vmulq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "MUL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_u8",
        "intrinsic": "uint8x8_t vmul_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "MUL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_u8",
        "intrinsic": "uint8x16_t vmulq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "MUL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_u16",
        "intrinsic": "uint16x4_t vmul_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "MUL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_u16",
        "intrinsic": "uint16x8_t vmulq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "MUL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_u32",
        "intrinsic": "uint32x2_t vmul_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "MUL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_u32",
        "intrinsic": "uint32x4_t vmulq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "MUL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_f32",
        "intrinsic": "float32x2_t vmul_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMUL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_f32",
        "intrinsic": "float32x4_t vmulq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMUL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_f64",
        "intrinsic": "float64x1_t vmul_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FMUL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_f64",
        "intrinsic": "float64x2_t vmulq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMUL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_u32",
        "intrinsic": "uint64x2_t vmull_high_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UMULL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_f32",
        "intrinsic": "float32x2_t vmulx_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMULX Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_f32",
        "intrinsic": "float32x4_t vmulxq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMULX Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_f64",
        "intrinsic": "float64x1_t vmulx_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FMULX Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_f64",
        "intrinsic": "float64x2_t vmulxq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMULX Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxs_f32",
        "intrinsic": "float32_t vmulxs_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxs_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FMULX Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxd_f64",
        "intrinsic": "float64_t vmulxd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FMULX Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_lane_f32",
        "intrinsic": "float32x2_t vmulx_lane_f32(float32x2_t a, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_lane_f32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMULX Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_lane_f32",
        "intrinsic": "float32x4_t vmulxq_lane_f32(float32x4_t a, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_lane_f32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMULX Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_lane_f64",
        "intrinsic": "float64x1_t vmulx_lane_f64(float64x1_t a, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_lane_f64",
        "argument_preparation": "a -> Dn; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMULX Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_lane_f64",
        "intrinsic": "float64x2_t vmulxq_lane_f64(float64x2_t a, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_lane_f64",
        "argument_preparation": "a -> Vn.2D; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMULX Vd.2D,Vn.2D,Vm.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxs_lane_f32",
        "intrinsic": "float32_t vmulxs_lane_f32(float32_t a, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxs_lane_f32",
        "argument_preparation": "a -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMULX Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxd_lane_f64",
        "intrinsic": "float64_t vmulxd_lane_f64(float64_t a, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxd_lane_f64",
        "argument_preparation": "a -> Dn; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMULX Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_laneq_f32",
        "intrinsic": "float32x2_t vmulx_laneq_f32(float32x2_t a, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_laneq_f32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMULX Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_laneq_f32",
        "intrinsic": "float32x4_t vmulxq_laneq_f32(float32x4_t a, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_laneq_f32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMULX Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_laneq_f64",
        "intrinsic": "float64x1_t vmulx_laneq_f64(float64x1_t a, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_laneq_f64",
        "argument_preparation": "a -> Dn; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMULX Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_laneq_f64",
        "intrinsic": "float64x2_t vmulxq_laneq_f64(float64x2_t a, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_laneq_f64",
        "argument_preparation": "a -> Vn.2D; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMULX Vd.2D,Vn.2D,Vm.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxs_laneq_f32",
        "intrinsic": "float32_t vmulxs_laneq_f32(float32_t a, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxs_laneq_f32",
        "argument_preparation": "a -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMULX Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxd_laneq_f64",
        "intrinsic": "float64_t vmulxd_laneq_f64(float64_t a, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxd_laneq_f64",
        "argument_preparation": "a -> Dn; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMULX Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmla_s8",
        "intrinsic": "int8x8_t vmla_s8(int8x8_t a, int8x8_t b, int8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "MLA Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_s8",
        "intrinsic": "int8x16_t vmlaq_s8(int8x16_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "MLA Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_s16",
        "intrinsic": "int16x4_t vmla_s16(int16x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "MLA Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_s16",
        "intrinsic": "int16x8_t vmlaq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "MLA Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_s32",
        "intrinsic": "int32x2_t vmla_s32(int32x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "MLA Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_s32",
        "intrinsic": "int32x4_t vmlaq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "MLA Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_u8",
        "intrinsic": "uint8x8_t vmla_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "MLA Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_u8",
        "intrinsic": "uint8x16_t vmlaq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "MLA Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_u16",
        "intrinsic": "uint16x4_t vmla_u16(uint16x4_t a, uint16x4_t b, uint16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "MLA Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_u16",
        "intrinsic": "uint16x8_t vmlaq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "MLA Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_u32",
        "intrinsic": "uint32x2_t vmla_u32(uint32x2_t a, uint32x2_t b, uint32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "MLA Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_u32",
        "intrinsic": "uint32x4_t vmlaq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "MLA Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_f32",
        "intrinsic": "float32x2_t vmla_f32(float32x2_t a, float32x2_t b, float32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_f32",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * c[i]) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_f32",
        "intrinsic": "float32x4_t vmlaq_f32(float32x4_t a, float32x4_t b, float32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_f32",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * c[i]) for i = 0 to 3",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_f64",
        "intrinsic": "float64x1_t vmla_f64(float64x1_t a, float64x1_t b, float64x1_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_f64",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * c[i]) for i = 0",
        "result": "N/A",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaq_f64",
        "intrinsic": "float64x2_t vmlaq_f64(float64x2_t a, float64x2_t b, float64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_f64",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * c[i]) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "A64"
      },
      {
        "name": "vmls_s8",
        "intrinsic": "int8x8_t vmls_s8(int8x8_t a, int8x8_t b, int8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "MLS Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_s8",
        "intrinsic": "int8x16_t vmlsq_s8(int8x16_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "MLS Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_s16",
        "intrinsic": "int16x4_t vmls_s16(int16x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "MLS Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_s16",
        "intrinsic": "int16x8_t vmlsq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "MLS Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_s32",
        "intrinsic": "int32x2_t vmls_s32(int32x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "MLS Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_s32",
        "intrinsic": "int32x4_t vmlsq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "MLS Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_u8",
        "intrinsic": "uint8x8_t vmls_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "MLS Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_u8",
        "intrinsic": "uint8x16_t vmlsq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "MLS Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_u16",
        "intrinsic": "uint16x4_t vmls_u16(uint16x4_t a, uint16x4_t b, uint16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "MLS Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_u16",
        "intrinsic": "uint16x8_t vmlsq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "MLS Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_u32",
        "intrinsic": "uint32x2_t vmls_u32(uint32x2_t a, uint32x2_t b, uint32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "MLS Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_u32",
        "intrinsic": "uint32x4_t vmlsq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "MLS Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_f32",
        "intrinsic": "float32x2_t vmls_f32(float32x2_t a, float32x2_t b, float32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_f32",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * c[i]) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_f32",
        "intrinsic": "float32x4_t vmlsq_f32(float32x4_t a, float32x4_t b, float32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_f32",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * c[i]) for i = 0 to 3",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_f64",
        "intrinsic": "float64x1_t vmls_f64(float64x1_t a, float64x1_t b, float64x1_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_f64",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * c[i]) for i = 0",
        "result": "N/A",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsq_f64",
        "intrinsic": "float64x2_t vmlsq_f64(float64x2_t a, float64x2_t b, float64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_f64",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * c[i]) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_s8",
        "intrinsic": "int16x8_t vmlal_s8(int16x8_t a, int8x8_t b, int8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_s8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "SMLAL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_s16",
        "intrinsic": "int32x4_t vmlal_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "SMLAL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_s32",
        "intrinsic": "int64x2_t vmlal_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "SMLAL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_u8",
        "intrinsic": "uint16x8_t vmlal_u8(uint16x8_t a, uint8x8_t b, uint8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_u8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "UMLAL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_u16",
        "intrinsic": "uint32x4_t vmlal_u16(uint32x4_t a, uint16x4_t b, uint16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "UMLAL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_u32",
        "intrinsic": "uint64x2_t vmlal_u32(uint64x2_t a, uint32x2_t b, uint32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "UMLAL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_high_s8",
        "intrinsic": "int16x8_t vmlal_high_s8(int16x8_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_s8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "SMLAL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_s16",
        "intrinsic": "int32x4_t vmlal_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "SMLAL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_s32",
        "intrinsic": "int64x2_t vmlal_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SMLAL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_u8",
        "intrinsic": "uint16x8_t vmlal_high_u8(uint16x8_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_u8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "UMLAL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_u16",
        "intrinsic": "uint32x4_t vmlal_high_u16(uint32x4_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "UMLAL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_u32",
        "intrinsic": "uint64x2_t vmlal_high_u32(uint64x2_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "UMLAL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_s8",
        "intrinsic": "int16x8_t vmlsl_s8(int16x8_t a, int8x8_t b, int8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_s8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "SMLSL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_s16",
        "intrinsic": "int32x4_t vmlsl_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "SMLSL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_s32",
        "intrinsic": "int64x2_t vmlsl_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "SMLSL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_u8",
        "intrinsic": "uint16x8_t vmlsl_u8(uint16x8_t a, uint8x8_t b, uint8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_u8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "UMLSL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_u16",
        "intrinsic": "uint32x4_t vmlsl_u16(uint32x4_t a, uint16x4_t b, uint16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "UMLSL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_u32",
        "intrinsic": "uint64x2_t vmlsl_u32(uint64x2_t a, uint32x2_t b, uint32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "UMLSL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_high_s8",
        "intrinsic": "int16x8_t vmlsl_high_s8(int16x8_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_s8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "SMLSL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_s16",
        "intrinsic": "int32x4_t vmlsl_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "SMLSL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_s32",
        "intrinsic": "int64x2_t vmlsl_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SMLSL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_u8",
        "intrinsic": "uint16x8_t vmlsl_high_u8(uint16x8_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_u8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "UMLSL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_u16",
        "intrinsic": "uint32x4_t vmlsl_high_u16(uint32x4_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "UMLSL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_u32",
        "intrinsic": "uint64x2_t vmlsl_high_u32(uint64x2_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "UMLSL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_f32",
        "intrinsic": "float32x2_t vfma_f32(float32x2_t a, float32x2_t b, float32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_f32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "FMLA Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vfmaq_f32",
        "intrinsic": "float32x4_t vfmaq_f32(float32x4_t a, float32x4_t b, float32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_f32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "FMLA Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vfma_f64",
        "intrinsic": "float64x1_t vfma_f64(float64x1_t a, float64x1_t b, float64x1_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_f64",
        "argument_preparation": "b -> Dn; c -> Dm; a -> Da",
        "aarch64_instruction": "FMADD Dd,Dn,Dm,Da",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_f64",
        "intrinsic": "float64x2_t vfmaq_f64(float64x2_t a, float64x2_t b, float64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_f64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; c -> Vm.2D",
        "aarch64_instruction": "FMLA Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_lane_f32",
        "intrinsic": "float32x2_t vfma_lane_f32(float32x2_t a, float32x2_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_lane_f32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMLA Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_lane_f32",
        "intrinsic": "float32x4_t vfmaq_lane_f32(float32x4_t a, float32x4_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_lane_f32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMLA Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_lane_f64",
        "intrinsic": "float64x1_t vfma_lane_f64(float64x1_t a, float64x1_t b, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_lane_f64",
        "argument_preparation": "a -> Dd; b -> Dn; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMLA Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_lane_f64",
        "intrinsic": "float64x2_t vfmaq_lane_f64(float64x2_t a, float64x2_t b, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_lane_f64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMLA Vd.2D,Vn.2D,Vm.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmas_lane_f32",
        "intrinsic": "float32_t vfmas_lane_f32(float32_t a, float32_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmas_lane_f32",
        "argument_preparation": "a -> Sd; b -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMLA Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmad_lane_f64",
        "intrinsic": "float64_t vfmad_lane_f64(float64_t a, float64_t b, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmad_lane_f64",
        "argument_preparation": "a -> Dd; b -> Dn; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMLA Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_laneq_f32",
        "intrinsic": "float32x2_t vfma_laneq_f32(float32x2_t a, float32x2_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_laneq_f32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMLA Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_laneq_f32",
        "intrinsic": "float32x4_t vfmaq_laneq_f32(float32x4_t a, float32x4_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_laneq_f32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMLA Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_laneq_f64",
        "intrinsic": "float64x1_t vfma_laneq_f64(float64x1_t a, float64x1_t b, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_laneq_f64",
        "argument_preparation": "a -> Dd; b -> Dn; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMLA Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_laneq_f64",
        "intrinsic": "float64x2_t vfmaq_laneq_f64(float64x2_t a, float64x2_t b, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_laneq_f64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMLA Vd.2D,Vn.2D,Vm.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmas_laneq_f32",
        "intrinsic": "float32_t vfmas_laneq_f32(float32_t a, float32_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmas_laneq_f32",
        "argument_preparation": "a -> Sd; b -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMLA Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmad_laneq_f64",
        "intrinsic": "float64_t vfmad_laneq_f64(float64_t a, float64_t b, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmad_laneq_f64",
        "argument_preparation": "a -> Dd; b -> Dn; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMLA Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_f32",
        "intrinsic": "float32x2_t vfms_f32(float32x2_t a, float32x2_t b, float32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_f32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "FMLS Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vfmsq_f32",
        "intrinsic": "float32x4_t vfmsq_f32(float32x4_t a, float32x4_t b, float32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_f32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "FMLS Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vfms_f64",
        "intrinsic": "float64x1_t vfms_f64(float64x1_t a, float64x1_t b, float64x1_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_f64",
        "argument_preparation": "b -> Dn; c -> Dm; a -> Da",
        "aarch64_instruction": "FMSUB Dd,Dn,Dm,Da",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_f64",
        "intrinsic": "float64x2_t vfmsq_f64(float64x2_t a, float64x2_t b, float64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_f64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; c -> Vm.2D",
        "aarch64_instruction": "FMLS Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_lane_f32",
        "intrinsic": "float32x2_t vfms_lane_f32(float32x2_t a, float32x2_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_lane_f32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMLS Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_lane_f32",
        "intrinsic": "float32x4_t vfmsq_lane_f32(float32x4_t a, float32x4_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_lane_f32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMLS Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_lane_f64",
        "intrinsic": "float64x1_t vfms_lane_f64(float64x1_t a, float64x1_t b, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_lane_f64",
        "argument_preparation": "a -> Dd; b -> Dn; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMLS Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_lane_f64",
        "intrinsic": "float64x2_t vfmsq_lane_f64(float64x2_t a, float64x2_t b, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_lane_f64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMLS Vd.2D,Vn.2D,Vm.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmss_lane_f32",
        "intrinsic": "float32_t vfmss_lane_f32(float32_t a, float32_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmss_lane_f32",
        "argument_preparation": "a -> Sd; b -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMLS Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsd_lane_f64",
        "intrinsic": "float64_t vfmsd_lane_f64(float64_t a, float64_t b, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsd_lane_f64",
        "argument_preparation": "a -> Dd; b -> Dn; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMLS Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_laneq_f32",
        "intrinsic": "float32x2_t vfms_laneq_f32(float32x2_t a, float32x2_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_laneq_f32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMLS Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_laneq_f32",
        "intrinsic": "float32x4_t vfmsq_laneq_f32(float32x4_t a, float32x4_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_laneq_f32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMLS Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_laneq_f64",
        "intrinsic": "float64x1_t vfms_laneq_f64(float64x1_t a, float64x1_t b, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_laneq_f64",
        "argument_preparation": "a -> Dd; b -> Dn; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMLS Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_laneq_f64",
        "intrinsic": "float64x2_t vfmsq_laneq_f64(float64x2_t a, float64x2_t b, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_laneq_f64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMLS Vd.2D,Vn.2D,Vm.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmss_laneq_f32",
        "intrinsic": "float32_t vfmss_laneq_f32(float32_t a, float32_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmss_laneq_f32",
        "argument_preparation": "a -> Sd; b -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMLS Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsd_laneq_f64",
        "intrinsic": "float64_t vfmsd_laneq_f64(float64_t a, float64_t b, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsd_laneq_f64",
        "argument_preparation": "a -> Dd; b -> Dn; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMLS Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulh_s16",
        "intrinsic": "int16x4_t vqdmulh_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulh_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SQDMULH Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulhq_s16",
        "intrinsic": "int16x8_t vqdmulhq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SQDMULH Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulh_s32",
        "intrinsic": "int32x2_t vqdmulh_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulh_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SQDMULH Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulhq_s32",
        "intrinsic": "int32x4_t vqdmulhq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SQDMULH Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulhh_s16",
        "intrinsic": "int16_t vqdmulhh_s16(int16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhh_s16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "SQDMULH Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulhs_s32",
        "intrinsic": "int32_t vqdmulhs_s32(int32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhs_s32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "SQDMULH Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulh_s16",
        "intrinsic": "int16x4_t vqrdmulh_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulh_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SQRDMULH Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulhq_s16",
        "intrinsic": "int16x8_t vqrdmulhq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SQRDMULH Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulh_s32",
        "intrinsic": "int32x2_t vqrdmulh_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulh_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SQRDMULH Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulhq_s32",
        "intrinsic": "int32x4_t vqrdmulhq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SQRDMULH Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulhh_s16",
        "intrinsic": "int16_t vqrdmulhh_s16(int16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhh_s16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "SQRDMULH Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulhs_s32",
        "intrinsic": "int32_t vqrdmulhs_s32(int32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhs_s32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "SQRDMULH Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_s16",
        "intrinsic": "int32x4_t vqdmull_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SQDMULL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmull_s32",
        "intrinsic": "int64x2_t vqdmull_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SQDMULL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmullh_s16",
        "intrinsic": "int32_t vqdmullh_s16(int16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmullh_s16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "SQDMULL Sd,Hn,Hm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulls_s32",
        "intrinsic": "int64_t vqdmulls_s32(int32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulls_s32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "SQDMULL Dd,Sn,Sm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_high_s16",
        "intrinsic": "int32x4_t vqdmull_high_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_high_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SQDMULL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_high_s32",
        "intrinsic": "int64x2_t vqdmull_high_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_high_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SQDMULL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_s16",
        "intrinsic": "int32x4_t vqdmlal_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "SQDMLAL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlal_s32",
        "intrinsic": "int64x2_t vqdmlal_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "SQDMLAL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlalh_s16",
        "intrinsic": "int32_t vqdmlalh_s16(int32_t a, int16_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlalh_s16",
        "argument_preparation": "a -> Sd; b -> Hn; c -> Hm",
        "aarch64_instruction": "SQDMLAL Sd,Hn,Hm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlals_s32",
        "intrinsic": "int64_t vqdmlals_s32(int64_t a, int32_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlals_s32",
        "argument_preparation": "a -> Dd; b -> Sn; c -> Sm",
        "aarch64_instruction": "SQDMLAL Dd,Sn,Sm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_high_s16",
        "intrinsic": "int32x4_t vqdmlal_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_high_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "SQDMLAL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_high_s32",
        "intrinsic": "int64x2_t vqdmlal_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_high_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SQDMLAL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_s16",
        "intrinsic": "int32x4_t vqdmlsl_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "SQDMLSL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlsl_s32",
        "intrinsic": "int64x2_t vqdmlsl_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "SQDMLSL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlslh_s16",
        "intrinsic": "int32_t vqdmlslh_s16(int32_t a, int16_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlslh_s16",
        "argument_preparation": "a -> Sd; b -> Hn; c -> Hm",
        "aarch64_instruction": "SQDMLSL Sd,Hn,Hm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsls_s32",
        "intrinsic": "int64_t vqdmlsls_s32(int64_t a, int32_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsls_s32",
        "argument_preparation": "a -> Dd; b -> Sn; c -> Sm",
        "aarch64_instruction": "SQDMLSL Dd,Sn,Sm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_high_s16",
        "intrinsic": "int32x4_t vqdmlsl_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_high_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "SQDMLSL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_high_s32",
        "intrinsic": "int64x2_t vqdmlsl_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_high_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SQDMLSL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_lane_s16",
        "intrinsic": "int32x4_t vqdmlal_lane_s16(int32x4_t a, int16x4_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_lane_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLAL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlal_lane_s32",
        "intrinsic": "int64x2_t vqdmlal_lane_s32(int64x2_t a, int32x2_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_lane_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMLAL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlalh_lane_s16",
        "intrinsic": "int32_t vqdmlalh_lane_s16(int32_t a, int16_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlalh_lane_s16",
        "argument_preparation": "a -> Sd; b -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLAL Sd,Hn,Vm.H[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlals_lane_s32",
        "intrinsic": "int64_t vqdmlals_lane_s32(int64_t a, int32_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlals_lane_s32",
        "argument_preparation": "a -> Dd; b -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMLAL Dd,Sn,Vm.S[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_high_lane_s16",
        "intrinsic": "int32x4_t vqdmlal_high_lane_s16(int32x4_t a, int16x8_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_high_lane_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLAL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_high_lane_s32",
        "intrinsic": "int64x2_t vqdmlal_high_lane_s32(int64x2_t a, int32x4_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_high_lane_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMLAL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_laneq_s16",
        "intrinsic": "int32x4_t vqdmlal_laneq_s16(int32x4_t a, int16x4_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_laneq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMLAL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_laneq_s32",
        "intrinsic": "int64x2_t vqdmlal_laneq_s32(int64x2_t a, int32x2_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_laneq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLAL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlalh_laneq_s16",
        "intrinsic": "int32_t vqdmlalh_laneq_s16(int32_t a, int16_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlalh_laneq_s16",
        "argument_preparation": "a -> Sd; b -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMLAL Sd,Hn,Vm.H[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlals_laneq_s32",
        "intrinsic": "int64_t vqdmlals_laneq_s32(int64_t a, int32_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlals_laneq_s32",
        "argument_preparation": "a -> Dd; b -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLAL Dd,Sn,Vm.S[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_high_laneq_s16",
        "intrinsic": "int32x4_t vqdmlal_high_laneq_s16(int32x4_t a, int16x8_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_high_laneq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMLAL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_high_laneq_s32",
        "intrinsic": "int64x2_t vqdmlal_high_laneq_s32(int64x2_t a, int32x4_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_high_laneq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLAL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_lane_s16",
        "intrinsic": "int32x4_t vqdmlsl_lane_s16(int32x4_t a, int16x4_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_lane_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLSL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlsl_lane_s32",
        "intrinsic": "int64x2_t vqdmlsl_lane_s32(int64x2_t a, int32x2_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_lane_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMLSL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlslh_lane_s16",
        "intrinsic": "int32_t vqdmlslh_lane_s16(int32_t a, int16_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlslh_lane_s16",
        "argument_preparation": "a -> Sd; b -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLSL Sd,Hn,Vm.H[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsls_lane_s32",
        "intrinsic": "int64_t vqdmlsls_lane_s32(int64_t a, int32_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsls_lane_s32",
        "argument_preparation": "a -> Dd; b -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMLSL Dd,Sn,Vm.S[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_high_lane_s16",
        "intrinsic": "int32x4_t vqdmlsl_high_lane_s16(int32x4_t a, int16x8_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_high_lane_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLSL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_high_lane_s32",
        "intrinsic": "int64x2_t vqdmlsl_high_lane_s32(int64x2_t a, int32x4_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_high_lane_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMLSL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_laneq_s16",
        "intrinsic": "int32x4_t vqdmlsl_laneq_s16(int32x4_t a, int16x4_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_laneq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMLSL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_laneq_s32",
        "intrinsic": "int64x2_t vqdmlsl_laneq_s32(int64x2_t a, int32x2_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_laneq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLSL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlslh_laneq_s16",
        "intrinsic": "int32_t vqdmlslh_laneq_s16(int32_t a, int16_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlslh_laneq_s16",
        "argument_preparation": "a -> Sd; b -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMLSL Sd,Hn,Vm.H[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsls_laneq_s32",
        "intrinsic": "int64_t vqdmlsls_laneq_s32(int64_t a, int32_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsls_laneq_s32",
        "argument_preparation": "a -> Dd; b -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLSL Dd,Sn,Vm.S[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_high_laneq_s16",
        "intrinsic": "int32x4_t vqdmlsl_high_laneq_s16(int32x4_t a, int16x8_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_high_laneq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMLSL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_high_laneq_s32",
        "intrinsic": "int64x2_t vqdmlsl_high_laneq_s32(int64x2_t a, int32x4_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_high_laneq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMLSL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_s8",
        "intrinsic": "int16x8_t vmull_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SMULL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_s16",
        "intrinsic": "int32x4_t vmull_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SMULL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_s32",
        "intrinsic": "int64x2_t vmull_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SMULL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_u8",
        "intrinsic": "uint16x8_t vmull_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UMULL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_u16",
        "intrinsic": "uint32x4_t vmull_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UMULL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_u32",
        "intrinsic": "uint64x2_t vmull_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UMULL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_high_s8",
        "intrinsic": "int16x8_t vmull_high_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SMULL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_s16",
        "intrinsic": "int32x4_t vmull_high_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SMULL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_s32",
        "intrinsic": "int64x2_t vmull_high_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SMULL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_u8",
        "intrinsic": "uint16x8_t vmull_high_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UMULL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_u16",
        "intrinsic": "uint32x4_t vmull_high_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UMULL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_n_s16",
        "intrinsic": "int32x4_t vqdmull_n_s16(int16x4_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_n_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.H[0]",
        "aarch64_instruction": "SQDMULL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmull_n_s32",
        "intrinsic": "int64x2_t vqdmull_n_s32(int32x2_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_n_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.S[0]",
        "aarch64_instruction": "SQDMULL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmull_high_n_s16",
        "intrinsic": "int32x4_t vqdmull_high_n_s16(int16x8_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_high_n_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.H[0]",
        "aarch64_instruction": "SQDMULL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_high_n_s32",
        "intrinsic": "int64x2_t vqdmull_high_n_s32(int32x4_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_high_n_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.S[0]",
        "aarch64_instruction": "SQDMULL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_lane_s16",
        "intrinsic": "int32x4_t vqdmull_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_lane_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmull_lane_s32",
        "intrinsic": "int64x2_t vqdmull_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_lane_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMULL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmullh_lane_s16",
        "intrinsic": "int32_t vqdmullh_lane_s16(int16_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmullh_lane_s16",
        "argument_preparation": "a -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULL Sd,Hn,Vm.H[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulls_lane_s32",
        "intrinsic": "int64_t vqdmulls_lane_s32(int32_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulls_lane_s32",
        "argument_preparation": "a -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMULL Dd,Sn,Vm.S[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_high_lane_s16",
        "intrinsic": "int32x4_t vqdmull_high_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_high_lane_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_high_lane_s32",
        "intrinsic": "int64x2_t vqdmull_high_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_high_lane_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMULL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_laneq_s16",
        "intrinsic": "int32x4_t vqdmull_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_laneq_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMULL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_laneq_s32",
        "intrinsic": "int64x2_t vqdmull_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_laneq_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmullh_laneq_s16",
        "intrinsic": "int32_t vqdmullh_laneq_s16(int16_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmullh_laneq_s16",
        "argument_preparation": "a -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMULL Sd,Hn,Vm.H[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulls_laneq_s32",
        "intrinsic": "int64_t vqdmulls_laneq_s32(int32_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulls_laneq_s32",
        "argument_preparation": "a -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULL Dd,Sn,Vm.S[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_high_laneq_s16",
        "intrinsic": "int32x4_t vqdmull_high_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_high_laneq_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMULL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmull_high_laneq_s32",
        "intrinsic": "int64x2_t vqdmull_high_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmull_high_laneq_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulh_n_s16",
        "intrinsic": "int16x4_t vqdmulh_n_s16(int16x4_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulh_n_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.H[0]",
        "aarch64_instruction": "SQDMULH Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulhq_n_s16",
        "intrinsic": "int16x8_t vqdmulhq_n_s16(int16x8_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhq_n_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.H[0]",
        "aarch64_instruction": "SQDMULH Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulh_n_s32",
        "intrinsic": "int32x2_t vqdmulh_n_s32(int32x2_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulh_n_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.S[0]",
        "aarch64_instruction": "SQDMULH Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulhq_n_s32",
        "intrinsic": "int32x4_t vqdmulhq_n_s32(int32x4_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhq_n_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.S[0]",
        "aarch64_instruction": "SQDMULH Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulh_lane_s16",
        "intrinsic": "int16x4_t vqdmulh_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulh_lane_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULH Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulhq_lane_s16",
        "intrinsic": "int16x8_t vqdmulhq_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhq_lane_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULH Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulh_lane_s32",
        "intrinsic": "int32x2_t vqdmulh_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulh_lane_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMULH Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulhq_lane_s32",
        "intrinsic": "int32x4_t vqdmulhq_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhq_lane_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMULH Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmulhh_lane_s16",
        "intrinsic": "int16_t vqdmulhh_lane_s16(int16_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhh_lane_s16",
        "argument_preparation": "a -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULH Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulhs_lane_s32",
        "intrinsic": "int32_t vqdmulhs_lane_s32(int32_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhs_lane_s32",
        "argument_preparation": "a -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQDMULH Sd,Sn,Vm.H[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulh_laneq_s16",
        "intrinsic": "int16x4_t vqdmulh_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulh_laneq_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMULH Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulhq_laneq_s16",
        "intrinsic": "int16x8_t vqdmulhq_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhq_laneq_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMULH Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulh_laneq_s32",
        "intrinsic": "int32x2_t vqdmulh_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulh_laneq_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULH Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulhq_laneq_s32",
        "intrinsic": "int32x4_t vqdmulhq_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhq_laneq_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULH Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulhh_laneq_s16",
        "intrinsic": "int16_t vqdmulhh_laneq_s16(int16_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhh_laneq_s16",
        "argument_preparation": "a -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQDMULH Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmulhs_laneq_s32",
        "intrinsic": "int32_t vqdmulhs_laneq_s32(int32_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmulhs_laneq_s32",
        "argument_preparation": "a -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQDMULH Sd,Sn,Vm.H[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulh_n_s16",
        "intrinsic": "int16x4_t vqrdmulh_n_s16(int16x4_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulh_n_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.H[0]",
        "aarch64_instruction": "SQRDMULH Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulhq_n_s16",
        "intrinsic": "int16x8_t vqrdmulhq_n_s16(int16x8_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_n_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.H[0]",
        "aarch64_instruction": "SQRDMULH Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulh_n_s32",
        "intrinsic": "int32x2_t vqrdmulh_n_s32(int32x2_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulh_n_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.S[0]",
        "aarch64_instruction": "SQRDMULH Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulhq_n_s32",
        "intrinsic": "int32x4_t vqrdmulhq_n_s32(int32x4_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_n_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.S[0]",
        "aarch64_instruction": "SQRDMULH Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulh_lane_s16",
        "intrinsic": "int16x4_t vqrdmulh_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulh_lane_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMULH Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulhq_lane_s16",
        "intrinsic": "int16x8_t vqrdmulhq_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_lane_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMULH Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulh_lane_s32",
        "intrinsic": "int32x2_t vqrdmulh_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulh_lane_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMULH Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulhq_lane_s32",
        "intrinsic": "int32x4_t vqrdmulhq_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_lane_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMULH Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrdmulhh_lane_s16",
        "intrinsic": "int16_t vqrdmulhh_lane_s16(int16_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhh_lane_s16",
        "argument_preparation": "a -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMULH Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulhs_lane_s32",
        "intrinsic": "int32_t vqrdmulhs_lane_s32(int32_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhs_lane_s32",
        "argument_preparation": "a -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMULH Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulh_laneq_s16",
        "intrinsic": "int16x4_t vqrdmulh_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulh_laneq_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMULH Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulhq_laneq_s16",
        "intrinsic": "int16x8_t vqrdmulhq_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_laneq_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMULH Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulh_laneq_s32",
        "intrinsic": "int32x2_t vqrdmulh_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulh_laneq_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMULH Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulhq_laneq_s32",
        "intrinsic": "int32x4_t vqrdmulhq_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_laneq_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMULH Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulhh_laneq_s16",
        "intrinsic": "int16_t vqrdmulhh_laneq_s16(int16_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhh_laneq_s16",
        "argument_preparation": "a -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMULH Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmulhs_laneq_s32",
        "intrinsic": "int32_t vqrdmulhs_laneq_s32(int32_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhs_laneq_s32",
        "argument_preparation": "a -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMULH Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_n_s16",
        "intrinsic": "int32x4_t vqdmlal_n_s16(int32x4_t a, int16x4_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_n_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "SQDMLAL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlal_n_s32",
        "intrinsic": "int64x2_t vqdmlal_n_s32(int64x2_t a, int32x2_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_n_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "SQDMLAL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlal_high_n_s16",
        "intrinsic": "int32x4_t vqdmlal_high_n_s16(int32x4_t a, int16x8_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_high_n_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "SQDMLAL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlal_high_n_s32",
        "intrinsic": "int64x2_t vqdmlal_high_n_s32(int64x2_t a, int32x4_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlal_high_n_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "SQDMLAL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_n_s16",
        "intrinsic": "int32x4_t vqdmlsl_n_s16(int32x4_t a, int16x4_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_n_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "SQDMLSL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlsl_n_s32",
        "intrinsic": "int64x2_t vqdmlsl_n_s32(int64x2_t a, int32x2_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_n_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "SQDMLSL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqdmlsl_high_n_s16",
        "intrinsic": "int32x4_t vqdmlsl_high_n_s16(int32x4_t a, int16x8_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_high_n_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "SQDMLSL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqdmlsl_high_n_s32",
        "intrinsic": "int64x2_t vqdmlsl_high_n_s32(int64x2_t a, int32x4_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqdmlsl_high_n_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "SQDMLSL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_p8",
        "intrinsic": "poly8x8_t vmul_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "PMUL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_p8",
        "intrinsic": "poly8x16_t vmulq_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "PMUL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_p8",
        "intrinsic": "poly16x8_t vmull_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "PMULL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_high_p8",
        "intrinsic": "poly16x8_t vmull_high_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "PMULL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdiv_f32",
        "intrinsic": "float32x2_t vdiv_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdiv_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FDIV Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdivq_f32",
        "intrinsic": "float32x4_t vdivq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdivq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FDIV Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdiv_f64",
        "intrinsic": "float64x1_t vdiv_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdiv_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FDIV Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdivq_f64",
        "intrinsic": "float64x2_t vdivq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdivq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FDIV Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsub_s8",
        "intrinsic": "int8x8_t vsub_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SUB Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_s8",
        "intrinsic": "int8x16_t vsubq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SUB Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_s16",
        "intrinsic": "int16x4_t vsub_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SUB Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_s16",
        "intrinsic": "int16x8_t vsubq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SUB Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_s32",
        "intrinsic": "int32x2_t vsub_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SUB Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_s32",
        "intrinsic": "int32x4_t vsubq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SUB Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_s64",
        "intrinsic": "int64x1_t vsub_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_s64",
        "intrinsic": "int64x2_t vsubq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SUB Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_u8",
        "intrinsic": "uint8x8_t vsub_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SUB Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_u8",
        "intrinsic": "uint8x16_t vsubq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SUB Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_u16",
        "intrinsic": "uint16x4_t vsub_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SUB Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_u16",
        "intrinsic": "uint16x8_t vsubq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SUB Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_u32",
        "intrinsic": "uint32x2_t vsub_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SUB Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_u32",
        "intrinsic": "uint32x4_t vsubq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SUB Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_u64",
        "intrinsic": "uint64x1_t vsub_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_u64",
        "intrinsic": "uint64x2_t vsubq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SUB Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_f32",
        "intrinsic": "float32x2_t vsub_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FSUB Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubq_f32",
        "intrinsic": "float32x4_t vsubq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FSUB Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsub_f64",
        "intrinsic": "float64x1_t vsub_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FSUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubq_f64",
        "intrinsic": "float64x2_t vsubq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FSUB Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubd_s64",
        "intrinsic": "int64_t vsubd_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubd_u64",
        "intrinsic": "uint64_t vsubd_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubl_s8",
        "intrinsic": "int16x8_t vsubl_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SSUBL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubl_s16",
        "intrinsic": "int32x4_t vsubl_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SSUBL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubl_s32",
        "intrinsic": "int64x2_t vsubl_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SSUBL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubl_u8",
        "intrinsic": "uint16x8_t vsubl_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "USUBL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubl_u16",
        "intrinsic": "uint32x4_t vsubl_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "USUBL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubl_u32",
        "intrinsic": "uint64x2_t vsubl_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "USUBL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubl_high_s8",
        "intrinsic": "int16x8_t vsubl_high_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_high_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SSUBL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubl_high_s16",
        "intrinsic": "int32x4_t vsubl_high_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_high_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SSUBL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubl_high_s32",
        "intrinsic": "int64x2_t vsubl_high_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_high_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SSUBL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubl_high_u8",
        "intrinsic": "uint16x8_t vsubl_high_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_high_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "USUBL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubl_high_u16",
        "intrinsic": "uint32x4_t vsubl_high_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_high_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "USUBL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubl_high_u32",
        "intrinsic": "uint64x2_t vsubl_high_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubl_high_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "USUBL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubw_s8",
        "intrinsic": "int16x8_t vsubw_s8(int16x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_s8",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8B",
        "aarch64_instruction": "SSUBW Vd.8H,Vn.8H,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubw_s16",
        "intrinsic": "int32x4_t vsubw_s16(int32x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_s16",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4H",
        "aarch64_instruction": "SSUBW Vd.4S,Vn.4S,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubw_s32",
        "intrinsic": "int64x2_t vsubw_s32(int64x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_s32",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2S",
        "aarch64_instruction": "SSUBW Vd.2D,Vn.2D,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubw_u8",
        "intrinsic": "uint16x8_t vsubw_u8(uint16x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_u8",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8B",
        "aarch64_instruction": "USUBW Vd.8H,Vn.8H,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubw_u16",
        "intrinsic": "uint32x4_t vsubw_u16(uint32x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_u16",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4H",
        "aarch64_instruction": "USUBW Vd.4S,Vn.4S,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubw_u32",
        "intrinsic": "uint64x2_t vsubw_u32(uint64x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_u32",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2S",
        "aarch64_instruction": "USUBW Vd.2D,Vn.2D,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubw_high_s8",
        "intrinsic": "int16x8_t vsubw_high_s8(int16x8_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_high_s8",
        "argument_preparation": "a -> Vn.8H; b -> Vm.16B",
        "aarch64_instruction": "SSUBW2 Vd.8H,Vn.8H,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubw_high_s16",
        "intrinsic": "int32x4_t vsubw_high_s16(int32x4_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_high_s16",
        "argument_preparation": "a -> Vn.4S; b -> Vm.8H",
        "aarch64_instruction": "SSUBW2 Vd.4S,Vn.4S,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubw_high_s32",
        "intrinsic": "int64x2_t vsubw_high_s32(int64x2_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_high_s32",
        "argument_preparation": "a -> Vn.2D; b -> Vm.4S",
        "aarch64_instruction": "SSUBW2 Vd.2D,Vn.2D,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubw_high_u8",
        "intrinsic": "uint16x8_t vsubw_high_u8(uint16x8_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_high_u8",
        "argument_preparation": "a -> Vn.8H; b -> Vm.16B",
        "aarch64_instruction": "USUBW2 Vd.8H,Vn.8H,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubw_high_u16",
        "intrinsic": "uint32x4_t vsubw_high_u16(uint32x4_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_high_u16",
        "argument_preparation": "a -> Vn.4S; b -> Vm.8H",
        "aarch64_instruction": "USUBW2 Vd.4S,Vn.4S,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubw_high_u32",
        "intrinsic": "uint64x2_t vsubw_high_u32(uint64x2_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubw_high_u32",
        "argument_preparation": "a -> Vn.2D; b -> Vm.4S",
        "aarch64_instruction": "USUBW2 Vd.2D,Vn.2D,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vhsub_s8",
        "intrinsic": "int8x8_t vhsub_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsub_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SHSUB Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsubq_s8",
        "intrinsic": "int8x16_t vhsubq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsubq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SHSUB Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsub_s16",
        "intrinsic": "int16x4_t vhsub_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsub_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SHSUB Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsubq_s16",
        "intrinsic": "int16x8_t vhsubq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsubq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SHSUB Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsub_s32",
        "intrinsic": "int32x2_t vhsub_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsub_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SHSUB Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsubq_s32",
        "intrinsic": "int32x4_t vhsubq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsubq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SHSUB Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsub_u8",
        "intrinsic": "uint8x8_t vhsub_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsub_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UHSUB Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsubq_u8",
        "intrinsic": "uint8x16_t vhsubq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsubq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UHSUB Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsub_u16",
        "intrinsic": "uint16x4_t vhsub_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsub_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UHSUB Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsubq_u16",
        "intrinsic": "uint16x8_t vhsubq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsubq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UHSUB Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsub_u32",
        "intrinsic": "uint32x2_t vhsub_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsub_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UHSUB Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vhsubq_u32",
        "intrinsic": "uint32x4_t vhsubq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vhsubq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UHSUB Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubhn_s16",
        "intrinsic": "int8x8_t vsubhn_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SUBHN Vd.8B,Vn.8H,Vm.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubhn_s32",
        "intrinsic": "int16x4_t vsubhn_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SUBHN Vd.4H,Vn.4S,Vm.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubhn_s64",
        "intrinsic": "int32x2_t vsubhn_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SUBHN Vd.2S,Vn.2D,Vm.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubhn_u16",
        "intrinsic": "uint8x8_t vsubhn_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SUBHN Vd.8B,Vn.8H,Vm.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubhn_u32",
        "intrinsic": "uint16x4_t vsubhn_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SUBHN Vd.4H,Vn.4S,Vm.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubhn_u64",
        "intrinsic": "uint32x2_t vsubhn_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SUBHN Vd.2S,Vn.2D,Vm.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsubhn_high_s16",
        "intrinsic": "int8x16_t vsubhn_high_s16(int8x8_t r, int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_high_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SUBHN2 Vd.16B,Vn.8H,Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubhn_high_s32",
        "intrinsic": "int16x8_t vsubhn_high_s32(int16x4_t r, int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_high_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SUBHN2 Vd.8H,Vn.4S,Vm.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubhn_high_s64",
        "intrinsic": "int32x4_t vsubhn_high_s64(int32x2_t r, int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_high_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SUBHN2 Vd.4S,Vn.2D,Vm.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubhn_high_u16",
        "intrinsic": "uint8x16_t vsubhn_high_u16(uint8x8_t r, uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_high_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SUBHN2 Vd.16B,Vn.8H,Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubhn_high_u32",
        "intrinsic": "uint16x8_t vsubhn_high_u32(uint16x4_t r, uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_high_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SUBHN2 Vd.8H,Vn.4S,Vm.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsubhn_high_u64",
        "intrinsic": "uint32x4_t vsubhn_high_u64(uint32x2_t r, uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubhn_high_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SUBHN2 Vd.4S,Vn.2D,Vm.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsubhn_s16",
        "intrinsic": "int8x8_t vrsubhn_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "RSUBHN Vd.8B,Vn.8H,Vm.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsubhn_s32",
        "intrinsic": "int16x4_t vrsubhn_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "RSUBHN Vd.4H,Vn.4S,Vm.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsubhn_s64",
        "intrinsic": "int32x2_t vrsubhn_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RSUBHN Vd.2S,Vn.2D,Vm.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsubhn_u16",
        "intrinsic": "uint8x8_t vrsubhn_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "RSUBHN Vd.8B,Vn.8H,Vm.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsubhn_u32",
        "intrinsic": "uint16x4_t vrsubhn_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "RSUBHN Vd.4H,Vn.4S,Vm.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsubhn_u64",
        "intrinsic": "uint32x2_t vrsubhn_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RSUBHN Vd.2S,Vn.2D,Vm.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsubhn_high_s16",
        "intrinsic": "int8x16_t vrsubhn_high_s16(int8x8_t r, int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_high_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "RSUBHN2 Vd.16B,Vn.8H,Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsubhn_high_s32",
        "intrinsic": "int16x8_t vrsubhn_high_s32(int16x4_t r, int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_high_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "RSUBHN2 Vd.8H,Vn.4S,Vm.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsubhn_high_s64",
        "intrinsic": "int32x4_t vrsubhn_high_s64(int32x2_t r, int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_high_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RSUBHN2 Vd.4S,Vn.2D,Vm.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsubhn_high_u16",
        "intrinsic": "uint8x16_t vrsubhn_high_u16(uint8x8_t r, uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_high_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "RSUBHN2 Vd.16B,Vn.8H,Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsubhn_high_u32",
        "intrinsic": "uint16x8_t vrsubhn_high_u32(uint16x4_t r, uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_high_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "RSUBHN2 Vd.8H,Vn.4S,Vm.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsubhn_high_u64",
        "intrinsic": "uint32x4_t vrsubhn_high_u64(uint32x2_t r, uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsubhn_high_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RSUBHN2 Vd.4S,Vn.2D,Vm.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqsub_s8",
        "intrinsic": "int8x8_t vqsub_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsub_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SQSUB Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubq_s8",
        "intrinsic": "int8x16_t vqsubq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SQSUB Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsub_s16",
        "intrinsic": "int16x4_t vqsub_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsub_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SQSUB Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubq_s16",
        "intrinsic": "int16x8_t vqsubq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SQSUB Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsub_s32",
        "intrinsic": "int32x2_t vqsub_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsub_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SQSUB Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubq_s32",
        "intrinsic": "int32x4_t vqsubq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SQSUB Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsub_s64",
        "intrinsic": "int64x1_t vqsub_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsub_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SQSUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubq_s64",
        "intrinsic": "int64x2_t vqsubq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SQSUB Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsub_u8",
        "intrinsic": "uint8x8_t vqsub_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsub_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UQSUB Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubq_u8",
        "intrinsic": "uint8x16_t vqsubq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UQSUB Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsub_u16",
        "intrinsic": "uint16x4_t vqsub_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsub_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UQSUB Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubq_u16",
        "intrinsic": "uint16x8_t vqsubq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UQSUB Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsub_u32",
        "intrinsic": "uint32x2_t vqsub_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsub_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UQSUB Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubq_u32",
        "intrinsic": "uint32x4_t vqsubq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UQSUB Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsub_u64",
        "intrinsic": "uint64x1_t vqsub_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsub_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "UQSUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubq_u64",
        "intrinsic": "uint64x2_t vqsubq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UQSUB Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqsubb_s8",
        "intrinsic": "int8_t vqsubb_s8(int8_t a, int8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubb_s8",
        "argument_preparation": "a -> Bn; b -> Bm",
        "aarch64_instruction": "SQSUB Bd,Bn,Bm",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqsubh_s16",
        "intrinsic": "int16_t vqsubh_s16(int16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubh_s16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "SQSUB Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqsubs_s32",
        "intrinsic": "int32_t vqsubs_s32(int32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubs_s32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "SQSUB Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqsubd_s64",
        "intrinsic": "int64_t vqsubd_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SQSUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqsubb_u8",
        "intrinsic": "uint8_t vqsubb_u8(uint8_t a, uint8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubb_u8",
        "argument_preparation": "a -> Bn; b -> Bm",
        "aarch64_instruction": "UQSUB Bd,Bn,Bm",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqsubh_u16",
        "intrinsic": "uint16_t vqsubh_u16(uint16_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubh_u16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "UQSUB Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqsubs_u32",
        "intrinsic": "uint32_t vqsubs_u32(uint32_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubs_u32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "UQSUB Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqsubd_u64",
        "intrinsic": "uint64_t vqsubd_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqsubd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "UQSUB Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabd_s8",
        "intrinsic": "int8x8_t vabd_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SABD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdq_s8",
        "intrinsic": "int8x16_t vabdq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SABD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabd_s16",
        "intrinsic": "int16x4_t vabd_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SABD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdq_s16",
        "intrinsic": "int16x8_t vabdq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SABD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabd_s32",
        "intrinsic": "int32x2_t vabd_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SABD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdq_s32",
        "intrinsic": "int32x4_t vabdq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SABD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabd_u8",
        "intrinsic": "uint8x8_t vabd_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UABD Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdq_u8",
        "intrinsic": "uint8x16_t vabdq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UABD Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabd_u16",
        "intrinsic": "uint16x4_t vabd_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UABD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdq_u16",
        "intrinsic": "uint16x8_t vabdq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UABD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabd_u32",
        "intrinsic": "uint32x2_t vabd_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UABD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdq_u32",
        "intrinsic": "uint32x4_t vabdq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UABD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabd_f32",
        "intrinsic": "float32x2_t vabd_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FABD Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdq_f32",
        "intrinsic": "float32x4_t vabdq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FABD Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabd_f64",
        "intrinsic": "float64x1_t vabd_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FABD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabdq_f64",
        "intrinsic": "float64x2_t vabdq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FABD Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabds_f32",
        "intrinsic": "float32_t vabds_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabds_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FABD Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabdd_f64",
        "intrinsic": "float64_t vabdd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FABD Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabdl_s8",
        "intrinsic": "int16x8_t vabdl_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SABDL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdl_s16",
        "intrinsic": "int32x4_t vabdl_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SABDL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdl_s32",
        "intrinsic": "int64x2_t vabdl_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SABDL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdl_u8",
        "intrinsic": "uint16x8_t vabdl_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UABDL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdl_u16",
        "intrinsic": "uint32x4_t vabdl_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UABDL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdl_u32",
        "intrinsic": "uint64x2_t vabdl_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UABDL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabdl_high_s8",
        "intrinsic": "int16x8_t vabdl_high_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_high_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SABDL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabdl_high_s16",
        "intrinsic": "int32x4_t vabdl_high_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_high_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SABDL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabdl_high_s32",
        "intrinsic": "int64x2_t vabdl_high_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_high_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SABDL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabdl_high_u8",
        "intrinsic": "uint16x8_t vabdl_high_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_high_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UABDL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabdl_high_u16",
        "intrinsic": "uint32x4_t vabdl_high_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_high_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UABDL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabdl_high_u32",
        "intrinsic": "uint64x2_t vabdl_high_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdl_high_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UABDL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaba_s8",
        "intrinsic": "int8x8_t vaba_s8(int8x8_t a, int8x8_t b, int8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaba_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "SABA Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabaq_s8",
        "intrinsic": "int8x16_t vabaq_s8(int8x16_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabaq_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "SABA Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaba_s16",
        "intrinsic": "int16x4_t vaba_s16(int16x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaba_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "SABA Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabaq_s16",
        "intrinsic": "int16x8_t vabaq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabaq_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "SABA Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaba_s32",
        "intrinsic": "int32x2_t vaba_s32(int32x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaba_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "SABA Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabaq_s32",
        "intrinsic": "int32x4_t vabaq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabaq_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SABA Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaba_u8",
        "intrinsic": "uint8x8_t vaba_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaba_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "UABA Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabaq_u8",
        "intrinsic": "uint8x16_t vabaq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabaq_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "UABA Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaba_u16",
        "intrinsic": "uint16x4_t vaba_u16(uint16x4_t a, uint16x4_t b, uint16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaba_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "UABA Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabaq_u16",
        "intrinsic": "uint16x8_t vabaq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabaq_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "UABA Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaba_u32",
        "intrinsic": "uint32x2_t vaba_u32(uint32x2_t a, uint32x2_t b, uint32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaba_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "UABA Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabaq_u32",
        "intrinsic": "uint32x4_t vabaq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabaq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "UABA Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabal_s8",
        "intrinsic": "int16x8_t vabal_s8(int16x8_t a, int8x8_t b, int8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_s8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "SABAL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabal_s16",
        "intrinsic": "int32x4_t vabal_s16(int32x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "SABAL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabal_s32",
        "intrinsic": "int64x2_t vabal_s32(int64x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "SABAL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabal_u8",
        "intrinsic": "uint16x8_t vabal_u8(uint16x8_t a, uint8x8_t b, uint8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_u8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "UABAL Vd.8H,Vn.8B,Vm.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabal_u16",
        "intrinsic": "uint32x4_t vabal_u16(uint32x4_t a, uint16x4_t b, uint16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "UABAL Vd.4S,Vn.4H,Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabal_u32",
        "intrinsic": "uint64x2_t vabal_u32(uint64x2_t a, uint32x2_t b, uint32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "UABAL Vd.2D,Vn.2S,Vm.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabal_high_s8",
        "intrinsic": "int16x8_t vabal_high_s8(int16x8_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_high_s8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "SABAL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabal_high_s16",
        "intrinsic": "int32x4_t vabal_high_s16(int32x4_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_high_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "SABAL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabal_high_s32",
        "intrinsic": "int64x2_t vabal_high_s32(int64x2_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_high_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SABAL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabal_high_u8",
        "intrinsic": "uint16x8_t vabal_high_u8(uint16x8_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_high_u8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "UABAL2 Vd.8H,Vn.16B,Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabal_high_u16",
        "intrinsic": "uint32x4_t vabal_high_u16(uint32x4_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_high_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "UABAL2 Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabal_high_u32",
        "intrinsic": "uint64x2_t vabal_high_u32(uint64x2_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabal_high_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "UABAL2 Vd.2D,Vn.4S,Vm.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabs_s8",
        "intrinsic": "int8x8_t vabs_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabs_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "ABS Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabsq_s8",
        "intrinsic": "int8x16_t vabsq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "ABS Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabs_s16",
        "intrinsic": "int16x4_t vabs_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabs_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "ABS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabsq_s16",
        "intrinsic": "int16x8_t vabsq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "ABS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabs_s32",
        "intrinsic": "int32x2_t vabs_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabs_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "ABS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabsq_s32",
        "intrinsic": "int32x4_t vabsq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "ABS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabs_f32",
        "intrinsic": "float32x2_t vabs_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabs_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FABS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabsq_f32",
        "intrinsic": "float32x4_t vabsq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FABS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vabs_s64",
        "intrinsic": "int64x1_t vabs_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabs_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "ABS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabsd_s64",
        "intrinsic": "int64_t vabsd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "ABS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabsq_s64",
        "intrinsic": "int64x2_t vabsq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "ABS Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabs_f64",
        "intrinsic": "float64x1_t vabs_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabs_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FABS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vabsq_f64",
        "intrinsic": "float64x2_t vabsq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FABS Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqabs_s8",
        "intrinsic": "int8x8_t vqabs_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabs_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "SQABS Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqabsq_s8",
        "intrinsic": "int8x16_t vqabsq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabsq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "SQABS Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqabs_s16",
        "intrinsic": "int16x4_t vqabs_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabs_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "SQABS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqabsq_s16",
        "intrinsic": "int16x8_t vqabsq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabsq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SQABS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqabs_s32",
        "intrinsic": "int32x2_t vqabs_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabs_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "SQABS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqabsq_s32",
        "intrinsic": "int32x4_t vqabsq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabsq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SQABS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqabs_s64",
        "intrinsic": "int64x1_t vqabs_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabs_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "SQABS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqabsq_s64",
        "intrinsic": "int64x2_t vqabsq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabsq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "SQABS Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqabsb_s8",
        "intrinsic": "int8_t vqabsb_s8(int8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabsb_s8",
        "argument_preparation": "a -> Bn",
        "aarch64_instruction": "SQABS Bd,Bn",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqabsh_s16",
        "intrinsic": "int16_t vqabsh_s16(int16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabsh_s16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "SQABS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqabss_s32",
        "intrinsic": "int32_t vqabss_s32(int32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabss_s32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "SQABS Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqabsd_s64",
        "intrinsic": "int64_t vqabsd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqabsd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "SQABS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vamax_f16",
        "intrinsic": "float16x4_t vamax_f16(float16x4_t vn, float16x4_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vamax_f16",
        "argument_preparation": "vn -> Vn.4H; vm -> Vm.4H",
        "aarch64_instruction": "FAMAX Vd.4H, Vn.4H, Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vamaxq_f16",
        "intrinsic": "float16x8_t vamaxq_f16(float16x8_t vn, float16x8_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vamaxq_f16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm.8H",
        "aarch64_instruction": "FAMAX Vd.8H, Vn.8H, Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vamax_f32",
        "intrinsic": "float32x2_t vamax_f32(float32x2_t vn, float32x2_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vamax_f32",
        "argument_preparation": "vn -> Vn.2S; vm -> Vm.2S",
        "aarch64_instruction": "FAMAX Vd.2S, Vn.2S, Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vamaxq_f32",
        "intrinsic": "float32x4_t vamaxq_f32(float32x4_t vn, float32x4_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vamaxq_f32",
        "argument_preparation": "vn -> Vn.4S; vm -> Vm.4S",
        "aarch64_instruction": "FAMAX Vd.4S, Vn.4S, Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vamaxq_f64",
        "intrinsic": "float64x2_t vamaxq_f64(float64x2_t vn, float64x2_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vamaxq_f64",
        "argument_preparation": "vn -> Vn.2D; vm -> Vm.2D",
        "aarch64_instruction": "FAMAX Vd.2D, Vn.2D, Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vamin_f16",
        "intrinsic": "float16x4_t vamin_f16(float16x4_t vn, float16x4_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vamin_f16",
        "argument_preparation": "vn -> Vn.4H; vm -> Vm.4H",
        "aarch64_instruction": "FAMIN Vd.4H, Vn.4H, Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaminq_f16",
        "intrinsic": "float16x8_t vaminq_f16(float16x8_t vn, float16x8_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaminq_f16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm.8H",
        "aarch64_instruction": "FAMIN Vd.8H, Vn.8H, Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vamin_f32",
        "intrinsic": "float32x2_t vamin_f32(float32x2_t vn, float32x2_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vamin_f32",
        "argument_preparation": "vn -> Vn.2S; vm -> Vm.2S",
        "aarch64_instruction": "FAMIN Vd.2S, Vn.2S, Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaminq_f32",
        "intrinsic": "float32x4_t vaminq_f32(float32x4_t vn, float32x4_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaminq_f32",
        "argument_preparation": "vn -> Vn.4S; vm -> Vm.4S",
        "aarch64_instruction": "FAMIN Vd.4S, Vn.4S, Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaminq_f64",
        "intrinsic": "float64x2_t vaminq_f64(float64x2_t vn, float64x2_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaminq_f64",
        "argument_preparation": "vn -> Vn.2D; vm -> Vm.2D",
        "aarch64_instruction": "FAMIN Vd.2D, Vn.2D, Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmax_s8",
        "intrinsic": "int8x8_t vmax_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SMAX Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmaxq_s8",
        "intrinsic": "int8x16_t vmaxq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SMAX Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmax_s16",
        "intrinsic": "int16x4_t vmax_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SMAX Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmaxq_s16",
        "intrinsic": "int16x8_t vmaxq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SMAX Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmax_s32",
        "intrinsic": "int32x2_t vmax_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SMAX Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmaxq_s32",
        "intrinsic": "int32x4_t vmaxq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SMAX Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmax_u8",
        "intrinsic": "uint8x8_t vmax_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UMAX Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmaxq_u8",
        "intrinsic": "uint8x16_t vmaxq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UMAX Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmax_u16",
        "intrinsic": "uint16x4_t vmax_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UMAX Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmaxq_u16",
        "intrinsic": "uint16x8_t vmaxq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UMAX Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmax_u32",
        "intrinsic": "uint32x2_t vmax_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UMAX Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmaxq_u32",
        "intrinsic": "uint32x4_t vmaxq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UMAX Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmax_f32",
        "intrinsic": "float32x2_t vmax_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMAX Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmaxq_f32",
        "intrinsic": "float32x4_t vmaxq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMAX Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmax_f64",
        "intrinsic": "float64x1_t vmax_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FMAX Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxq_f64",
        "intrinsic": "float64x2_t vmaxq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMAX Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmin_s8",
        "intrinsic": "int8x8_t vmin_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SMIN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vminq_s8",
        "intrinsic": "int8x16_t vminq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SMIN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmin_s16",
        "intrinsic": "int16x4_t vmin_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SMIN Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vminq_s16",
        "intrinsic": "int16x8_t vminq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SMIN Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmin_s32",
        "intrinsic": "int32x2_t vmin_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SMIN Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vminq_s32",
        "intrinsic": "int32x4_t vminq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SMIN Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmin_u8",
        "intrinsic": "uint8x8_t vmin_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UMIN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vminq_u8",
        "intrinsic": "uint8x16_t vminq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UMIN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmin_u16",
        "intrinsic": "uint16x4_t vmin_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UMIN Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vminq_u16",
        "intrinsic": "uint16x8_t vminq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UMIN Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmin_u32",
        "intrinsic": "uint32x2_t vmin_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UMIN Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vminq_u32",
        "intrinsic": "uint32x4_t vminq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UMIN Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmin_f32",
        "intrinsic": "float32x2_t vmin_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMIN Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vminq_f32",
        "intrinsic": "float32x4_t vminq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMIN Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmin_f64",
        "intrinsic": "float64x1_t vmin_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FMIN Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminq_f64",
        "intrinsic": "float64x2_t vminq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMIN Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxnm_f32",
        "intrinsic": "float32x2_t vmaxnm_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnm_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMAXNM Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmaxnmq_f32",
        "intrinsic": "float32x4_t vmaxnmq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMAXNM Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmaxnm_f64",
        "intrinsic": "float64x1_t vmaxnm_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnm_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FMAXNM Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxnmq_f64",
        "intrinsic": "float64x2_t vmaxnmq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMAXNM Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminnm_f32",
        "intrinsic": "float32x2_t vminnm_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnm_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMINNM Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vminnmq_f32",
        "intrinsic": "float32x4_t vminnmq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMINNM Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vminnm_f64",
        "intrinsic": "float64x1_t vminnm_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnm_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FMINNM Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminnmq_f64",
        "intrinsic": "float64x2_t vminnmq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMINNM Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd_f32",
        "intrinsic": "float32x2_t vrnd_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRINTZ Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndq_f32",
        "intrinsic": "float32x4_t vrndq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRINTZ Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrnd_f64",
        "intrinsic": "float64x1_t vrnd_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINTZ Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndq_f64",
        "intrinsic": "float64x2_t vrndq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRINTZ Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndn_f32",
        "intrinsic": "float32x2_t vrndn_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndn_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRINTN Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndnq_f32",
        "intrinsic": "float32x4_t vrndnq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndnq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRINTN Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndn_f64",
        "intrinsic": "float64x1_t vrndn_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndn_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINTN Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndnq_f64",
        "intrinsic": "float64x2_t vrndnq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndnq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRINTN Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndns_f32",
        "intrinsic": "float32_t vrndns_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndns_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FRINTN Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndm_f32",
        "intrinsic": "float32x2_t vrndm_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndm_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRINTM Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndmq_f32",
        "intrinsic": "float32x4_t vrndmq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndmq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRINTM Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndm_f64",
        "intrinsic": "float64x1_t vrndm_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndm_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINTM Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndmq_f64",
        "intrinsic": "float64x2_t vrndmq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndmq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRINTM Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndp_f32",
        "intrinsic": "float32x2_t vrndp_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndp_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRINTP Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndpq_f32",
        "intrinsic": "float32x4_t vrndpq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndpq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRINTP Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndp_f64",
        "intrinsic": "float64x1_t vrndp_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndp_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINTP Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndpq_f64",
        "intrinsic": "float64x2_t vrndpq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndpq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRINTP Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnda_f32",
        "intrinsic": "float32x2_t vrnda_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnda_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRINTA Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndaq_f32",
        "intrinsic": "float32x4_t vrndaq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndaq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRINTA Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrnda_f64",
        "intrinsic": "float64x1_t vrnda_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnda_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINTA Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndaq_f64",
        "intrinsic": "float64x2_t vrndaq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndaq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRINTA Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndi_f32",
        "intrinsic": "float32x2_t vrndi_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndi_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRINTI Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndiq_f32",
        "intrinsic": "float32x4_t vrndiq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndiq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRINTI Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndi_f64",
        "intrinsic": "float64x1_t vrndi_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndi_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINTI Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndiq_f64",
        "intrinsic": "float64x2_t vrndiq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndiq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRINTI Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndx_f32",
        "intrinsic": "float32x2_t vrndx_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndx_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRINTX Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndxq_f32",
        "intrinsic": "float32x4_t vrndxq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndxq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRINTX Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndx_f64",
        "intrinsic": "float64x1_t vrndx_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndx_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINTX Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndxq_f64",
        "intrinsic": "float64x2_t vrndxq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndxq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRINTX Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpe_u32",
        "intrinsic": "uint32x2_t vrecpe_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpe_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "URECPE Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrecpeq_u32",
        "intrinsic": "uint32x4_t vrecpeq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpeq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "URECPE Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrecpe_f32",
        "intrinsic": "float32x2_t vrecpe_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpe_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRECPE Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrecpeq_f32",
        "intrinsic": "float32x4_t vrecpeq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpeq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRECPE Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrecpe_f64",
        "intrinsic": "float64x1_t vrecpe_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpe_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRECPE Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpeq_f64",
        "intrinsic": "float64x2_t vrecpeq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpeq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRECPE Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpes_f32",
        "intrinsic": "float32_t vrecpes_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpes_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FRECPE Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecped_f64",
        "intrinsic": "float64_t vrecped_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecped_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRECPE Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecps_f32",
        "intrinsic": "float32x2_t vrecps_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecps_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FRECPS Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrecpsq_f32",
        "intrinsic": "float32x4_t vrecpsq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpsq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FRECPS Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrecps_f64",
        "intrinsic": "float64x1_t vrecps_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecps_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FRECPS Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpsq_f64",
        "intrinsic": "float64x2_t vrecpsq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpsq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FRECPS Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpss_f32",
        "intrinsic": "float32_t vrecpss_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpss_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FRECPS Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpsd_f64",
        "intrinsic": "float64_t vrecpsd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpsd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FRECPS Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrte_u32",
        "intrinsic": "uint32x2_t vrsqrte_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrte_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "URSQRTE Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsqrteq_u32",
        "intrinsic": "uint32x4_t vrsqrteq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrteq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "URSQRTE Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsqrte_f32",
        "intrinsic": "float32x2_t vrsqrte_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrte_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FRSQRTE Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsqrteq_f32",
        "intrinsic": "float32x4_t vrsqrteq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrteq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FRSQRTE Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsqrte_f64",
        "intrinsic": "float64x1_t vrsqrte_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrte_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRSQRTE Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrteq_f64",
        "intrinsic": "float64x2_t vrsqrteq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrteq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FRSQRTE Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrtes_f32",
        "intrinsic": "float32_t vrsqrtes_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrtes_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FRSQRTE Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrted_f64",
        "intrinsic": "float64_t vrsqrted_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrted_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRSQRTE Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrts_f32",
        "intrinsic": "float32x2_t vrsqrts_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrts_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FRSQRTS Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsqrtsq_f32",
        "intrinsic": "float32x4_t vrsqrtsq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrtsq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FRSQRTS Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsqrts_f64",
        "intrinsic": "float64x1_t vrsqrts_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrts_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FRSQRTS Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrtsq_f64",
        "intrinsic": "float64x2_t vrsqrtsq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrtsq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FRSQRTS Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrtss_f32",
        "intrinsic": "float32_t vrsqrtss_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrtss_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FRSQRTS Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrtsd_f64",
        "intrinsic": "float64_t vrsqrtsd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrtsd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FRSQRTS Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpxs_f32",
        "intrinsic": "float32_t vrecpxs_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpxs_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FRECPX Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpxd_f64",
        "intrinsic": "float64_t vrecpxd_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpxd_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRECPX Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqrt_f32",
        "intrinsic": "float32x2_t vsqrt_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqrt_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FSQRT Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqrtq_f32",
        "intrinsic": "float32x4_t vsqrtq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqrtq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FSQRT Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqrt_f64",
        "intrinsic": "float64x1_t vsqrt_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqrt_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FSQRT Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqrtq_f64",
        "intrinsic": "float64x2_t vsqrtq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqrtq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FSQRT Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpadd_s8",
        "intrinsic": "int8x8_t vpadd_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadd_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ADDP Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadd_s16",
        "intrinsic": "int16x4_t vpadd_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadd_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ADDP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadd_s32",
        "intrinsic": "int32x2_t vpadd_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadd_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ADDP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadd_u8",
        "intrinsic": "uint8x8_t vpadd_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadd_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ADDP Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadd_u16",
        "intrinsic": "uint16x4_t vpadd_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadd_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ADDP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadd_u32",
        "intrinsic": "uint32x2_t vpadd_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadd_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ADDP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadd_f32",
        "intrinsic": "float32x2_t vpadd_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadd_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FADDP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddq_s8",
        "intrinsic": "int8x16_t vpaddq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ADDP Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_s16",
        "intrinsic": "int16x8_t vpaddq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ADDP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_s32",
        "intrinsic": "int32x4_t vpaddq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ADDP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_s64",
        "intrinsic": "int64x2_t vpaddq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ADDP Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_u8",
        "intrinsic": "uint8x16_t vpaddq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ADDP Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_u16",
        "intrinsic": "uint16x8_t vpaddq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ADDP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_u32",
        "intrinsic": "uint32x4_t vpaddq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ADDP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_u64",
        "intrinsic": "uint64x2_t vpaddq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ADDP Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_f32",
        "intrinsic": "float32x4_t vpaddq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FADDP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddq_f64",
        "intrinsic": "float64x2_t vpaddq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FADDP Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddd_s64",
        "intrinsic": "int64_t vpaddd_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddd_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "ADDP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddd_u64",
        "intrinsic": "uint64_t vpaddd_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddd_u64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "ADDP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpadds_f32",
        "intrinsic": "float32_t vpadds_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadds_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FADDP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddd_f64",
        "intrinsic": "float64_t vpaddd_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddd_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FADDP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpaddl_s8",
        "intrinsic": "int16x4_t vpaddl_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddl_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "SADDLP Vd.4H,Vn.8B",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddlq_s8",
        "intrinsic": "int16x8_t vpaddlq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddlq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "SADDLP Vd.8H,Vn.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddl_s16",
        "intrinsic": "int32x2_t vpaddl_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddl_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "SADDLP Vd.2S,Vn.4H",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddlq_s16",
        "intrinsic": "int32x4_t vpaddlq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddlq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SADDLP Vd.4S,Vn.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddl_s32",
        "intrinsic": "int64x1_t vpaddl_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddl_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "SADDLP Vd.1D,Vn.2S",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddlq_s32",
        "intrinsic": "int64x2_t vpaddlq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddlq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SADDLP Vd.2D,Vn.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddl_u8",
        "intrinsic": "uint16x4_t vpaddl_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddl_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "UADDLP Vd.4H,Vn.8B",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddlq_u8",
        "intrinsic": "uint16x8_t vpaddlq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddlq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "UADDLP Vd.8H,Vn.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddl_u16",
        "intrinsic": "uint32x2_t vpaddl_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddl_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "UADDLP Vd.2S,Vn.4H",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddlq_u16",
        "intrinsic": "uint32x4_t vpaddlq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddlq_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "UADDLP Vd.4S,Vn.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddl_u32",
        "intrinsic": "uint64x1_t vpaddl_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddl_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "UADDLP Vd.1D,Vn.2S",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpaddlq_u32",
        "intrinsic": "uint64x2_t vpaddlq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddlq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "UADDLP Vd.2D,Vn.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadal_s8",
        "intrinsic": "int16x4_t vpadal_s8(int16x4_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadal_s8",
        "argument_preparation": "a -> Vd.4H; b -> Vn.8B",
        "aarch64_instruction": "SADALP Vd.4H,Vn.8B",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadalq_s8",
        "intrinsic": "int16x8_t vpadalq_s8(int16x8_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadalq_s8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.16B",
        "aarch64_instruction": "SADALP Vd.8H,Vn.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadal_s16",
        "intrinsic": "int32x2_t vpadal_s16(int32x2_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadal_s16",
        "argument_preparation": "a -> Vd.2S; b -> Vn.4H",
        "aarch64_instruction": "SADALP Vd.2S,Vn.4H",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadalq_s16",
        "intrinsic": "int32x4_t vpadalq_s16(int32x4_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadalq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H",
        "aarch64_instruction": "SADALP Vd.4S,Vn.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadal_s32",
        "intrinsic": "int64x1_t vpadal_s32(int64x1_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadal_s32",
        "argument_preparation": "a -> Vd.1D; b -> Vn.2S",
        "aarch64_instruction": "SADALP Vd.1D,Vn.2S",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadalq_s32",
        "intrinsic": "int64x2_t vpadalq_s32(int64x2_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadalq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S",
        "aarch64_instruction": "SADALP Vd.2D,Vn.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadal_u8",
        "intrinsic": "uint16x4_t vpadal_u8(uint16x4_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadal_u8",
        "argument_preparation": "a -> Vd.4H; b -> Vn.8B",
        "aarch64_instruction": "UADALP Vd.4H,Vn.8B",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadalq_u8",
        "intrinsic": "uint16x8_t vpadalq_u8(uint16x8_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadalq_u8",
        "argument_preparation": "a -> Vd.8H; b -> Vn.16B",
        "aarch64_instruction": "UADALP Vd.8H,Vn.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadal_u16",
        "intrinsic": "uint32x2_t vpadal_u16(uint32x2_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadal_u16",
        "argument_preparation": "a -> Vd.2S; b -> Vn.4H",
        "aarch64_instruction": "UADALP Vd.2S,Vn.4H",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadalq_u16",
        "intrinsic": "uint32x4_t vpadalq_u16(uint32x4_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadalq_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H",
        "aarch64_instruction": "UADALP Vd.4S,Vn.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadal_u32",
        "intrinsic": "uint64x1_t vpadal_u32(uint64x1_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadal_u32",
        "argument_preparation": "a -> Vd.1D; b -> Vn.2S",
        "aarch64_instruction": "UADALP Vd.1D,Vn.2S",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpadalq_u32",
        "intrinsic": "uint64x2_t vpadalq_u32(uint64x2_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadalq_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S",
        "aarch64_instruction": "UADALP Vd.2D,Vn.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmax_s8",
        "intrinsic": "int8x8_t vpmax_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmax_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SMAXP Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmax_s16",
        "intrinsic": "int16x4_t vpmax_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmax_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SMAXP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmax_s32",
        "intrinsic": "int32x2_t vpmax_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmax_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SMAXP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmax_u8",
        "intrinsic": "uint8x8_t vpmax_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmax_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UMAXP Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmax_u16",
        "intrinsic": "uint16x4_t vpmax_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmax_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UMAXP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmax_u32",
        "intrinsic": "uint32x2_t vpmax_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmax_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UMAXP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmax_f32",
        "intrinsic": "float32x2_t vpmax_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmax_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMAXP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmaxq_s8",
        "intrinsic": "int8x16_t vpmaxq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SMAXP Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxq_s16",
        "intrinsic": "int16x8_t vpmaxq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SMAXP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxq_s32",
        "intrinsic": "int32x4_t vpmaxq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SMAXP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxq_u8",
        "intrinsic": "uint8x16_t vpmaxq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UMAXP Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxq_u16",
        "intrinsic": "uint16x8_t vpmaxq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UMAXP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxq_u32",
        "intrinsic": "uint32x4_t vpmaxq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UMAXP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxq_f32",
        "intrinsic": "float32x4_t vpmaxq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMAXP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxq_f64",
        "intrinsic": "float64x2_t vpmaxq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMAXP Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxs_f32",
        "intrinsic": "float32_t vpmaxs_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxs_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FMAXP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxqd_f64",
        "intrinsic": "float64_t vpmaxqd_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxqd_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FMAXP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxnms_f32",
        "intrinsic": "float32_t vpmaxnms_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxnms_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FMAXNMP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxnmqd_f64",
        "intrinsic": "float64_t vpmaxnmqd_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxnmqd_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FMAXNMP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmin_s8",
        "intrinsic": "int8x8_t vpmin_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmin_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SMINP Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmin_s16",
        "intrinsic": "int16x4_t vpmin_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmin_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SMINP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmin_s32",
        "intrinsic": "int32x2_t vpmin_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmin_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SMINP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmin_u8",
        "intrinsic": "uint8x8_t vpmin_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmin_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UMINP Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmin_u16",
        "intrinsic": "uint16x4_t vpmin_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmin_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UMINP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmin_u32",
        "intrinsic": "uint32x2_t vpmin_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmin_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UMINP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpmin_f32",
        "intrinsic": "float32x2_t vpmin_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmin_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMINP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vpminq_s8",
        "intrinsic": "int8x16_t vpminq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SMINP Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminq_s16",
        "intrinsic": "int16x8_t vpminq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SMINP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminq_s32",
        "intrinsic": "int32x4_t vpminq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SMINP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminq_u8",
        "intrinsic": "uint8x16_t vpminq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UMINP Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminq_u16",
        "intrinsic": "uint16x8_t vpminq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UMINP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminq_u32",
        "intrinsic": "uint32x4_t vpminq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UMINP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminq_f32",
        "intrinsic": "float32x4_t vpminq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMINP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminq_f64",
        "intrinsic": "float64x2_t vpminq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMINP Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmins_f32",
        "intrinsic": "float32_t vpmins_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmins_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FMINP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxnm_f32",
        "intrinsic": "float32x2_t vpmaxnm_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxnm_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMAXNMP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxnmq_f32",
        "intrinsic": "float32x4_t vpmaxnmq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxnmq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMAXNMP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxnmq_f64",
        "intrinsic": "float64x2_t vpmaxnmq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxnmq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMAXNMP Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminnm_f32",
        "intrinsic": "float32x2_t vpminnm_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminnm_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FMINNMP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminnmq_f32",
        "intrinsic": "float32x4_t vpminnmq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminnmq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FMINNMP Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminnmq_f64",
        "intrinsic": "float64x2_t vpminnmq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminnmq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FMINNMP Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminqd_f64",
        "intrinsic": "float64_t vpminqd_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminqd_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FMINP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminnms_f32",
        "intrinsic": "float32_t vpminnms_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminnms_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FMINNMP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminnmqd_f64",
        "intrinsic": "float64_t vpminnmqd_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminnmqd_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FMINNMP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddv_s8",
        "intrinsic": "int8_t vaddv_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddv_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "ADDV Bd,Vn.8B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_s8",
        "intrinsic": "int8_t vaddvq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "ADDV Bd,Vn.16B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddv_s16",
        "intrinsic": "int16_t vaddv_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddv_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "ADDV Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_s16",
        "intrinsic": "int16_t vaddvq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "ADDV Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddv_s32",
        "intrinsic": "int32_t vaddv_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddv_s32",
        "argument_preparation": "a -> Vn.2S; a -> Vm.2S",
        "aarch64_instruction": "ADDP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.S[0] -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_s32",
        "intrinsic": "int32_t vaddvq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "ADDV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_s64",
        "intrinsic": "int64_t vaddvq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "ADDP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddv_u8",
        "intrinsic": "uint8_t vaddv_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddv_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "ADDV Bd,Vn.8B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_u8",
        "intrinsic": "uint8_t vaddvq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "ADDV Bd,Vn.16B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddv_u16",
        "intrinsic": "uint16_t vaddv_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddv_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "ADDV Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_u16",
        "intrinsic": "uint16_t vaddvq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "ADDV Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddv_u32",
        "intrinsic": "uint32_t vaddv_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddv_u32",
        "argument_preparation": "a -> Vn.2S; a -> Vm.2S",
        "aarch64_instruction": "ADDP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.S[0] -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_u32",
        "intrinsic": "uint32_t vaddvq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "ADDV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_u64",
        "intrinsic": "uint64_t vaddvq_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_u64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "ADDP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddv_f32",
        "intrinsic": "float32_t vaddv_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddv_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FADDP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_f32",
        "intrinsic": "float32_t vaddvq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_f32",
        "argument_preparation": "a -> Vn.4S; a -> Vm.4S",
        "aarch64_instruction": "FADDP Vt.4S,Vn.4S,Vm.4S; FADDP Sd,Vt.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddvq_f64",
        "intrinsic": "float64_t vaddvq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddvq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FADDP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlv_s8",
        "intrinsic": "int16_t vaddlv_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlv_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "SADDLV Hd,Vn.8B",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlvq_s8",
        "intrinsic": "int16_t vaddlvq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlvq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "SADDLV Hd,Vn.16B",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlv_s16",
        "intrinsic": "int32_t vaddlv_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlv_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "SADDLV Sd,Vn.4H",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlvq_s16",
        "intrinsic": "int32_t vaddlvq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlvq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SADDLV Sd,Vn.8H",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlv_s32",
        "intrinsic": "int64_t vaddlv_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlv_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "SADDLP Vd.1D,Vn.2S",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlvq_s32",
        "intrinsic": "int64_t vaddlvq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlvq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SADDLV Dd,Vn.4S",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlv_u8",
        "intrinsic": "uint16_t vaddlv_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlv_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "UADDLV Hd,Vn.8B",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlvq_u8",
        "intrinsic": "uint16_t vaddlvq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlvq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "UADDLV Hd,Vn.16B",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlv_u16",
        "intrinsic": "uint32_t vaddlv_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlv_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "UADDLV Sd,Vn.4H",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlvq_u16",
        "intrinsic": "uint32_t vaddlvq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlvq_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "UADDLV Sd,Vn.8H",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlv_u32",
        "intrinsic": "uint64_t vaddlv_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlv_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "UADDLP Vd.1D,Vn.2S",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vaddlvq_u32",
        "intrinsic": "uint64_t vaddlvq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddlvq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "UADDLV Dd,Vn.4S",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxv_s8",
        "intrinsic": "int8_t vmaxv_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxv_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "SMAXV Bd,Vn.8B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_s8",
        "intrinsic": "int8_t vmaxvq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "SMAXV Bd,Vn.16B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxv_s16",
        "intrinsic": "int16_t vmaxv_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxv_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "SMAXV Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_s16",
        "intrinsic": "int16_t vmaxvq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SMAXV Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxv_s32",
        "intrinsic": "int32_t vmaxv_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxv_s32",
        "argument_preparation": "a -> Vn.2S; a -> Vm.2S",
        "aarch64_instruction": "SMAXP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.S[0] -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_s32",
        "intrinsic": "int32_t vmaxvq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SMAXV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxv_u8",
        "intrinsic": "uint8_t vmaxv_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxv_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "UMAXV Bd,Vn.8B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_u8",
        "intrinsic": "uint8_t vmaxvq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "UMAXV Bd,Vn.16B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxv_u16",
        "intrinsic": "uint16_t vmaxv_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxv_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "UMAXV Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_u16",
        "intrinsic": "uint16_t vmaxvq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "UMAXV Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxv_u32",
        "intrinsic": "uint32_t vmaxv_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxv_u32",
        "argument_preparation": "a -> Vn.2S; a -> Vm.2S",
        "aarch64_instruction": "UMAXP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.S[0] -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_u32",
        "intrinsic": "uint32_t vmaxvq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "UMAXV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxv_f32",
        "intrinsic": "float32_t vmaxv_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxv_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FMAXP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_f32",
        "intrinsic": "float32_t vmaxvq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FMAXV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_f64",
        "intrinsic": "float64_t vmaxvq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FMAXP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminv_s8",
        "intrinsic": "int8_t vminv_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminv_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "SMINV Bd,Vn.8B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_s8",
        "intrinsic": "int8_t vminvq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "SMINV Bd,Vn.16B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminv_s16",
        "intrinsic": "int16_t vminv_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminv_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "SMINV Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_s16",
        "intrinsic": "int16_t vminvq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SMINV Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminv_s32",
        "intrinsic": "int32_t vminv_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminv_s32",
        "argument_preparation": "a -> Vn.2S; a -> Vm.2S",
        "aarch64_instruction": "SMINP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.S[0] -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_s32",
        "intrinsic": "int32_t vminvq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SMINV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminv_u8",
        "intrinsic": "uint8_t vminv_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminv_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "UMINV Bd,Vn.8B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_u8",
        "intrinsic": "uint8_t vminvq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "UMINV Bd,Vn.16B",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminv_u16",
        "intrinsic": "uint16_t vminv_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminv_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "UMINV Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_u16",
        "intrinsic": "uint16_t vminvq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "UMINV Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminv_u32",
        "intrinsic": "uint32_t vminv_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminv_u32",
        "argument_preparation": "a -> Vn.2S; a -> Vm.2S",
        "aarch64_instruction": "UMINP Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.S[0] -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_u32",
        "intrinsic": "uint32_t vminvq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "UMINV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminv_f32",
        "intrinsic": "float32_t vminv_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminv_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FMINP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_f32",
        "intrinsic": "float32_t vminvq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FMINV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_f64",
        "intrinsic": "float64_t vminvq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FMINP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxnmv_f32",
        "intrinsic": "float32_t vmaxnmv_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmv_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FMAXNMP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxnmvq_f32",
        "intrinsic": "float32_t vmaxnmvq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmvq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FMAXNMV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxnmvq_f64",
        "intrinsic": "float64_t vmaxnmvq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmvq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FMAXNMP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminnmv_f32",
        "intrinsic": "float32_t vminnmv_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmv_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FMINNMP Sd,Vn.2S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminnmvq_f32",
        "intrinsic": "float32_t vminnmvq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmvq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FMINNMV Sd,Vn.4S",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminnmvq_f64",
        "intrinsic": "float64_t vminnmvq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmvq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FMINNMP Dd,Vn.2D",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      }
    ],
    "Compare": [
      {
        "name": "vceq_s8",
        "intrinsic": "uint8x8_t vceq_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMEQ Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceqq_s8",
        "intrinsic": "uint8x16_t vceqq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMEQ Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceq_s16",
        "intrinsic": "uint16x4_t vceq_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMEQ Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceqq_s16",
        "intrinsic": "uint16x8_t vceqq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMEQ Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceq_s32",
        "intrinsic": "uint32x2_t vceq_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMEQ Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceqq_s32",
        "intrinsic": "uint32x4_t vceqq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMEQ Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceq_u8",
        "intrinsic": "uint8x8_t vceq_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMEQ Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceqq_u8",
        "intrinsic": "uint8x16_t vceqq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMEQ Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceq_u16",
        "intrinsic": "uint16x4_t vceq_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMEQ Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceqq_u16",
        "intrinsic": "uint16x8_t vceqq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMEQ Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceq_u32",
        "intrinsic": "uint32x2_t vceq_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMEQ Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceqq_u32",
        "intrinsic": "uint32x4_t vceqq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMEQ Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceq_f32",
        "intrinsic": "uint32x2_t vceq_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMEQ Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceqq_f32",
        "intrinsic": "uint32x4_t vceqq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMEQ Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceq_p8",
        "intrinsic": "uint8x8_t vceq_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMEQ Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceqq_p8",
        "intrinsic": "uint8x16_t vceqq_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMEQ Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vceq_s64",
        "intrinsic": "uint64x1_t vceq_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMEQ Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqq_s64",
        "intrinsic": "uint64x2_t vceqq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMEQ Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceq_u64",
        "intrinsic": "uint64x1_t vceq_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMEQ Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqq_u64",
        "intrinsic": "uint64x2_t vceqq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMEQ Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceq_p64",
        "intrinsic": "uint64x1_t vceq_p64(poly64x1_t a, poly64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_p64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMEQ Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vceqq_p64",
        "intrinsic": "uint64x2_t vceqq_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMEQ Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vceq_f64",
        "intrinsic": "uint64x1_t vceq_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMEQ Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqq_f64",
        "intrinsic": "uint64x2_t vceqq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMEQ Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqd_s64",
        "intrinsic": "uint64_t vceqd_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMEQ Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqd_u64",
        "intrinsic": "uint64_t vceqd_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMEQ Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqs_f32",
        "intrinsic": "uint32_t vceqs_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqs_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FCMEQ Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqd_f64",
        "intrinsic": "uint64_t vceqd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMEQ Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_s8",
        "intrinsic": "uint8x8_t vceqz_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CMEQ Vd.8B,Vn.8B,#0",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_s8",
        "intrinsic": "uint8x16_t vceqzq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CMEQ Vd.16B,Vn.16B,#0",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_s16",
        "intrinsic": "uint16x4_t vceqz_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CMEQ Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_s16",
        "intrinsic": "uint16x8_t vceqzq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CMEQ Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_s32",
        "intrinsic": "uint32x2_t vceqz_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CMEQ Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_s32",
        "intrinsic": "uint32x4_t vceqzq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CMEQ Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_u8",
        "intrinsic": "uint8x8_t vceqz_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CMEQ Vd.8B,Vn.8B,#0",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_u8",
        "intrinsic": "uint8x16_t vceqzq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CMEQ Vd.16B,Vn.16B,#0",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_u16",
        "intrinsic": "uint16x4_t vceqz_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CMEQ Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_u16",
        "intrinsic": "uint16x8_t vceqzq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CMEQ Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_u32",
        "intrinsic": "uint32x2_t vceqz_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CMEQ Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_u32",
        "intrinsic": "uint32x4_t vceqzq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CMEQ Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_f32",
        "intrinsic": "uint32x2_t vceqz_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCMEQ Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_f32",
        "intrinsic": "uint32x4_t vceqzq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCMEQ Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_p8",
        "intrinsic": "uint8x8_t vceqz_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_p8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CMEQ Vd.8B,Vn.8B,#0",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_p8",
        "intrinsic": "uint8x16_t vceqzq_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_p8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CMEQ Vd.16B,Vn.16B,#0",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_s64",
        "intrinsic": "uint64x1_t vceqz_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMEQ Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_s64",
        "intrinsic": "uint64x2_t vceqzq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "CMEQ Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_u64",
        "intrinsic": "uint64x1_t vceqz_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_u64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMEQ Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_u64",
        "intrinsic": "uint64x2_t vceqzq_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_u64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "CMEQ Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqz_p64",
        "intrinsic": "uint64x1_t vceqz_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_p64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMEQ Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vceqzq_p64",
        "intrinsic": "uint64x2_t vceqzq_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_p64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "CMEQ Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vceqz_f64",
        "intrinsic": "uint64x1_t vceqz_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMEQ Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzq_f64",
        "intrinsic": "uint64x2_t vceqzq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCMEQ Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzd_s64",
        "intrinsic": "uint64_t vceqzd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMEQ Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzd_u64",
        "intrinsic": "uint64_t vceqzd_u64(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzd_u64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMEQ Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzs_f32",
        "intrinsic": "uint32_t vceqzs_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzs_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCMEQ Sd,Sn,#0",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqzd_f64",
        "intrinsic": "uint64_t vceqzd_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzd_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMEQ Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcge_s8",
        "intrinsic": "uint8x8_t vcge_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMGE Vd.8B,Vm.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgeq_s8",
        "intrinsic": "uint8x16_t vcgeq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMGE Vd.16B,Vm.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcge_s16",
        "intrinsic": "uint16x4_t vcge_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMGE Vd.4H,Vm.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgeq_s16",
        "intrinsic": "uint16x8_t vcgeq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMGE Vd.8H,Vm.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcge_s32",
        "intrinsic": "uint32x2_t vcge_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMGE Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgeq_s32",
        "intrinsic": "uint32x4_t vcgeq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMGE Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcge_u8",
        "intrinsic": "uint8x8_t vcge_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMHS Vd.8B,Vm.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgeq_u8",
        "intrinsic": "uint8x16_t vcgeq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMHS Vd.16B,Vm.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcge_u16",
        "intrinsic": "uint16x4_t vcge_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMHS Vd.4H,Vm.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgeq_u16",
        "intrinsic": "uint16x8_t vcgeq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMHS Vd.8H,Vm.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcge_u32",
        "intrinsic": "uint32x2_t vcge_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMHS Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgeq_u32",
        "intrinsic": "uint32x4_t vcgeq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMHS Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcge_f32",
        "intrinsic": "uint32x2_t vcge_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMGE Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgeq_f32",
        "intrinsic": "uint32x4_t vcgeq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMGE Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcge_s64",
        "intrinsic": "uint64x1_t vcge_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMGE Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgeq_s64",
        "intrinsic": "uint64x2_t vcgeq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMGE Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcge_u64",
        "intrinsic": "uint64x1_t vcge_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMHS Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgeq_u64",
        "intrinsic": "uint64x2_t vcgeq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMHS Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcge_f64",
        "intrinsic": "uint64x1_t vcge_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMGE Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgeq_f64",
        "intrinsic": "uint64x2_t vcgeq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMGE Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcged_s64",
        "intrinsic": "uint64_t vcged_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcged_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMGE Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcged_u64",
        "intrinsic": "uint64_t vcged_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcged_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMHS Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcges_f32",
        "intrinsic": "uint32_t vcges_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcges_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FCMGE Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcged_f64",
        "intrinsic": "uint64_t vcged_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcged_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMGE Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgez_s8",
        "intrinsic": "uint8x8_t vcgez_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgez_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CMGE Vd.8B,Vn.8B,#0",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezq_s8",
        "intrinsic": "uint8x16_t vcgezq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CMGE Vd.16B,Vn.16B,#0",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgez_s16",
        "intrinsic": "uint16x4_t vcgez_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgez_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CMGE Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezq_s16",
        "intrinsic": "uint16x8_t vcgezq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CMGE Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgez_s32",
        "intrinsic": "uint32x2_t vcgez_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgez_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CMGE Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezq_s32",
        "intrinsic": "uint32x4_t vcgezq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CMGE Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgez_s64",
        "intrinsic": "uint64x1_t vcgez_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgez_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMGE Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezq_s64",
        "intrinsic": "uint64x2_t vcgezq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "CMGE Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgez_f32",
        "intrinsic": "uint32x2_t vcgez_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgez_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCMGE Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezq_f32",
        "intrinsic": "uint32x4_t vcgezq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCMGE Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgez_f64",
        "intrinsic": "uint64x1_t vcgez_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgez_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMGE Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezq_f64",
        "intrinsic": "uint64x2_t vcgezq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCMGE Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezd_s64",
        "intrinsic": "uint64_t vcgezd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMGE Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezs_f32",
        "intrinsic": "uint32_t vcgezs_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezs_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCMGE Sd,Sn,#0",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezd_f64",
        "intrinsic": "uint64_t vcgezd_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezd_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMGE Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcle_s8",
        "intrinsic": "uint8x8_t vcle_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMGE Vd.8B,Vm.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcleq_s8",
        "intrinsic": "uint8x16_t vcleq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMGE Vd.16B,Vm.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcle_s16",
        "intrinsic": "uint16x4_t vcle_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMGE Vd.4H,Vm.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcleq_s16",
        "intrinsic": "uint16x8_t vcleq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMGE Vd.8H,Vm.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcle_s32",
        "intrinsic": "uint32x2_t vcle_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMGE Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcleq_s32",
        "intrinsic": "uint32x4_t vcleq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMGE Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcle_u8",
        "intrinsic": "uint8x8_t vcle_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMHS Vd.8B,Vm.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcleq_u8",
        "intrinsic": "uint8x16_t vcleq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMHS Vd.16B,Vm.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcle_u16",
        "intrinsic": "uint16x4_t vcle_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMHS Vd.4H,Vm.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcleq_u16",
        "intrinsic": "uint16x8_t vcleq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMHS Vd.8H,Vm.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcle_u32",
        "intrinsic": "uint32x2_t vcle_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMHS Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcleq_u32",
        "intrinsic": "uint32x4_t vcleq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMHS Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcle_f32",
        "intrinsic": "uint32x2_t vcle_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMGE Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcleq_f32",
        "intrinsic": "uint32x4_t vcleq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMGE Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcle_s64",
        "intrinsic": "uint64x1_t vcle_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMGE Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcleq_s64",
        "intrinsic": "uint64x2_t vcleq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMGE Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcle_u64",
        "intrinsic": "uint64x1_t vcle_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMHS Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcleq_u64",
        "intrinsic": "uint64x2_t vcleq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMHS Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcle_f64",
        "intrinsic": "uint64x1_t vcle_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMGE Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcleq_f64",
        "intrinsic": "uint64x2_t vcleq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMGE Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcled_s64",
        "intrinsic": "uint64_t vcled_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcled_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMGE Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcled_u64",
        "intrinsic": "uint64_t vcled_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcled_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMHS Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcles_f32",
        "intrinsic": "uint32_t vcles_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcles_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FCMGE Sd,Sm,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcled_f64",
        "intrinsic": "uint64_t vcled_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcled_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMGE Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclez_s8",
        "intrinsic": "uint8x8_t vclez_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclez_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CMLE Vd.8B,Vn.8B,#0",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezq_s8",
        "intrinsic": "uint8x16_t vclezq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CMLE Vd.16B,Vn.16B,#0",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclez_s16",
        "intrinsic": "uint16x4_t vclez_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclez_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CMLE Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezq_s16",
        "intrinsic": "uint16x8_t vclezq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CMLE Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclez_s32",
        "intrinsic": "uint32x2_t vclez_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclez_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CMLE Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezq_s32",
        "intrinsic": "uint32x4_t vclezq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CMLE Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclez_s64",
        "intrinsic": "uint64x1_t vclez_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclez_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMLE Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezq_s64",
        "intrinsic": "uint64x2_t vclezq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "CMLE Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclez_f32",
        "intrinsic": "uint32x2_t vclez_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclez_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CMLE Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezq_f32",
        "intrinsic": "uint32x4_t vclezq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCMLE Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclez_f64",
        "intrinsic": "uint64x1_t vclez_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclez_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMLE Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezq_f64",
        "intrinsic": "uint64x2_t vclezq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCMLE Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezd_s64",
        "intrinsic": "uint64_t vclezd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMLE Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezs_f32",
        "intrinsic": "uint32_t vclezs_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezs_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCMLE Sd,Sn,#0",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezd_f64",
        "intrinsic": "uint64_t vclezd_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezd_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMLE Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgt_s8",
        "intrinsic": "uint8x8_t vcgt_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMGT Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgtq_s8",
        "intrinsic": "uint8x16_t vcgtq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMGT Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgt_s16",
        "intrinsic": "uint16x4_t vcgt_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMGT Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgtq_s16",
        "intrinsic": "uint16x8_t vcgtq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMGT Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgt_s32",
        "intrinsic": "uint32x2_t vcgt_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMGT Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgtq_s32",
        "intrinsic": "uint32x4_t vcgtq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMGT Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgt_u8",
        "intrinsic": "uint8x8_t vcgt_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMHI Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgtq_u8",
        "intrinsic": "uint8x16_t vcgtq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMHI Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgt_u16",
        "intrinsic": "uint16x4_t vcgt_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMHI Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgtq_u16",
        "intrinsic": "uint16x8_t vcgtq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMHI Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgt_u32",
        "intrinsic": "uint32x2_t vcgt_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMHI Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgtq_u32",
        "intrinsic": "uint32x4_t vcgtq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMHI Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgt_f32",
        "intrinsic": "uint32x2_t vcgt_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMGT Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgtq_f32",
        "intrinsic": "uint32x4_t vcgtq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMGT Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcgt_s64",
        "intrinsic": "uint64x1_t vcgt_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMGT Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtq_s64",
        "intrinsic": "uint64x2_t vcgtq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMGT Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgt_u64",
        "intrinsic": "uint64x1_t vcgt_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMHI Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtq_u64",
        "intrinsic": "uint64x2_t vcgtq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMHI Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgt_f64",
        "intrinsic": "uint64x1_t vcgt_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMGT Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtq_f64",
        "intrinsic": "uint64x2_t vcgtq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMGT Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtd_s64",
        "intrinsic": "uint64_t vcgtd_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMGT Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtd_u64",
        "intrinsic": "uint64_t vcgtd_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMHI Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgts_f32",
        "intrinsic": "uint32_t vcgts_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgts_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FCMGT Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtd_f64",
        "intrinsic": "uint64_t vcgtd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMGT Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtz_s8",
        "intrinsic": "uint8x8_t vcgtz_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtz_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CMGT Vd.8B,Vn.8B,#0",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzq_s8",
        "intrinsic": "uint8x16_t vcgtzq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CMGT Vd.16B,Vn.16B,#0",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtz_s16",
        "intrinsic": "uint16x4_t vcgtz_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtz_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CMGT Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzq_s16",
        "intrinsic": "uint16x8_t vcgtzq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CMGT Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtz_s32",
        "intrinsic": "uint32x2_t vcgtz_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtz_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CMGT Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzq_s32",
        "intrinsic": "uint32x4_t vcgtzq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CMGT Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtz_s64",
        "intrinsic": "uint64x1_t vcgtz_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtz_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMGT Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzq_s64",
        "intrinsic": "uint64x2_t vcgtzq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "CMGT Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtz_f32",
        "intrinsic": "uint32x2_t vcgtz_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtz_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCMGT Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzq_f32",
        "intrinsic": "uint32x4_t vcgtzq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCMGT Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtz_f64",
        "intrinsic": "uint64x1_t vcgtz_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtz_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMGT Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzq_f64",
        "intrinsic": "uint64x2_t vcgtzq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCMGT Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzd_s64",
        "intrinsic": "uint64_t vcgtzd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMGT Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzs_f32",
        "intrinsic": "uint32_t vcgtzs_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzs_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCMGT Sd,Sn,#0",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzd_f64",
        "intrinsic": "uint64_t vcgtzd_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzd_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMGT Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclt_s8",
        "intrinsic": "uint8x8_t vclt_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMGT Vd.8B,Vm.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcltq_s8",
        "intrinsic": "uint8x16_t vcltq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMGT Vd.16B,Vm.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclt_s16",
        "intrinsic": "uint16x4_t vclt_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMGT Vd.4H,Vm.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcltq_s16",
        "intrinsic": "uint16x8_t vcltq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMGT Vd.8H,Vm.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclt_s32",
        "intrinsic": "uint32x2_t vclt_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMGT Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcltq_s32",
        "intrinsic": "uint32x4_t vcltq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMGT Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclt_u8",
        "intrinsic": "uint8x8_t vclt_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMHI Vd.8B,Vm.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcltq_u8",
        "intrinsic": "uint8x16_t vcltq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMHI Vd.16B,Vm.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclt_u16",
        "intrinsic": "uint16x4_t vclt_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMHI Vd.4H,Vm.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcltq_u16",
        "intrinsic": "uint16x8_t vcltq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMHI Vd.8H,Vm.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclt_u32",
        "intrinsic": "uint32x2_t vclt_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMHI Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcltq_u32",
        "intrinsic": "uint32x4_t vcltq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMHI Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclt_f32",
        "intrinsic": "uint32x2_t vclt_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMGT Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcltq_f32",
        "intrinsic": "uint32x4_t vcltq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMGT Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclt_s64",
        "intrinsic": "uint64x1_t vclt_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMGT Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltq_s64",
        "intrinsic": "uint64x2_t vcltq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMGT Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclt_u64",
        "intrinsic": "uint64x1_t vclt_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMHI Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltq_u64",
        "intrinsic": "uint64x2_t vcltq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMHI Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclt_f64",
        "intrinsic": "uint64x1_t vclt_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMGT Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltq_f64",
        "intrinsic": "uint64x2_t vcltq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMGT Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltd_s64",
        "intrinsic": "uint64_t vcltd_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMGT Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltd_u64",
        "intrinsic": "uint64_t vcltd_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMHI Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclts_f32",
        "intrinsic": "uint32_t vclts_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclts_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FCMGT Sd,Sm,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltd_f64",
        "intrinsic": "uint64_t vcltd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FCMGT Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltz_s8",
        "intrinsic": "uint8x8_t vcltz_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltz_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CMLT Vd.8B,Vn.8B,#0",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzq_s8",
        "intrinsic": "uint8x16_t vcltzq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CMLT Vd.16B,Vn.16B,#0",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltz_s16",
        "intrinsic": "uint16x4_t vcltz_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltz_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CMLT Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzq_s16",
        "intrinsic": "uint16x8_t vcltzq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CMLT Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltz_s32",
        "intrinsic": "uint32x2_t vcltz_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltz_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CMLT Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzq_s32",
        "intrinsic": "uint32x4_t vcltzq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CMLT Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltz_s64",
        "intrinsic": "uint64x1_t vcltz_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltz_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMLT Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzq_s64",
        "intrinsic": "uint64x2_t vcltzq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "CMLT Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltz_f32",
        "intrinsic": "uint32x2_t vcltz_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltz_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCMLT Vd.2S,Vn.2S,#0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzq_f32",
        "intrinsic": "uint32x4_t vcltzq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCMLT Vd.4S,Vn.4S,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltz_f64",
        "intrinsic": "uint64x1_t vcltz_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltz_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMLT Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzq_f64",
        "intrinsic": "uint64x2_t vcltzq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCMLT Vd.2D,Vn.2D,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzd_s64",
        "intrinsic": "uint64_t vcltzd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "CMLT Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzs_f32",
        "intrinsic": "uint32_t vcltzs_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzs_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCMLT Sd,Sn,#0",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzd_f64",
        "intrinsic": "uint64_t vcltzd_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzd_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCMLT Dd,Dn,#0",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcage_f32",
        "intrinsic": "uint32x2_t vcage_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcage_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FACGE Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcageq_f32",
        "intrinsic": "uint32x4_t vcageq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcageq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FACGE Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcage_f64",
        "intrinsic": "uint64x1_t vcage_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcage_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FACGE Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcageq_f64",
        "intrinsic": "uint64x2_t vcageq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcageq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FACGE Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcages_f32",
        "intrinsic": "uint32_t vcages_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcages_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FACGE Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcaged_f64",
        "intrinsic": "uint64_t vcaged_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaged_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FACGE Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcale_f32",
        "intrinsic": "uint32x2_t vcale_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcale_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FACGE Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcaleq_f32",
        "intrinsic": "uint32x4_t vcaleq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaleq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FACGE Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcale_f64",
        "intrinsic": "uint64x1_t vcale_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcale_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FACGE Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcaleq_f64",
        "intrinsic": "uint64x2_t vcaleq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaleq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FACGE Vd.2D,Vm.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcales_f32",
        "intrinsic": "uint32_t vcales_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcales_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FACGE Sd,Sm,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcaled_f64",
        "intrinsic": "uint64_t vcaled_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaled_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FACGE Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcagt_f32",
        "intrinsic": "uint32x2_t vcagt_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagt_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FACGT Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcagtq_f32",
        "intrinsic": "uint32x4_t vcagtq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagtq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FACGT Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcagt_f64",
        "intrinsic": "uint64x1_t vcagt_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagt_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FACGT Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcagtq_f64",
        "intrinsic": "uint64x2_t vcagtq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagtq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FACGT Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcagts_f32",
        "intrinsic": "uint32_t vcagts_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagts_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FACGT Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcagtd_f64",
        "intrinsic": "uint64_t vcagtd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagtd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FACGT Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcalt_f32",
        "intrinsic": "uint32x2_t vcalt_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcalt_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FACGT Vd.2S,Vm.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcaltq_f32",
        "intrinsic": "uint32x4_t vcaltq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaltq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FACGT Vd.4S,Vm.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcalt_f64",
        "intrinsic": "uint64x1_t vcalt_f64(float64x1_t a, float64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcalt_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FACGT Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcaltq_f64",
        "intrinsic": "uint64x2_t vcaltq_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaltq_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FACGT Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcalts_f32",
        "intrinsic": "uint32_t vcalts_f32(float32_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcalts_f32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "FACGT Sd,Sm,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcaltd_f64",
        "intrinsic": "uint64_t vcaltd_f64(float64_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaltd_f64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "FACGT Dd,Dm,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtst_s8",
        "intrinsic": "uint8x8_t vtst_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMTST Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtstq_s8",
        "intrinsic": "uint8x16_t vtstq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMTST Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtst_s16",
        "intrinsic": "uint16x4_t vtst_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMTST Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtstq_s16",
        "intrinsic": "uint16x8_t vtstq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMTST Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtst_s32",
        "intrinsic": "uint32x2_t vtst_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMTST Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtstq_s32",
        "intrinsic": "uint32x4_t vtstq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMTST Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtst_u8",
        "intrinsic": "uint8x8_t vtst_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMTST Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtstq_u8",
        "intrinsic": "uint8x16_t vtstq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMTST Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtst_u16",
        "intrinsic": "uint16x4_t vtst_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "CMTST Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtstq_u16",
        "intrinsic": "uint16x8_t vtstq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "CMTST Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtst_u32",
        "intrinsic": "uint32x2_t vtst_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "CMTST Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtstq_u32",
        "intrinsic": "uint32x4_t vtstq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "CMTST Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtst_p8",
        "intrinsic": "uint8x8_t vtst_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "CMTST Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtstq_p8",
        "intrinsic": "uint8x16_t vtstq_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "CMTST Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtst_s64",
        "intrinsic": "uint64x1_t vtst_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMTST Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtstq_s64",
        "intrinsic": "uint64x2_t vtstq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMTST Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtst_u64",
        "intrinsic": "uint64x1_t vtst_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMTST Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtstq_u64",
        "intrinsic": "uint64x2_t vtstq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMTST Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtst_p64",
        "intrinsic": "uint64x1_t vtst_p64(poly64x1_t a, poly64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtst_p64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMTST Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vtstq_p64",
        "intrinsic": "uint64x2_t vtstq_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstq_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "CMTST Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vtstd_s64",
        "intrinsic": "uint64_t vtstd_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstd_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMTST Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtstd_u64",
        "intrinsic": "uint64_t vtstd_u64(uint64_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtstd_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "CMTST Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      }
    ],
    "Shift": [
      {
        "name": "vshl_s8",
        "intrinsic": "int8x8_t vshl_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SSHL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_s8",
        "intrinsic": "int8x16_t vshlq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SSHL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_s16",
        "intrinsic": "int16x4_t vshl_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SSHL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_s16",
        "intrinsic": "int16x8_t vshlq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SSHL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_s32",
        "intrinsic": "int32x2_t vshl_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SSHL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_s32",
        "intrinsic": "int32x4_t vshlq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SSHL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_s64",
        "intrinsic": "int64x1_t vshl_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_s64",
        "intrinsic": "int64x2_t vshlq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SSHL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_u8",
        "intrinsic": "uint8x8_t vshl_u8(uint8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "USHL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_u8",
        "intrinsic": "uint8x16_t vshlq_u8(uint8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "USHL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_u16",
        "intrinsic": "uint16x4_t vshl_u16(uint16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "USHL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_u16",
        "intrinsic": "uint16x8_t vshlq_u16(uint16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "USHL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_u32",
        "intrinsic": "uint32x2_t vshl_u32(uint32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "USHL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_u32",
        "intrinsic": "uint32x4_t vshlq_u32(uint32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "USHL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_u64",
        "intrinsic": "uint64x1_t vshl_u64(uint64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "USHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_u64",
        "intrinsic": "uint64x2_t vshlq_u64(uint64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "USHL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshld_s64",
        "intrinsic": "int64_t vshld_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshld_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshld_u64",
        "intrinsic": "uint64_t vshld_u64(uint64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshld_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "USHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshl_n_s8",
        "intrinsic": "int8x8_t vshl_n_s8(int8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_n_s8",
        "argument_preparation": "a -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "SHL Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_n_s8",
        "intrinsic": "int8x16_t vshlq_n_s8(int8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_n_s8",
        "argument_preparation": "a -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "SHL Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_n_s16",
        "intrinsic": "int16x4_t vshl_n_s16(int16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_n_s16",
        "argument_preparation": "a -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "SHL Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_n_s16",
        "intrinsic": "int16x8_t vshlq_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_n_s16",
        "argument_preparation": "a -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "SHL Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_n_s32",
        "intrinsic": "int32x2_t vshl_n_s32(int32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_n_s32",
        "argument_preparation": "a -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "SHL Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_n_s32",
        "intrinsic": "int32x4_t vshlq_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_n_s32",
        "argument_preparation": "a -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "SHL Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_n_s64",
        "intrinsic": "int64x1_t vshl_n_s64(int64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_n_s64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SHL Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_n_s64",
        "intrinsic": "int64x2_t vshlq_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_n_s64",
        "argument_preparation": "a -> Vn.2D; 0 <= n <= 63",
        "aarch64_instruction": "SHL Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_n_u8",
        "intrinsic": "uint8x8_t vshl_n_u8(uint8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_n_u8",
        "argument_preparation": "a -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "SHL Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_n_u8",
        "intrinsic": "uint8x16_t vshlq_n_u8(uint8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_n_u8",
        "argument_preparation": "a -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "SHL Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_n_u16",
        "intrinsic": "uint16x4_t vshl_n_u16(uint16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_n_u16",
        "argument_preparation": "a -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "SHL Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_n_u16",
        "intrinsic": "uint16x8_t vshlq_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_n_u16",
        "argument_preparation": "a -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "SHL Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_n_u32",
        "intrinsic": "uint32x2_t vshl_n_u32(uint32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_n_u32",
        "argument_preparation": "a -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "SHL Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_n_u32",
        "intrinsic": "uint32x4_t vshlq_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_n_u32",
        "argument_preparation": "a -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "SHL Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshl_n_u64",
        "intrinsic": "uint64x1_t vshl_n_u64(uint64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshl_n_u64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SHL Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshlq_n_u64",
        "intrinsic": "uint64x2_t vshlq_n_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshlq_n_u64",
        "argument_preparation": "a -> Vn.2D; 0 <= n <= 63",
        "aarch64_instruction": "SHL Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshld_n_s64",
        "intrinsic": "int64_t vshld_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshld_n_s64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SHL Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshld_n_u64",
        "intrinsic": "uint64_t vshld_n_u64(uint64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshld_n_u64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SHL Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshl_s8",
        "intrinsic": "int8x8_t vqshl_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SQSHL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_s8",
        "intrinsic": "int8x16_t vqshlq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SQSHL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_s16",
        "intrinsic": "int16x4_t vqshl_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SQSHL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_s16",
        "intrinsic": "int16x8_t vqshlq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SQSHL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_s32",
        "intrinsic": "int32x2_t vqshl_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SQSHL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_s32",
        "intrinsic": "int32x4_t vqshlq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SQSHL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_s64",
        "intrinsic": "int64x1_t vqshl_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SQSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_s64",
        "intrinsic": "int64x2_t vqshlq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SQSHL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_u8",
        "intrinsic": "uint8x8_t vqshl_u8(uint8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UQSHL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_u8",
        "intrinsic": "uint8x16_t vqshlq_u8(uint8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UQSHL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_u16",
        "intrinsic": "uint16x4_t vqshl_u16(uint16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UQSHL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_u16",
        "intrinsic": "uint16x8_t vqshlq_u16(uint16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UQSHL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_u32",
        "intrinsic": "uint32x2_t vqshl_u32(uint32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UQSHL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_u32",
        "intrinsic": "uint32x4_t vqshlq_u32(uint32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UQSHL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_u64",
        "intrinsic": "uint64x1_t vqshl_u64(uint64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "UQSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_u64",
        "intrinsic": "uint64x2_t vqshlq_u64(uint64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UQSHL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlb_s8",
        "intrinsic": "int8_t vqshlb_s8(int8_t a, int8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlb_s8",
        "argument_preparation": "a -> Bn; b -> Bm",
        "aarch64_instruction": "SQSHL Bd,Bn,Bm",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlh_s16",
        "intrinsic": "int16_t vqshlh_s16(int16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlh_s16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "SQSHL Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshls_s32",
        "intrinsic": "int32_t vqshls_s32(int32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshls_s32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "SQSHL Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshld_s64",
        "intrinsic": "int64_t vqshld_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshld_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SQSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlb_u8",
        "intrinsic": "uint8_t vqshlb_u8(uint8_t a, int8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlb_u8",
        "argument_preparation": "a -> Bn; b -> Bm",
        "aarch64_instruction": "UQSHL Bd,Bn,Bm",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlh_u16",
        "intrinsic": "uint16_t vqshlh_u16(uint16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlh_u16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "UQSHL Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshls_u32",
        "intrinsic": "uint32_t vqshls_u32(uint32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshls_u32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "UQSHL Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshld_u64",
        "intrinsic": "uint64_t vqshld_u64(uint64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshld_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "UQSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshl_n_s8",
        "intrinsic": "int8x8_t vqshl_n_s8(int8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_n_s8",
        "argument_preparation": "a -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "SQSHL Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_n_s8",
        "intrinsic": "int8x16_t vqshlq_n_s8(int8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_n_s8",
        "argument_preparation": "a -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "SQSHL Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_n_s16",
        "intrinsic": "int16x4_t vqshl_n_s16(int16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_n_s16",
        "argument_preparation": "a -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "SQSHL Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_n_s16",
        "intrinsic": "int16x8_t vqshlq_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_n_s16",
        "argument_preparation": "a -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "SQSHL Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_n_s32",
        "intrinsic": "int32x2_t vqshl_n_s32(int32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_n_s32",
        "argument_preparation": "a -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "SQSHL Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_n_s32",
        "intrinsic": "int32x4_t vqshlq_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_n_s32",
        "argument_preparation": "a -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "SQSHL Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_n_s64",
        "intrinsic": "int64x1_t vqshl_n_s64(int64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_n_s64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SQSHL Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_n_s64",
        "intrinsic": "int64x2_t vqshlq_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_n_s64",
        "argument_preparation": "a -> Vn.2D; 0 <= n <= 63",
        "aarch64_instruction": "SQSHL Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_n_u8",
        "intrinsic": "uint8x8_t vqshl_n_u8(uint8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_n_u8",
        "argument_preparation": "a -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "UQSHL Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_n_u8",
        "intrinsic": "uint8x16_t vqshlq_n_u8(uint8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_n_u8",
        "argument_preparation": "a -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "UQSHL Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_n_u16",
        "intrinsic": "uint16x4_t vqshl_n_u16(uint16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_n_u16",
        "argument_preparation": "a -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "UQSHL Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_n_u16",
        "intrinsic": "uint16x8_t vqshlq_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_n_u16",
        "argument_preparation": "a -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "UQSHL Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_n_u32",
        "intrinsic": "uint32x2_t vqshl_n_u32(uint32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_n_u32",
        "argument_preparation": "a -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "UQSHL Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_n_u32",
        "intrinsic": "uint32x4_t vqshlq_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_n_u32",
        "argument_preparation": "a -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "UQSHL Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshl_n_u64",
        "intrinsic": "uint64x1_t vqshl_n_u64(uint64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshl_n_u64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "UQSHL Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlq_n_u64",
        "intrinsic": "uint64x2_t vqshlq_n_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlq_n_u64",
        "argument_preparation": "a -> Vn.2D; 0 <= n <= 63",
        "aarch64_instruction": "UQSHL Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlb_n_s8",
        "intrinsic": "int8_t vqshlb_n_s8(int8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlb_n_s8",
        "argument_preparation": "a -> Bn; 0 <= n <= 7",
        "aarch64_instruction": "SQSHL Bd,Bn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlh_n_s16",
        "intrinsic": "int16_t vqshlh_n_s16(int16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlh_n_s16",
        "argument_preparation": "a -> Hn; 0 <= n <= 15",
        "aarch64_instruction": "SQSHL Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshls_n_s32",
        "intrinsic": "int32_t vqshls_n_s32(int32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshls_n_s32",
        "argument_preparation": "a -> Sn; 0 <= n <= 31",
        "aarch64_instruction": "SQSHL Sd,Sn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshld_n_s64",
        "intrinsic": "int64_t vqshld_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshld_n_s64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SQSHL Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlb_n_u8",
        "intrinsic": "uint8_t vqshlb_n_u8(uint8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlb_n_u8",
        "argument_preparation": "a -> Bn; 0 <= n <= 7",
        "aarch64_instruction": "UQSHL Bd,Bn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlh_n_u16",
        "intrinsic": "uint16_t vqshlh_n_u16(uint16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlh_n_u16",
        "argument_preparation": "a -> Hn; 0 <= n <= 15",
        "aarch64_instruction": "UQSHL Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshls_n_u32",
        "intrinsic": "uint32_t vqshls_n_u32(uint32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshls_n_u32",
        "argument_preparation": "a -> Sn; 0 <= n <= 31",
        "aarch64_instruction": "UQSHL Sd,Sn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshld_n_u64",
        "intrinsic": "uint64_t vqshld_n_u64(uint64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshld_n_u64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "UQSHL Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlu_n_s8",
        "intrinsic": "uint8x8_t vqshlu_n_s8(int8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlu_n_s8",
        "argument_preparation": "a -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "SQSHLU Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshluq_n_s8",
        "intrinsic": "uint8x16_t vqshluq_n_s8(int8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshluq_n_s8",
        "argument_preparation": "a -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "SQSHLU Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlu_n_s16",
        "intrinsic": "uint16x4_t vqshlu_n_s16(int16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlu_n_s16",
        "argument_preparation": "a -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "SQSHLU Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshluq_n_s16",
        "intrinsic": "uint16x8_t vqshluq_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshluq_n_s16",
        "argument_preparation": "a -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "SQSHLU Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlu_n_s32",
        "intrinsic": "uint32x2_t vqshlu_n_s32(int32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlu_n_s32",
        "argument_preparation": "a -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "SQSHLU Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshluq_n_s32",
        "intrinsic": "uint32x4_t vqshluq_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshluq_n_s32",
        "argument_preparation": "a -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "SQSHLU Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlu_n_s64",
        "intrinsic": "uint64x1_t vqshlu_n_s64(int64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlu_n_s64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SQSHLU Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshluq_n_s64",
        "intrinsic": "uint64x2_t vqshluq_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshluq_n_s64",
        "argument_preparation": "a -> Vn.2D; 0 <= n <= 63",
        "aarch64_instruction": "SQSHLU Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshlub_n_s8",
        "intrinsic": "uint8_t vqshlub_n_s8(int8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlub_n_s8",
        "argument_preparation": "a -> Bn; 0 <= n <= 7",
        "aarch64_instruction": "SQSHLU Bd,Bn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshluh_n_s16",
        "intrinsic": "uint16_t vqshluh_n_s16(int16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshluh_n_s16",
        "argument_preparation": "a -> Hn; 0 <= n <= 15",
        "aarch64_instruction": "SQSHLU Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlus_n_s32",
        "intrinsic": "uint32_t vqshlus_n_s32(int32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlus_n_s32",
        "argument_preparation": "a -> Sn; 0 <= n <= 31",
        "aarch64_instruction": "SQSHLU Sd,Sn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshlud_n_s64",
        "intrinsic": "uint64_t vqshlud_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshlud_n_s64",
        "argument_preparation": "a -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SQSHLU Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshl_s8",
        "intrinsic": "int8x8_t vrshl_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshl_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SRSHL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshlq_s8",
        "intrinsic": "int8x16_t vrshlq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshlq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SRSHL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshl_s16",
        "intrinsic": "int16x4_t vrshl_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshl_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SRSHL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshlq_s16",
        "intrinsic": "int16x8_t vrshlq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshlq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SRSHL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshl_s32",
        "intrinsic": "int32x2_t vrshl_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshl_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SRSHL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshlq_s32",
        "intrinsic": "int32x4_t vrshlq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshlq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SRSHL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshl_s64",
        "intrinsic": "int64x1_t vrshl_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshl_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SRSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshlq_s64",
        "intrinsic": "int64x2_t vrshlq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshlq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SRSHL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshl_u8",
        "intrinsic": "uint8x8_t vrshl_u8(uint8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshl_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "URSHL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshlq_u8",
        "intrinsic": "uint8x16_t vrshlq_u8(uint8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshlq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "URSHL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshl_u16",
        "intrinsic": "uint16x4_t vrshl_u16(uint16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshl_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "URSHL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshlq_u16",
        "intrinsic": "uint16x8_t vrshlq_u16(uint16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshlq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "URSHL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshl_u32",
        "intrinsic": "uint32x2_t vrshl_u32(uint32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshl_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "URSHL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshlq_u32",
        "intrinsic": "uint32x4_t vrshlq_u32(uint32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshlq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "URSHL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshl_u64",
        "intrinsic": "uint64x1_t vrshl_u64(uint64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshl_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "URSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshlq_u64",
        "intrinsic": "uint64x2_t vrshlq_u64(uint64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshlq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "URSHL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshld_s64",
        "intrinsic": "int64_t vrshld_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshld_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SRSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshld_u64",
        "intrinsic": "uint64_t vrshld_u64(uint64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshld_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "URSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshl_s8",
        "intrinsic": "int8x8_t vqrshl_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshl_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SQRSHL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlq_s8",
        "intrinsic": "int8x16_t vqrshlq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SQRSHL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshl_s16",
        "intrinsic": "int16x4_t vqrshl_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshl_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "SQRSHL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlq_s16",
        "intrinsic": "int16x8_t vqrshlq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "SQRSHL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshl_s32",
        "intrinsic": "int32x2_t vqrshl_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshl_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "SQRSHL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlq_s32",
        "intrinsic": "int32x4_t vqrshlq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "SQRSHL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshl_s64",
        "intrinsic": "int64x1_t vqrshl_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshl_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SQRSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlq_s64",
        "intrinsic": "int64x2_t vqrshlq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlq_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "SQRSHL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshl_u8",
        "intrinsic": "uint8x8_t vqrshl_u8(uint8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshl_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UQRSHL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlq_u8",
        "intrinsic": "uint8x16_t vqrshlq_u8(uint8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UQRSHL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshl_u16",
        "intrinsic": "uint16x4_t vqrshl_u16(uint16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshl_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UQRSHL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlq_u16",
        "intrinsic": "uint16x8_t vqrshlq_u16(uint16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UQRSHL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshl_u32",
        "intrinsic": "uint32x2_t vqrshl_u32(uint32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshl_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UQRSHL Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlq_u32",
        "intrinsic": "uint32x4_t vqrshlq_u32(uint32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UQRSHL Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshl_u64",
        "intrinsic": "uint64x1_t vqrshl_u64(uint64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshl_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "UQRSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlq_u64",
        "intrinsic": "uint64x2_t vqrshlq_u64(uint64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UQRSHL Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshlb_s8",
        "intrinsic": "int8_t vqrshlb_s8(int8_t a, int8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlb_s8",
        "argument_preparation": "a -> Bn; b -> Bm",
        "aarch64_instruction": "SQRSHL Bd,Bn,Bm",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshlh_s16",
        "intrinsic": "int16_t vqrshlh_s16(int16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlh_s16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "SQRSHL Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshls_s32",
        "intrinsic": "int32_t vqrshls_s32(int32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshls_s32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "SQRSHL Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshld_s64",
        "intrinsic": "int64_t vqrshld_s64(int64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshld_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "SQRSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshlb_u8",
        "intrinsic": "uint8_t vqrshlb_u8(uint8_t a, int8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlb_u8",
        "argument_preparation": "a -> Bn; b -> Bm",
        "aarch64_instruction": "UQRSHL Bd,Bn,Bm",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshlh_u16",
        "intrinsic": "uint16_t vqrshlh_u16(uint16_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshlh_u16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "UQRSHL Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshls_u32",
        "intrinsic": "uint32_t vqrshls_u32(uint32_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshls_u32",
        "argument_preparation": "a -> Sn; b -> Sm",
        "aarch64_instruction": "UQRSHL Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshld_u64",
        "intrinsic": "uint64_t vqrshld_u64(uint64_t a, int64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshld_u64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "UQRSHL Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_n_s8",
        "intrinsic": "int16x8_t vshll_n_s8(int8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_s8",
        "argument_preparation": "a -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "SSHLL Vd.8H,Vn.8B,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_s16",
        "intrinsic": "int32x4_t vshll_n_s16(int16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_s16",
        "argument_preparation": "a -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "SSHLL Vd.4S,Vn.4H,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_s32",
        "intrinsic": "int64x2_t vshll_n_s32(int32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_s32",
        "argument_preparation": "a -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "SSHLL Vd.2D,Vn.2S,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_u8",
        "intrinsic": "uint16x8_t vshll_n_u8(uint8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_u8",
        "argument_preparation": "a -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "USHLL Vd.8H,Vn.8B,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_u16",
        "intrinsic": "uint32x4_t vshll_n_u16(uint16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_u16",
        "argument_preparation": "a -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "USHLL Vd.4S,Vn.4H,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_u32",
        "intrinsic": "uint64x2_t vshll_n_u32(uint32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_u32",
        "argument_preparation": "a -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "USHLL Vd.2D,Vn.2S,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_high_n_s8",
        "intrinsic": "int16x8_t vshll_high_n_s8(int8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_s8",
        "argument_preparation": "a -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "SSHLL2 Vd.8H,Vn.16B,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_s16",
        "intrinsic": "int32x4_t vshll_high_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_s16",
        "argument_preparation": "a -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "SSHLL2 Vd.4S,Vn.8H,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_s32",
        "intrinsic": "int64x2_t vshll_high_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_s32",
        "argument_preparation": "a -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "SSHLL2 Vd.2D,Vn.4S,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_u8",
        "intrinsic": "uint16x8_t vshll_high_n_u8(uint8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_u8",
        "argument_preparation": "a -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "USHLL2 Vd.8H,Vn.16B,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_u16",
        "intrinsic": "uint32x4_t vshll_high_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_u16",
        "argument_preparation": "a -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "USHLL2 Vd.4S,Vn.8H,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_u32",
        "intrinsic": "uint64x2_t vshll_high_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_u32",
        "argument_preparation": "a -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "USHLL2 Vd.2D,Vn.4S,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_n_s8",
        "intrinsic": "int16x8_t vshll_n_s8(int8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_s8",
        "argument_preparation": "a -> Vn.8B; n == 8",
        "aarch64_instruction": "SHLL Vd.8H,Vn.8B,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_s16",
        "intrinsic": "int32x4_t vshll_n_s16(int16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_s16",
        "argument_preparation": "a -> Vn.4H; n == 16",
        "aarch64_instruction": "SHLL Vd.4S,Vn.4H,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_s32",
        "intrinsic": "int64x2_t vshll_n_s32(int32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_s32",
        "argument_preparation": "a -> Vn.2S; n == 32",
        "aarch64_instruction": "SHLL Vd.2D,Vn.2S,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_u8",
        "intrinsic": "uint16x8_t vshll_n_u8(uint8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_u8",
        "argument_preparation": "a -> Vn.8B; n == 8",
        "aarch64_instruction": "SHLL Vd.8H,Vn.8B,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_u16",
        "intrinsic": "uint32x4_t vshll_n_u16(uint16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_u16",
        "argument_preparation": "a -> Vn.4H; n == 16",
        "aarch64_instruction": "SHLL Vd.4S,Vn.4H,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_n_u32",
        "intrinsic": "uint64x2_t vshll_n_u32(uint32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_n_u32",
        "argument_preparation": "a -> Vn.2S; n == 32",
        "aarch64_instruction": "SHLL Vd.2D,Vn.2S,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshll_high_n_s8",
        "intrinsic": "int16x8_t vshll_high_n_s8(int8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_s8",
        "argument_preparation": "a -> Vn.16B; n == 8",
        "aarch64_instruction": "SHLL2 Vd.8H,Vn.16B,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_s16",
        "intrinsic": "int32x4_t vshll_high_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_s16",
        "argument_preparation": "a -> Vn.8H; n == 16",
        "aarch64_instruction": "SHLL2 Vd.4S,Vn.8H,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_s32",
        "intrinsic": "int64x2_t vshll_high_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_s32",
        "argument_preparation": "a -> Vn.4S; n == 32",
        "aarch64_instruction": "SHLL2 Vd.2D,Vn.4S,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_u8",
        "intrinsic": "uint16x8_t vshll_high_n_u8(uint8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_u8",
        "argument_preparation": "a -> Vn.16B; n == 8",
        "aarch64_instruction": "SHLL2 Vd.8H,Vn.16B,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_u16",
        "intrinsic": "uint32x4_t vshll_high_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_u16",
        "argument_preparation": "a -> Vn.8H; n == 16",
        "aarch64_instruction": "SHLL2 Vd.4S,Vn.8H,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshll_high_n_u32",
        "intrinsic": "uint64x2_t vshll_high_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshll_high_n_u32",
        "argument_preparation": "a -> Vn.4S; n == 32",
        "aarch64_instruction": "SHLL2 Vd.2D,Vn.4S,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsli_n_s8",
        "intrinsic": "int8x8_t vsli_n_s8(int8x8_t a, int8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "SLI Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_s8",
        "intrinsic": "int8x16_t vsliq_n_s8(int8x16_t a, int8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "SLI Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_s16",
        "intrinsic": "int16x4_t vsli_n_s16(int16x4_t a, int16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "SLI Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_s16",
        "intrinsic": "int16x8_t vsliq_n_s16(int16x8_t a, int16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "SLI Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_s32",
        "intrinsic": "int32x2_t vsli_n_s32(int32x2_t a, int32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "SLI Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_s32",
        "intrinsic": "int32x4_t vsliq_n_s32(int32x4_t a, int32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "SLI Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_s64",
        "intrinsic": "int64x1_t vsli_n_s64(int64x1_t a, int64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_s64",
        "argument_preparation": "a -> Dd; b -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SLI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_s64",
        "intrinsic": "int64x2_t vsliq_n_s64(int64x2_t a, int64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_s64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 0 <= n <= 63",
        "aarch64_instruction": "SLI Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_u8",
        "intrinsic": "uint8x8_t vsli_n_u8(uint8x8_t a, uint8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "SLI Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_u8",
        "intrinsic": "uint8x16_t vsliq_n_u8(uint8x16_t a, uint8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "SLI Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_u16",
        "intrinsic": "uint16x4_t vsli_n_u16(uint16x4_t a, uint16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "SLI Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_u16",
        "intrinsic": "uint16x8_t vsliq_n_u16(uint16x8_t a, uint16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "SLI Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_u32",
        "intrinsic": "uint32x2_t vsli_n_u32(uint32x2_t a, uint32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; 0 <= n <= 31",
        "aarch64_instruction": "SLI Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_u32",
        "intrinsic": "uint32x4_t vsliq_n_u32(uint32x4_t a, uint32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; 0 <= n <= 31",
        "aarch64_instruction": "SLI Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_u64",
        "intrinsic": "uint64x1_t vsli_n_u64(uint64x1_t a, uint64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_u64",
        "argument_preparation": "a -> Dd; b -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SLI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_u64",
        "intrinsic": "uint64x2_t vsliq_n_u64(uint64x2_t a, uint64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_u64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 0 <= n <= 63",
        "aarch64_instruction": "SLI Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_p64",
        "intrinsic": "poly64x1_t vsli_n_p64(poly64x1_t a, poly64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_p64",
        "argument_preparation": "a -> Dd; b -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SLI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsliq_n_p64",
        "intrinsic": "poly64x2_t vsliq_n_p64(poly64x2_t a, poly64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_p64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 0 <= n <= 63",
        "aarch64_instruction": "SLI Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsli_n_p8",
        "intrinsic": "poly8x8_t vsli_n_p8(poly8x8_t a, poly8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_p8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 0 <= n <= 7",
        "aarch64_instruction": "SLI Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_p8",
        "intrinsic": "poly8x16_t vsliq_n_p8(poly8x16_t a, poly8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_p8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 0 <= n <= 7",
        "aarch64_instruction": "SLI Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsli_n_p16",
        "intrinsic": "poly16x4_t vsli_n_p16(poly16x4_t a, poly16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsli_n_p16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 0 <= n <= 15",
        "aarch64_instruction": "SLI Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsliq_n_p16",
        "intrinsic": "poly16x8_t vsliq_n_p16(poly16x8_t a, poly16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsliq_n_p16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 0 <= n <= 15",
        "aarch64_instruction": "SLI Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vslid_n_s64",
        "intrinsic": "int64_t vslid_n_s64(int64_t a, int64_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vslid_n_s64",
        "argument_preparation": "a -> Dd; b -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SLI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vslid_n_u64",
        "intrinsic": "uint64_t vslid_n_u64(uint64_t a, uint64_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vslid_n_u64",
        "argument_preparation": "a -> Dd; b -> Dn; 0 <= n <= 63",
        "aarch64_instruction": "SLI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshr_n_s8",
        "intrinsic": "int8x8_t vshr_n_s8(int8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshr_n_s8",
        "argument_preparation": "a -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "SSHR Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrq_n_s8",
        "intrinsic": "int8x16_t vshrq_n_s8(int8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrq_n_s8",
        "argument_preparation": "a -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "SSHR Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshr_n_s16",
        "intrinsic": "int16x4_t vshr_n_s16(int16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshr_n_s16",
        "argument_preparation": "a -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "SSHR Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrq_n_s16",
        "intrinsic": "int16x8_t vshrq_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrq_n_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "SSHR Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshr_n_s32",
        "intrinsic": "int32x2_t vshr_n_s32(int32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshr_n_s32",
        "argument_preparation": "a -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "SSHR Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrq_n_s32",
        "intrinsic": "int32x4_t vshrq_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrq_n_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "SSHR Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshr_n_s64",
        "intrinsic": "int64x1_t vshr_n_s64(int64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshr_n_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SSHR Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrq_n_s64",
        "intrinsic": "int64x2_t vshrq_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrq_n_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "SSHR Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshr_n_u8",
        "intrinsic": "uint8x8_t vshr_n_u8(uint8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshr_n_u8",
        "argument_preparation": "a -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "USHR Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrq_n_u8",
        "intrinsic": "uint8x16_t vshrq_n_u8(uint8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrq_n_u8",
        "argument_preparation": "a -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "USHR Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshr_n_u16",
        "intrinsic": "uint16x4_t vshr_n_u16(uint16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshr_n_u16",
        "argument_preparation": "a -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "USHR Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrq_n_u16",
        "intrinsic": "uint16x8_t vshrq_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrq_n_u16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "USHR Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshr_n_u32",
        "intrinsic": "uint32x2_t vshr_n_u32(uint32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshr_n_u32",
        "argument_preparation": "a -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "USHR Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrq_n_u32",
        "intrinsic": "uint32x4_t vshrq_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrq_n_u32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "USHR Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshr_n_u64",
        "intrinsic": "uint64x1_t vshr_n_u64(uint64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshr_n_u64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "USHR Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrq_n_u64",
        "intrinsic": "uint64x2_t vshrq_n_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrq_n_u64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "USHR Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrd_n_s64",
        "intrinsic": "int64_t vshrd_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrd_n_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SSHR Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshrd_n_u64",
        "intrinsic": "uint64_t vshrd_n_u64(uint64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrd_n_u64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "USHR Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshr_n_s8",
        "intrinsic": "int8x8_t vrshr_n_s8(int8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshr_n_s8",
        "argument_preparation": "a -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "SRSHR Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrq_n_s8",
        "intrinsic": "int8x16_t vrshrq_n_s8(int8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrq_n_s8",
        "argument_preparation": "a -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "SRSHR Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshr_n_s16",
        "intrinsic": "int16x4_t vrshr_n_s16(int16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshr_n_s16",
        "argument_preparation": "a -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "SRSHR Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrq_n_s16",
        "intrinsic": "int16x8_t vrshrq_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrq_n_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "SRSHR Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshr_n_s32",
        "intrinsic": "int32x2_t vrshr_n_s32(int32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshr_n_s32",
        "argument_preparation": "a -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "SRSHR Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrq_n_s32",
        "intrinsic": "int32x4_t vrshrq_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrq_n_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "SRSHR Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshr_n_s64",
        "intrinsic": "int64x1_t vrshr_n_s64(int64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshr_n_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRSHR Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrq_n_s64",
        "intrinsic": "int64x2_t vrshrq_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrq_n_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "SRSHR Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshr_n_u8",
        "intrinsic": "uint8x8_t vrshr_n_u8(uint8x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshr_n_u8",
        "argument_preparation": "a -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "URSHR Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrq_n_u8",
        "intrinsic": "uint8x16_t vrshrq_n_u8(uint8x16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrq_n_u8",
        "argument_preparation": "a -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "URSHR Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshr_n_u16",
        "intrinsic": "uint16x4_t vrshr_n_u16(uint16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshr_n_u16",
        "argument_preparation": "a -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "URSHR Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrq_n_u16",
        "intrinsic": "uint16x8_t vrshrq_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrq_n_u16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "URSHR Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshr_n_u32",
        "intrinsic": "uint32x2_t vrshr_n_u32(uint32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshr_n_u32",
        "argument_preparation": "a -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "URSHR Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrq_n_u32",
        "intrinsic": "uint32x4_t vrshrq_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrq_n_u32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "URSHR Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshr_n_u64",
        "intrinsic": "uint64x1_t vrshr_n_u64(uint64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshr_n_u64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "URSHR Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrq_n_u64",
        "intrinsic": "uint64x2_t vrshrq_n_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrq_n_u64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "URSHR Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrd_n_s64",
        "intrinsic": "int64_t vrshrd_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrd_n_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRSHR Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshrd_n_u64",
        "intrinsic": "uint64_t vrshrd_n_u64(uint64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrd_n_u64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "URSHR Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsra_n_s8",
        "intrinsic": "int8x8_t vsra_n_s8(int8x8_t a, int8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsra_n_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "SSRA Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsraq_n_s8",
        "intrinsic": "int8x16_t vsraq_n_s8(int8x16_t a, int8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsraq_n_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "SSRA Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsra_n_s16",
        "intrinsic": "int16x4_t vsra_n_s16(int16x4_t a, int16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsra_n_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "SSRA Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsraq_n_s16",
        "intrinsic": "int16x8_t vsraq_n_s16(int16x8_t a, int16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsraq_n_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "SSRA Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsra_n_s32",
        "intrinsic": "int32x2_t vsra_n_s32(int32x2_t a, int32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsra_n_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "SSRA Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsraq_n_s32",
        "intrinsic": "int32x4_t vsraq_n_s32(int32x4_t a, int32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsraq_n_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "SSRA Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsra_n_s64",
        "intrinsic": "int64x1_t vsra_n_s64(int64x1_t a, int64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsra_n_s64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SSRA Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsraq_n_s64",
        "intrinsic": "int64x2_t vsraq_n_s64(int64x2_t a, int64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsraq_n_s64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "SSRA Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsra_n_u8",
        "intrinsic": "uint8x8_t vsra_n_u8(uint8x8_t a, uint8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsra_n_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "USRA Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsraq_n_u8",
        "intrinsic": "uint8x16_t vsraq_n_u8(uint8x16_t a, uint8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsraq_n_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "USRA Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsra_n_u16",
        "intrinsic": "uint16x4_t vsra_n_u16(uint16x4_t a, uint16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsra_n_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "USRA Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsraq_n_u16",
        "intrinsic": "uint16x8_t vsraq_n_u16(uint16x8_t a, uint16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsraq_n_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "USRA Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsra_n_u32",
        "intrinsic": "uint32x2_t vsra_n_u32(uint32x2_t a, uint32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsra_n_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "USRA Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsraq_n_u32",
        "intrinsic": "uint32x4_t vsraq_n_u32(uint32x4_t a, uint32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsraq_n_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "USRA Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsra_n_u64",
        "intrinsic": "uint64x1_t vsra_n_u64(uint64x1_t a, uint64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsra_n_u64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "USRA Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsraq_n_u64",
        "intrinsic": "uint64x2_t vsraq_n_u64(uint64x2_t a, uint64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsraq_n_u64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "USRA Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsrad_n_s64",
        "intrinsic": "int64_t vsrad_n_s64(int64_t a, int64_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsrad_n_s64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SSRA Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsrad_n_u64",
        "intrinsic": "uint64_t vsrad_n_u64(uint64_t a, uint64_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsrad_n_u64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "USRA Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsra_n_s8",
        "intrinsic": "int8x8_t vrsra_n_s8(int8x8_t a, int8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsra_n_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "SRSRA Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsraq_n_s8",
        "intrinsic": "int8x16_t vrsraq_n_s8(int8x16_t a, int8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsraq_n_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "SRSRA Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsra_n_s16",
        "intrinsic": "int16x4_t vrsra_n_s16(int16x4_t a, int16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsra_n_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "SRSRA Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsraq_n_s16",
        "intrinsic": "int16x8_t vrsraq_n_s16(int16x8_t a, int16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsraq_n_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "SRSRA Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsra_n_s32",
        "intrinsic": "int32x2_t vrsra_n_s32(int32x2_t a, int32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsra_n_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "SRSRA Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsraq_n_s32",
        "intrinsic": "int32x4_t vrsraq_n_s32(int32x4_t a, int32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsraq_n_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "SRSRA Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsra_n_s64",
        "intrinsic": "int64x1_t vrsra_n_s64(int64x1_t a, int64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsra_n_s64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRSRA Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsraq_n_s64",
        "intrinsic": "int64x2_t vrsraq_n_s64(int64x2_t a, int64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsraq_n_s64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "SRSRA Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsra_n_u8",
        "intrinsic": "uint8x8_t vrsra_n_u8(uint8x8_t a, uint8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsra_n_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "URSRA Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsraq_n_u8",
        "intrinsic": "uint8x16_t vrsraq_n_u8(uint8x16_t a, uint8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsraq_n_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "URSRA Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsra_n_u16",
        "intrinsic": "uint16x4_t vrsra_n_u16(uint16x4_t a, uint16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsra_n_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "URSRA Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsraq_n_u16",
        "intrinsic": "uint16x8_t vrsraq_n_u16(uint16x8_t a, uint16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsraq_n_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "URSRA Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsra_n_u32",
        "intrinsic": "uint32x2_t vrsra_n_u32(uint32x2_t a, uint32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsra_n_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "URSRA Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsraq_n_u32",
        "intrinsic": "uint32x4_t vrsraq_n_u32(uint32x4_t a, uint32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsraq_n_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "URSRA Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsra_n_u64",
        "intrinsic": "uint64x1_t vrsra_n_u64(uint64x1_t a, uint64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsra_n_u64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "URSRA Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsraq_n_u64",
        "intrinsic": "uint64x2_t vrsraq_n_u64(uint64x2_t a, uint64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsraq_n_u64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "URSRA Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrsrad_n_s64",
        "intrinsic": "int64_t vrsrad_n_s64(int64_t a, int64_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsrad_n_s64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRSRA Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsrad_n_u64",
        "intrinsic": "uint64_t vrsrad_n_u64(uint64_t a, uint64_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsrad_n_u64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "URSRA Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshrn_n_s16",
        "intrinsic": "int8x8_t vshrn_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_n_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SHRN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrn_n_s32",
        "intrinsic": "int16x4_t vshrn_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_n_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SHRN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrn_n_s64",
        "intrinsic": "int32x2_t vshrn_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_n_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SHRN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrn_n_u16",
        "intrinsic": "uint8x8_t vshrn_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_n_u16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SHRN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrn_n_u32",
        "intrinsic": "uint16x4_t vshrn_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_n_u32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SHRN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrn_n_u64",
        "intrinsic": "uint32x2_t vshrn_n_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_n_u64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SHRN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vshrn_high_n_s16",
        "intrinsic": "int8x16_t vshrn_high_n_s16(int8x8_t r, int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_high_n_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SHRN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshrn_high_n_s32",
        "intrinsic": "int16x8_t vshrn_high_n_s32(int16x4_t r, int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_high_n_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SHRN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshrn_high_n_s64",
        "intrinsic": "int32x4_t vshrn_high_n_s64(int32x2_t r, int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_high_n_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SHRN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshrn_high_n_u16",
        "intrinsic": "uint8x16_t vshrn_high_n_u16(uint8x8_t r, uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_high_n_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SHRN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshrn_high_n_u32",
        "intrinsic": "uint16x8_t vshrn_high_n_u32(uint16x4_t r, uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_high_n_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SHRN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vshrn_high_n_u64",
        "intrinsic": "uint32x4_t vshrn_high_n_u64(uint32x2_t r, uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vshrn_high_n_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SHRN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrun_n_s16",
        "intrinsic": "uint8x8_t vqshrun_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrun_n_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SQSHRUN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrun_n_s32",
        "intrinsic": "uint16x4_t vqshrun_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrun_n_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SQSHRUN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrun_n_s64",
        "intrinsic": "uint32x2_t vqshrun_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrun_n_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SQSHRUN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrunh_n_s16",
        "intrinsic": "uint8_t vqshrunh_n_s16(int16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrunh_n_s16",
        "argument_preparation": "a -> Hn; 1 <= n <= 8",
        "aarch64_instruction": "SQSHRUN Bd,Hn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshruns_n_s32",
        "intrinsic": "uint16_t vqshruns_n_s32(int32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshruns_n_s32",
        "argument_preparation": "a -> Sn; 1 <= n <= 16",
        "aarch64_instruction": "SQSHRUN Hd,Sn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrund_n_s64",
        "intrinsic": "uint32_t vqshrund_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrund_n_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 32",
        "aarch64_instruction": "SQSHRUN Sd,Dn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrun_high_n_s16",
        "intrinsic": "uint8x16_t vqshrun_high_n_s16(uint8x8_t r, int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrun_high_n_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SQSHRUN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrun_high_n_s32",
        "intrinsic": "uint16x8_t vqshrun_high_n_s32(uint16x4_t r, int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrun_high_n_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SQSHRUN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrun_high_n_s64",
        "intrinsic": "uint32x4_t vqshrun_high_n_s64(uint32x2_t r, int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrun_high_n_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SQSHRUN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrn_n_s16",
        "intrinsic": "int8x8_t vqshrn_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_n_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SQSHRN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrn_n_s32",
        "intrinsic": "int16x4_t vqshrn_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_n_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SQSHRN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrn_n_s64",
        "intrinsic": "int32x2_t vqshrn_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_n_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SQSHRN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrn_n_u16",
        "intrinsic": "uint8x8_t vqshrn_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_n_u16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "UQSHRN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrn_n_u32",
        "intrinsic": "uint16x4_t vqshrn_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_n_u32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "UQSHRN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrn_n_u64",
        "intrinsic": "uint32x2_t vqshrn_n_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_n_u64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "UQSHRN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqshrnh_n_s16",
        "intrinsic": "int8_t vqshrnh_n_s16(int16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrnh_n_s16",
        "argument_preparation": "a -> Hn; 1 <= n <= 8",
        "aarch64_instruction": "SQSHRN Bd,Hn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrns_n_s32",
        "intrinsic": "int16_t vqshrns_n_s32(int32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrns_n_s32",
        "argument_preparation": "a -> Sn; 1 <= n <= 16",
        "aarch64_instruction": "SQSHRN Hd,Sn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrnd_n_s64",
        "intrinsic": "int32_t vqshrnd_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrnd_n_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 32",
        "aarch64_instruction": "SQSHRN Sd,Dn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrnh_n_u16",
        "intrinsic": "uint8_t vqshrnh_n_u16(uint16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrnh_n_u16",
        "argument_preparation": "a -> Hn; 1 <= n <= 8",
        "aarch64_instruction": "UQSHRN Bd,Hn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrns_n_u32",
        "intrinsic": "uint16_t vqshrns_n_u32(uint32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrns_n_u32",
        "argument_preparation": "a -> Sn; 1 <= n <= 16",
        "aarch64_instruction": "UQSHRN Hd,Sn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrnd_n_u64",
        "intrinsic": "uint32_t vqshrnd_n_u64(uint64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrnd_n_u64",
        "argument_preparation": "a -> Dn; 1 <= n <= 32",
        "aarch64_instruction": "UQSHRN Sd,Dn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrn_high_n_s16",
        "intrinsic": "int8x16_t vqshrn_high_n_s16(int8x8_t r, int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_high_n_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SQSHRN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrn_high_n_s32",
        "intrinsic": "int16x8_t vqshrn_high_n_s32(int16x4_t r, int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_high_n_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SQSHRN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrn_high_n_s64",
        "intrinsic": "int32x4_t vqshrn_high_n_s64(int32x2_t r, int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_high_n_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SQSHRN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrn_high_n_u16",
        "intrinsic": "uint8x16_t vqshrn_high_n_u16(uint8x8_t r, uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_high_n_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "UQSHRN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrn_high_n_u32",
        "intrinsic": "uint16x8_t vqshrn_high_n_u32(uint16x4_t r, uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_high_n_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "UQSHRN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqshrn_high_n_u64",
        "intrinsic": "uint32x4_t vqshrn_high_n_u64(uint32x2_t r, uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqshrn_high_n_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "UQSHRN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrun_n_s16",
        "intrinsic": "uint8x8_t vqrshrun_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrun_n_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SQRSHRUN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrun_n_s32",
        "intrinsic": "uint16x4_t vqrshrun_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrun_n_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SQRSHRUN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrun_n_s64",
        "intrinsic": "uint32x2_t vqrshrun_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrun_n_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SQRSHRUN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrunh_n_s16",
        "intrinsic": "uint8_t vqrshrunh_n_s16(int16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrunh_n_s16",
        "argument_preparation": "a -> Hn; 1 <= n <= 8",
        "aarch64_instruction": "SQRSHRUN Bd,Hn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshruns_n_s32",
        "intrinsic": "uint16_t vqrshruns_n_s32(int32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshruns_n_s32",
        "argument_preparation": "a -> Sn; 1 <= n <= 16",
        "aarch64_instruction": "SQRSHRUN Hd,Sn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrund_n_s64",
        "intrinsic": "uint32_t vqrshrund_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrund_n_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 32",
        "aarch64_instruction": "SQRSHRUN Sd,Dn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrun_high_n_s16",
        "intrinsic": "uint8x16_t vqrshrun_high_n_s16(uint8x8_t r, int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrun_high_n_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SQRSHRUN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrun_high_n_s32",
        "intrinsic": "uint16x8_t vqrshrun_high_n_s32(uint16x4_t r, int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrun_high_n_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SQRSHRUN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrun_high_n_s64",
        "intrinsic": "uint32x4_t vqrshrun_high_n_s64(uint32x2_t r, int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrun_high_n_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SQRSHRUN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrn_n_s16",
        "intrinsic": "int8x8_t vqrshrn_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_n_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SQRSHRN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrn_n_s32",
        "intrinsic": "int16x4_t vqrshrn_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_n_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SQRSHRN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrn_n_s64",
        "intrinsic": "int32x2_t vqrshrn_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_n_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SQRSHRN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrn_n_u16",
        "intrinsic": "uint8x8_t vqrshrn_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_n_u16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "UQRSHRN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrn_n_u32",
        "intrinsic": "uint16x4_t vqrshrn_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_n_u32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "UQRSHRN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrn_n_u64",
        "intrinsic": "uint32x2_t vqrshrn_n_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_n_u64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "UQRSHRN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqrshrnh_n_s16",
        "intrinsic": "int8_t vqrshrnh_n_s16(int16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrnh_n_s16",
        "argument_preparation": "a -> Hn; 1 <= n <= 8",
        "aarch64_instruction": "SQRSHRN Bd,Hn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrns_n_s32",
        "intrinsic": "int16_t vqrshrns_n_s32(int32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrns_n_s32",
        "argument_preparation": "a -> Sn; 1 <= n <= 16",
        "aarch64_instruction": "SQRSHRN Hd,Sn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrnd_n_s64",
        "intrinsic": "int32_t vqrshrnd_n_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrnd_n_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 32",
        "aarch64_instruction": "SQRSHRN Sd,Dn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrnh_n_u16",
        "intrinsic": "uint8_t vqrshrnh_n_u16(uint16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrnh_n_u16",
        "argument_preparation": "a -> Hn; 1 <= n <= 8",
        "aarch64_instruction": "UQRSHRN Bd,Hn,#n",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrns_n_u32",
        "intrinsic": "uint16_t vqrshrns_n_u32(uint32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrns_n_u32",
        "argument_preparation": "a -> Sn; 1 <= n <= 16",
        "aarch64_instruction": "UQRSHRN Hd,Sn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrnd_n_u64",
        "intrinsic": "uint32_t vqrshrnd_n_u64(uint64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrnd_n_u64",
        "argument_preparation": "a -> Dn; 1 <= n <= 32",
        "aarch64_instruction": "UQRSHRN Sd,Dn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrn_high_n_s16",
        "intrinsic": "int8x16_t vqrshrn_high_n_s16(int8x8_t r, int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_high_n_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "SQRSHRN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrn_high_n_s32",
        "intrinsic": "int16x8_t vqrshrn_high_n_s32(int16x4_t r, int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_high_n_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "SQRSHRN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrn_high_n_s64",
        "intrinsic": "int32x4_t vqrshrn_high_n_s64(int32x2_t r, int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_high_n_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "SQRSHRN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrn_high_n_u16",
        "intrinsic": "uint8x16_t vqrshrn_high_n_u16(uint8x8_t r, uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_high_n_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "UQRSHRN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrn_high_n_u32",
        "intrinsic": "uint16x8_t vqrshrn_high_n_u32(uint16x4_t r, uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_high_n_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "UQRSHRN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrshrn_high_n_u64",
        "intrinsic": "uint32x4_t vqrshrn_high_n_u64(uint32x2_t r, uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrshrn_high_n_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "UQRSHRN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshrn_n_s16",
        "intrinsic": "int8x8_t vrshrn_n_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_n_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "RSHRN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrn_n_s32",
        "intrinsic": "int16x4_t vrshrn_n_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_n_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "RSHRN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrn_n_s64",
        "intrinsic": "int32x2_t vrshrn_n_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_n_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "RSHRN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrn_n_u16",
        "intrinsic": "uint8x8_t vrshrn_n_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_n_u16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "RSHRN Vd.8B,Vn.8H,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrn_n_u32",
        "intrinsic": "uint16x4_t vrshrn_n_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_n_u32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "RSHRN Vd.4H,Vn.4S,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrn_n_u64",
        "intrinsic": "uint32x2_t vrshrn_n_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_n_u64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "RSHRN Vd.2S,Vn.2D,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrshrn_high_n_s16",
        "intrinsic": "int8x16_t vrshrn_high_n_s16(int8x8_t r, int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_high_n_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "RSHRN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshrn_high_n_s32",
        "intrinsic": "int16x8_t vrshrn_high_n_s32(int16x4_t r, int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_high_n_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "RSHRN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshrn_high_n_s64",
        "intrinsic": "int32x4_t vrshrn_high_n_s64(int32x2_t r, int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_high_n_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "RSHRN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshrn_high_n_u16",
        "intrinsic": "uint8x16_t vrshrn_high_n_u16(uint8x8_t r, uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_high_n_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H; 1 <= n <= 8",
        "aarch64_instruction": "RSHRN2 Vd.16B,Vn.8H,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshrn_high_n_u32",
        "intrinsic": "uint16x8_t vrshrn_high_n_u32(uint16x4_t r, uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_high_n_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S; 1 <= n <= 16",
        "aarch64_instruction": "RSHRN2 Vd.8H,Vn.4S,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrshrn_high_n_u64",
        "intrinsic": "uint32x4_t vrshrn_high_n_u64(uint32x2_t r, uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrshrn_high_n_u64",
        "argument_preparation": "r -> 32(Vd); a -> Vn.2D; 1 <= n <= 32",
        "aarch64_instruction": "RSHRN2 Vd.4S,Vn.2D,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsri_n_s8",
        "intrinsic": "int8x8_t vsri_n_s8(int8x8_t a, int8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "SRI Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_s8",
        "intrinsic": "int8x16_t vsriq_n_s8(int8x16_t a, int8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "SRI Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_s16",
        "intrinsic": "int16x4_t vsri_n_s16(int16x4_t a, int16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "SRI Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_s16",
        "intrinsic": "int16x8_t vsriq_n_s16(int16x8_t a, int16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "SRI Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_s32",
        "intrinsic": "int32x2_t vsri_n_s32(int32x2_t a, int32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "SRI Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_s32",
        "intrinsic": "int32x4_t vsriq_n_s32(int32x4_t a, int32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "SRI Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_s64",
        "intrinsic": "int64x1_t vsri_n_s64(int64x1_t a, int64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_s64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_s64",
        "intrinsic": "int64x2_t vsriq_n_s64(int64x2_t a, int64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_s64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "SRI Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_u8",
        "intrinsic": "uint8x8_t vsri_n_u8(uint8x8_t a, uint8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "SRI Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_u8",
        "intrinsic": "uint8x16_t vsriq_n_u8(uint8x16_t a, uint8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "SRI Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_u16",
        "intrinsic": "uint16x4_t vsri_n_u16(uint16x4_t a, uint16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "SRI Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_u16",
        "intrinsic": "uint16x8_t vsriq_n_u16(uint16x8_t a, uint16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "SRI Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_u32",
        "intrinsic": "uint32x2_t vsri_n_u32(uint32x2_t a, uint32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "SRI Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_u32",
        "intrinsic": "uint32x4_t vsriq_n_u32(uint32x4_t a, uint32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "SRI Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_u64",
        "intrinsic": "uint64x1_t vsri_n_u64(uint64x1_t a, uint64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_u64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_u64",
        "intrinsic": "uint64x2_t vsriq_n_u64(uint64x2_t a, uint64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_u64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "SRI Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_p64",
        "intrinsic": "poly64x1_t vsri_n_p64(poly64x1_t a, poly64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_p64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsriq_n_p64",
        "intrinsic": "poly64x2_t vsriq_n_p64(poly64x2_t a, poly64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_p64",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "SRI Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsri_n_p8",
        "intrinsic": "poly8x8_t vsri_n_p8(poly8x8_t a, poly8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_p8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; 1 <= n <= 8",
        "aarch64_instruction": "SRI Vd.8B,Vn.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_p8",
        "intrinsic": "poly8x16_t vsriq_n_p8(poly8x16_t a, poly8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_p8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; 1 <= n <= 8",
        "aarch64_instruction": "SRI Vd.16B,Vn.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsri_n_p16",
        "intrinsic": "poly16x4_t vsri_n_p16(poly16x4_t a, poly16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsri_n_p16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "SRI Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsriq_n_p16",
        "intrinsic": "poly16x8_t vsriq_n_p16(poly16x8_t a, poly16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsriq_n_p16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "SRI Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsrid_n_s64",
        "intrinsic": "int64_t vsrid_n_s64(int64_t a, int64_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsrid_n_s64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsrid_n_u64",
        "intrinsic": "uint64_t vsrid_n_u64(uint64_t a, uint64_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsrid_n_u64",
        "argument_preparation": "a -> Dd; b -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SRI Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      }
    ],
    "Data type conversion": [
      {
        "name": "vcvt_s32_f32",
        "intrinsic": "int32x2_t vcvt_s32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_s32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTZS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtq_s32_f32",
        "intrinsic": "int32x4_t vcvtq_s32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_s32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTZS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvt_u32_f32",
        "intrinsic": "uint32x2_t vcvt_u32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_u32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTZU Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtq_u32_f32",
        "intrinsic": "uint32x4_t vcvtq_u32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_u32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTZU Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtn_s32_f32",
        "intrinsic": "int32x2_t vcvtn_s32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtn_s32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTNS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtnq_s32_f32",
        "intrinsic": "int32x4_t vcvtnq_s32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnq_s32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTNS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtn_u32_f32",
        "intrinsic": "uint32x2_t vcvtn_u32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtn_u32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTNU Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtnq_u32_f32",
        "intrinsic": "uint32x4_t vcvtnq_u32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnq_u32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTNU Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtm_s32_f32",
        "intrinsic": "int32x2_t vcvtm_s32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtm_s32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTMS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtmq_s32_f32",
        "intrinsic": "int32x4_t vcvtmq_s32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmq_s32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTMS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtm_u32_f32",
        "intrinsic": "uint32x2_t vcvtm_u32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtm_u32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTMU Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtmq_u32_f32",
        "intrinsic": "uint32x4_t vcvtmq_u32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmq_u32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTMU Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtp_s32_f32",
        "intrinsic": "int32x2_t vcvtp_s32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtp_s32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTPS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtpq_s32_f32",
        "intrinsic": "int32x4_t vcvtpq_s32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtpq_s32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTPS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtp_u32_f32",
        "intrinsic": "uint32x2_t vcvtp_u32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtp_u32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTPU Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtpq_u32_f32",
        "intrinsic": "uint32x4_t vcvtpq_u32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtpq_u32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTPU Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvta_s32_f32",
        "intrinsic": "int32x2_t vcvta_s32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvta_s32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTAS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtaq_s32_f32",
        "intrinsic": "int32x4_t vcvtaq_s32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtaq_s32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTAS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvta_u32_f32",
        "intrinsic": "uint32x2_t vcvta_u32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvta_u32_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTAU Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtaq_u32_f32",
        "intrinsic": "uint32x4_t vcvtaq_u32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtaq_u32_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTAU Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvts_s32_f32",
        "intrinsic": "int32_t vcvts_s32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvts_s32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTZS Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvts_u32_f32",
        "intrinsic": "uint32_t vcvts_u32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvts_u32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTZU Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtns_s32_f32",
        "intrinsic": "int32_t vcvtns_s32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtns_s32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTNS Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtns_u32_f32",
        "intrinsic": "uint32_t vcvtns_u32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtns_u32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTNU Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtms_s32_f32",
        "intrinsic": "int32_t vcvtms_s32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtms_s32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTMS Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtms_u32_f32",
        "intrinsic": "uint32_t vcvtms_u32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtms_u32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTMU Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtps_s32_f32",
        "intrinsic": "int32_t vcvtps_s32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtps_s32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTPS Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtps_u32_f32",
        "intrinsic": "uint32_t vcvtps_u32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtps_u32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTPU Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtas_s32_f32",
        "intrinsic": "int32_t vcvtas_s32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtas_s32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTAS Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtas_u32_f32",
        "intrinsic": "uint32_t vcvtas_u32_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtas_u32_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "FCVTAU Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_s64_f64",
        "intrinsic": "int64x1_t vcvt_s64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTZS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_s64_f64",
        "intrinsic": "int64x2_t vcvtq_s64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_s64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTZS Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_u64_f64",
        "intrinsic": "uint64x1_t vcvt_u64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTZU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_u64_f64",
        "intrinsic": "uint64x2_t vcvtq_u64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_u64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTZU Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtn_s64_f64",
        "intrinsic": "int64x1_t vcvtn_s64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtn_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTNS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtnq_s64_f64",
        "intrinsic": "int64x2_t vcvtnq_s64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnq_s64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTNS Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtn_u64_f64",
        "intrinsic": "uint64x1_t vcvtn_u64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtn_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTNU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtnq_u64_f64",
        "intrinsic": "uint64x2_t vcvtnq_u64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnq_u64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTNU Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtm_s64_f64",
        "intrinsic": "int64x1_t vcvtm_s64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtm_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTMS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtmq_s64_f64",
        "intrinsic": "int64x2_t vcvtmq_s64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmq_s64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTMS Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtm_u64_f64",
        "intrinsic": "uint64x1_t vcvtm_u64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtm_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTMU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtmq_u64_f64",
        "intrinsic": "uint64x2_t vcvtmq_u64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmq_u64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTMU Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtp_s64_f64",
        "intrinsic": "int64x1_t vcvtp_s64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtp_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTPS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtpq_s64_f64",
        "intrinsic": "int64x2_t vcvtpq_s64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtpq_s64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTPS Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtp_u64_f64",
        "intrinsic": "uint64x1_t vcvtp_u64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtp_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTPU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtpq_u64_f64",
        "intrinsic": "uint64x2_t vcvtpq_u64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtpq_u64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTPU Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvta_s64_f64",
        "intrinsic": "int64x1_t vcvta_s64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvta_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTAS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtaq_s64_f64",
        "intrinsic": "int64x2_t vcvtaq_s64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtaq_s64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTAS Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvta_u64_f64",
        "intrinsic": "uint64x1_t vcvta_u64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvta_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTAU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtaq_u64_f64",
        "intrinsic": "uint64x2_t vcvtaq_u64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtaq_u64_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTAU Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtd_s64_f64",
        "intrinsic": "int64_t vcvtd_s64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtd_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTZS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtd_u64_f64",
        "intrinsic": "uint64_t vcvtd_u64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtd_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTZU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtnd_s64_f64",
        "intrinsic": "int64_t vcvtnd_s64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnd_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTNS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtnd_u64_f64",
        "intrinsic": "uint64_t vcvtnd_u64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnd_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTNU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtmd_s64_f64",
        "intrinsic": "int64_t vcvtmd_s64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmd_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTMS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtmd_u64_f64",
        "intrinsic": "uint64_t vcvtmd_u64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmd_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTMU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtpd_s64_f64",
        "intrinsic": "int64_t vcvtpd_s64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtpd_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTPS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtpd_u64_f64",
        "intrinsic": "uint64_t vcvtpd_u64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtpd_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTPU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtad_s64_f64",
        "intrinsic": "int64_t vcvtad_s64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtad_s64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTAS Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtad_u64_f64",
        "intrinsic": "uint64_t vcvtad_u64_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtad_u64_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTAU Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_n_s32_f32",
        "intrinsic": "int32x2_t vcvt_n_s32_f32(float32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_s32_f32",
        "argument_preparation": "a -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "FCVTZS Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtq_n_s32_f32",
        "intrinsic": "int32x4_t vcvtq_n_s32_f32(float32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_s32_f32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "FCVTZS Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvt_n_u32_f32",
        "intrinsic": "uint32x2_t vcvt_n_u32_f32(float32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_u32_f32",
        "argument_preparation": "a -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "FCVTZU Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtq_n_u32_f32",
        "intrinsic": "uint32x4_t vcvtq_n_u32_f32(float32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_u32_f32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "FCVTZU Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvts_n_s32_f32",
        "intrinsic": "int32_t vcvts_n_s32_f32(float32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvts_n_s32_f32",
        "argument_preparation": "a -> Sn; 1 <= n <= 32",
        "aarch64_instruction": "FCVTZS Sd,Sn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvts_n_u32_f32",
        "intrinsic": "uint32_t vcvts_n_u32_f32(float32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvts_n_u32_f32",
        "argument_preparation": "a -> Sn; 1 <= n <= 32",
        "aarch64_instruction": "FCVTZU Sd,Sn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_n_s64_f64",
        "intrinsic": "int64x1_t vcvt_n_s64_f64(float64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_s64_f64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "FCVTZS Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_n_s64_f64",
        "intrinsic": "int64x2_t vcvtq_n_s64_f64(float64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_s64_f64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "FCVTZS Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_n_u64_f64",
        "intrinsic": "uint64x1_t vcvt_n_u64_f64(float64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_u64_f64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "FCVTZU Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_n_u64_f64",
        "intrinsic": "uint64x2_t vcvtq_n_u64_f64(float64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_u64_f64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "FCVTZU Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtd_n_s64_f64",
        "intrinsic": "int64_t vcvtd_n_s64_f64(float64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtd_n_s64_f64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "FCVTZS Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtd_n_u64_f64",
        "intrinsic": "uint64_t vcvtd_n_u64_f64(float64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtd_n_u64_f64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "FCVTZU Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_f32_s32",
        "intrinsic": "float32x2_t vcvt_f32_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f32_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "SCVTF Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtq_f32_s32",
        "intrinsic": "float32x4_t vcvtq_f32_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_f32_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SCVTF Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvt_f32_u32",
        "intrinsic": "float32x2_t vcvt_f32_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f32_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "UCVTF Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtq_f32_u32",
        "intrinsic": "float32x4_t vcvtq_f32_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_f32_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "UCVTF Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvts_f32_s32",
        "intrinsic": "float32_t vcvts_f32_s32(int32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvts_f32_s32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "SCVTF Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvts_f32_u32",
        "intrinsic": "float32_t vcvts_f32_u32(uint32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvts_f32_u32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "UCVTF Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_f64_s64",
        "intrinsic": "float64x1_t vcvt_f64_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f64_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "SCVTF Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_f64_s64",
        "intrinsic": "float64x2_t vcvtq_f64_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_f64_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "SCVTF Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_f64_u64",
        "intrinsic": "float64x1_t vcvt_f64_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f64_u64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "UCVTF Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_f64_u64",
        "intrinsic": "float64x2_t vcvtq_f64_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_f64_u64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "UCVTF Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtd_f64_s64",
        "intrinsic": "float64_t vcvtd_f64_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtd_f64_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "SCVTF Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtd_f64_u64",
        "intrinsic": "float64_t vcvtd_f64_u64(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtd_f64_u64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "UCVTF Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_n_f32_s32",
        "intrinsic": "float32x2_t vcvt_n_f32_s32(int32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_f32_s32",
        "argument_preparation": "a -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "SCVTF Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtq_n_f32_s32",
        "intrinsic": "float32x4_t vcvtq_n_f32_s32(int32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_f32_s32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "SCVTF Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvt_n_f32_u32",
        "intrinsic": "float32x2_t vcvt_n_f32_u32(uint32x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_f32_u32",
        "argument_preparation": "a -> Vn.2S; 1 <= n <= 32",
        "aarch64_instruction": "UCVTF Vd.2S,Vn.2S,#n",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvtq_n_f32_u32",
        "intrinsic": "float32x4_t vcvtq_n_f32_u32(uint32x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_f32_u32",
        "argument_preparation": "a -> Vn.4S; 1 <= n <= 32",
        "aarch64_instruction": "UCVTF Vd.4S,Vn.4S,#n",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvts_n_f32_s32",
        "intrinsic": "float32_t vcvts_n_f32_s32(int32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvts_n_f32_s32",
        "argument_preparation": "a -> Sn; 1 <= n <= 32",
        "aarch64_instruction": "SCVTF Sd,Sn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvts_n_f32_u32",
        "intrinsic": "float32_t vcvts_n_f32_u32(uint32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvts_n_f32_u32",
        "argument_preparation": "a -> Sn; 1 <= n <= 32",
        "aarch64_instruction": "UCVTF Sd,Sn,#n",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_n_f64_s64",
        "intrinsic": "float64x1_t vcvt_n_f64_s64(int64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_f64_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SCVTF Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_n_f64_s64",
        "intrinsic": "float64x2_t vcvtq_n_f64_s64(int64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_f64_s64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "SCVTF Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_n_f64_u64",
        "intrinsic": "float64x1_t vcvt_n_f64_u64(uint64x1_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_f64_u64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "UCVTF Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_n_f64_u64",
        "intrinsic": "float64x2_t vcvtq_n_f64_u64(uint64x2_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_f64_u64",
        "argument_preparation": "a -> Vn.2D; 1 <= n <= 64",
        "aarch64_instruction": "UCVTF Vd.2D,Vn.2D,#n",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtd_n_f64_s64",
        "intrinsic": "float64_t vcvtd_n_f64_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtd_n_f64_s64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "SCVTF Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtd_n_f64_u64",
        "intrinsic": "float64_t vcvtd_n_f64_u64(uint64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtd_n_f64_u64",
        "argument_preparation": "a -> Dn; 1 <= n <= 64",
        "aarch64_instruction": "UCVTF Dd,Dn,#n",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_f16_f32",
        "intrinsic": "float16x4_t vcvt_f16_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f16_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTN Vd.4H,Vn.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvt_high_f16_f32",
        "intrinsic": "float16x8_t vcvt_high_f16_f32(float16x4_t r, float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_high_f16_f32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S",
        "aarch64_instruction": "FCVTN2 Vd.8H,Vn.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_f32_f64",
        "intrinsic": "float32x2_t vcvt_f32_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f32_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTN Vd.2S,Vn.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_high_f32_f64",
        "intrinsic": "float32x4_t vcvt_high_f32_f64(float32x2_t r, float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_high_f32_f64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D",
        "aarch64_instruction": "FCVTN2 Vd.4S,Vn.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_f32_f16",
        "intrinsic": "float32x4_t vcvt_f32_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f32_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTL Vd.4S,Vn.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcvt_high_f32_f16",
        "intrinsic": "float32x4_t vcvt_high_f32_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_high_f32_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTL2 Vd.4S,Vn.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_f64_f32",
        "intrinsic": "float64x2_t vcvt_f64_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f64_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FCVTL Vd.2D,Vn.2S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_high_f64_f32",
        "intrinsic": "float64x2_t vcvt_high_f64_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_high_f64_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FCVTL2 Vd.2D,Vn.4S",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtx_f32_f64",
        "intrinsic": "float32x2_t vcvtx_f32_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtx_f32_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FCVTXN Vd.2S,Vn.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtxd_f32_f64",
        "intrinsic": "float32_t vcvtxd_f32_f64(float64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtxd_f32_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FCVTXN Sd,Dn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtx_high_f32_f64",
        "intrinsic": "float32x4_t vcvtx_high_f32_f64(float32x2_t r, float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtx_high_f32_f64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D",
        "aarch64_instruction": "FCVTXN2 Vd.4S,Vn.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s16_s8",
        "intrinsic": "int16x4_t vreinterpret_s16_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_s8",
        "intrinsic": "int32x2_t vreinterpret_s32_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_s8",
        "intrinsic": "float32x2_t vreinterpret_f32_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_s8",
        "intrinsic": "uint8x8_t vreinterpret_u8_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_s8",
        "intrinsic": "uint16x4_t vreinterpret_u16_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_s8",
        "intrinsic": "uint32x2_t vreinterpret_u32_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_s8",
        "intrinsic": "poly8x8_t vreinterpret_p8_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_s8",
        "intrinsic": "poly16x4_t vreinterpret_p16_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_s8",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_s8",
        "intrinsic": "uint64x1_t vreinterpret_u64_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_s8",
        "intrinsic": "int64x1_t vreinterpret_s64_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_s8",
        "intrinsic": "float64x1_t vreinterpret_f64_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_s8",
        "intrinsic": "poly64x1_t vreinterpret_p64_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_s8",
        "intrinsic": "float16x4_t vreinterpret_f16_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_s16",
        "intrinsic": "int8x8_t vreinterpret_s8_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_s16",
        "intrinsic": "int32x2_t vreinterpret_s32_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_s16",
        "intrinsic": "float32x2_t vreinterpret_f32_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_s16",
        "intrinsic": "uint8x8_t vreinterpret_u8_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_s16",
        "intrinsic": "uint16x4_t vreinterpret_u16_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_s16",
        "intrinsic": "uint32x2_t vreinterpret_u32_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_s16",
        "intrinsic": "poly8x8_t vreinterpret_p8_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_s16",
        "intrinsic": "poly16x4_t vreinterpret_p16_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_s16",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_s16",
        "intrinsic": "uint64x1_t vreinterpret_u64_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_s16",
        "intrinsic": "int64x1_t vreinterpret_s64_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_s16",
        "intrinsic": "float64x1_t vreinterpret_f64_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_s16",
        "intrinsic": "poly64x1_t vreinterpret_p64_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_s16",
        "intrinsic": "float16x4_t vreinterpret_f16_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_s32",
        "intrinsic": "int8x8_t vreinterpret_s8_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_s32",
        "intrinsic": "int16x4_t vreinterpret_s16_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_s32",
        "intrinsic": "float32x2_t vreinterpret_f32_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_s32",
        "intrinsic": "uint8x8_t vreinterpret_u8_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_s32",
        "intrinsic": "uint16x4_t vreinterpret_u16_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_s32",
        "intrinsic": "uint32x2_t vreinterpret_u32_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_s32",
        "intrinsic": "poly8x8_t vreinterpret_p8_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_s32",
        "intrinsic": "poly16x4_t vreinterpret_p16_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_s32",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_s32",
        "intrinsic": "uint64x1_t vreinterpret_u64_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_s32",
        "intrinsic": "int64x1_t vreinterpret_s64_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_s32",
        "intrinsic": "float64x1_t vreinterpret_f64_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_s32",
        "intrinsic": "poly64x1_t vreinterpret_p64_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_s32",
        "intrinsic": "float16x4_t vreinterpret_f16_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_f32",
        "intrinsic": "int8x8_t vreinterpret_s8_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_f32",
        "intrinsic": "int16x4_t vreinterpret_s16_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_f32",
        "intrinsic": "int32x2_t vreinterpret_s32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_f32",
        "intrinsic": "uint8x8_t vreinterpret_u8_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_f32",
        "intrinsic": "uint16x4_t vreinterpret_u16_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_f32",
        "intrinsic": "uint32x2_t vreinterpret_u32_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_f32",
        "intrinsic": "poly8x8_t vreinterpret_p8_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_f32",
        "intrinsic": "poly16x4_t vreinterpret_p16_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_f32",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_f32",
        "intrinsic": "uint64x1_t vreinterpret_u64_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_f32",
        "intrinsic": "int64x1_t vreinterpret_s64_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_f32",
        "intrinsic": "float64x1_t vreinterpret_f64_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_f32",
        "intrinsic": "poly64x1_t vreinterpret_p64_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_p64_f64",
        "intrinsic": "poly64x1_t vreinterpret_p64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_f16_f32",
        "intrinsic": "float16x4_t vreinterpret_f16_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_u8",
        "intrinsic": "int8x8_t vreinterpret_s8_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_u8",
        "intrinsic": "int16x4_t vreinterpret_s16_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_u8",
        "intrinsic": "int32x2_t vreinterpret_s32_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_u8",
        "intrinsic": "float32x2_t vreinterpret_f32_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_u8",
        "intrinsic": "uint16x4_t vreinterpret_u16_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_u8",
        "intrinsic": "uint32x2_t vreinterpret_u32_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_u8",
        "intrinsic": "poly8x8_t vreinterpret_p8_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_u8",
        "intrinsic": "poly16x4_t vreinterpret_p16_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_u8",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_u8",
        "intrinsic": "uint64x1_t vreinterpret_u64_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_u8",
        "intrinsic": "int64x1_t vreinterpret_s64_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_u8",
        "intrinsic": "float64x1_t vreinterpret_f64_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_u8",
        "intrinsic": "poly64x1_t vreinterpret_p64_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_u8",
        "intrinsic": "float16x4_t vreinterpret_f16_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_u16",
        "intrinsic": "int8x8_t vreinterpret_s8_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_u16",
        "intrinsic": "int16x4_t vreinterpret_s16_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_u16",
        "intrinsic": "int32x2_t vreinterpret_s32_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_u16",
        "intrinsic": "float32x2_t vreinterpret_f32_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_u16",
        "intrinsic": "uint8x8_t vreinterpret_u8_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_u16",
        "intrinsic": "uint32x2_t vreinterpret_u32_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_u16",
        "intrinsic": "poly8x8_t vreinterpret_p8_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_u16",
        "intrinsic": "poly16x4_t vreinterpret_p16_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_u16",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_u16",
        "intrinsic": "uint64x1_t vreinterpret_u64_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_u16",
        "intrinsic": "int64x1_t vreinterpret_s64_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_u16",
        "intrinsic": "float64x1_t vreinterpret_f64_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_u16",
        "intrinsic": "poly64x1_t vreinterpret_p64_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_u16",
        "intrinsic": "float16x4_t vreinterpret_f16_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_u32",
        "intrinsic": "int8x8_t vreinterpret_s8_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_u32",
        "intrinsic": "int16x4_t vreinterpret_s16_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_u32",
        "intrinsic": "int32x2_t vreinterpret_s32_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_u32",
        "intrinsic": "float32x2_t vreinterpret_f32_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_u32",
        "intrinsic": "uint8x8_t vreinterpret_u8_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_u32",
        "intrinsic": "uint16x4_t vreinterpret_u16_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_u32",
        "intrinsic": "poly8x8_t vreinterpret_p8_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_u32",
        "intrinsic": "poly16x4_t vreinterpret_p16_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_u32",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_u32",
        "intrinsic": "uint64x1_t vreinterpret_u64_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_u32",
        "intrinsic": "int64x1_t vreinterpret_s64_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_u32",
        "intrinsic": "float64x1_t vreinterpret_f64_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_u32",
        "intrinsic": "poly64x1_t vreinterpret_p64_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_u32",
        "intrinsic": "float16x4_t vreinterpret_f16_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_p8",
        "intrinsic": "int8x8_t vreinterpret_s8_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_p8",
        "intrinsic": "int16x4_t vreinterpret_s16_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_p8",
        "intrinsic": "int32x2_t vreinterpret_s32_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_p8",
        "intrinsic": "float32x2_t vreinterpret_f32_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_p8",
        "intrinsic": "uint8x8_t vreinterpret_u8_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_p8",
        "intrinsic": "uint16x4_t vreinterpret_u16_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_p8",
        "intrinsic": "uint32x2_t vreinterpret_u32_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_p8",
        "intrinsic": "poly16x4_t vreinterpret_p16_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u64_p8",
        "intrinsic": "uint64x1_t vreinterpret_u64_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_p8",
        "intrinsic": "int64x1_t vreinterpret_s64_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_p8",
        "intrinsic": "float64x1_t vreinterpret_f64_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_p8",
        "intrinsic": "poly64x1_t vreinterpret_p64_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_p8",
        "intrinsic": "float16x4_t vreinterpret_f16_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_mf8",
        "intrinsic": "int8x8_t vreinterpret_s8_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s16_mf8",
        "intrinsic": "int16x4_t vreinterpret_s16_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s32_mf8",
        "intrinsic": "int32x2_t vreinterpret_s32_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_f32_mf8",
        "intrinsic": "float32x2_t vreinterpret_f32_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u8_mf8",
        "intrinsic": "uint8x8_t vreinterpret_u8_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u16_mf8",
        "intrinsic": "uint16x4_t vreinterpret_u16_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u32_mf8",
        "intrinsic": "uint32x2_t vreinterpret_u32_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p16_mf8",
        "intrinsic": "poly16x4_t vreinterpret_p16_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_mf8",
        "intrinsic": "uint64x1_t vreinterpret_u64_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s64_mf8",
        "intrinsic": "int64x1_t vreinterpret_s64_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_f64_mf8",
        "intrinsic": "float64x1_t vreinterpret_f64_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_mf8",
        "intrinsic": "poly64x1_t vreinterpret_p64_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_f16_mf8",
        "intrinsic": "float16x4_t vreinterpret_f16_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s8_p16",
        "intrinsic": "int8x8_t vreinterpret_s8_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_p16",
        "intrinsic": "int16x4_t vreinterpret_s16_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_p16",
        "intrinsic": "int32x2_t vreinterpret_s32_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_p16",
        "intrinsic": "float32x2_t vreinterpret_f32_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_p16",
        "intrinsic": "uint8x8_t vreinterpret_u8_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_p16",
        "intrinsic": "uint16x4_t vreinterpret_u16_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_p16",
        "intrinsic": "uint32x2_t vreinterpret_u32_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_p16",
        "intrinsic": "poly8x8_t vreinterpret_p8_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_p16",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_p16",
        "intrinsic": "uint64x1_t vreinterpret_u64_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_p16",
        "intrinsic": "int64x1_t vreinterpret_s64_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_p16",
        "intrinsic": "float64x1_t vreinterpret_f64_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_p16",
        "intrinsic": "poly64x1_t vreinterpret_p64_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_p16",
        "intrinsic": "float16x4_t vreinterpret_f16_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_u64",
        "intrinsic": "int8x8_t vreinterpret_s8_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_u64",
        "intrinsic": "int16x4_t vreinterpret_s16_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_u64",
        "intrinsic": "int32x2_t vreinterpret_s32_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_u64",
        "intrinsic": "float32x2_t vreinterpret_f32_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_u64",
        "intrinsic": "uint8x8_t vreinterpret_u8_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_u64",
        "intrinsic": "uint16x4_t vreinterpret_u16_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_u64",
        "intrinsic": "uint32x2_t vreinterpret_u32_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_u64",
        "intrinsic": "poly8x8_t vreinterpret_p8_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_u64",
        "intrinsic": "poly16x4_t vreinterpret_p16_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_u64",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s64_u64",
        "intrinsic": "int64x1_t vreinterpret_s64_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_u64",
        "intrinsic": "float64x1_t vreinterpret_f64_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_u64",
        "intrinsic": "poly64x1_t vreinterpret_p64_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_u64",
        "intrinsic": "float16x4_t vreinterpret_f16_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_s64",
        "intrinsic": "int8x8_t vreinterpret_s8_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_s64",
        "intrinsic": "int16x4_t vreinterpret_s16_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_s64",
        "intrinsic": "int32x2_t vreinterpret_s32_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_s64",
        "intrinsic": "float32x2_t vreinterpret_f32_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_s64",
        "intrinsic": "uint8x8_t vreinterpret_u8_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_s64",
        "intrinsic": "uint16x4_t vreinterpret_u16_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_s64",
        "intrinsic": "uint32x2_t vreinterpret_u32_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_s64",
        "intrinsic": "poly8x8_t vreinterpret_p8_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_s64",
        "intrinsic": "poly16x4_t vreinterpret_p16_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_s64",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_s64",
        "intrinsic": "uint64x1_t vreinterpret_u64_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_s64",
        "intrinsic": "float64x1_t vreinterpret_f64_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_p64",
        "intrinsic": "uint64x1_t vreinterpret_u64_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f16_s64",
        "intrinsic": "float16x4_t vreinterpret_f16_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s8_f16",
        "intrinsic": "int8x8_t vreinterpret_s8_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s16_f16",
        "intrinsic": "int16x4_t vreinterpret_s16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s32_f16",
        "intrinsic": "int32x2_t vreinterpret_s32_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f32_f16",
        "intrinsic": "float32x2_t vreinterpret_f32_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u8_f16",
        "intrinsic": "uint8x8_t vreinterpret_u8_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u16_f16",
        "intrinsic": "uint16x4_t vreinterpret_u16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_u32_f16",
        "intrinsic": "uint32x2_t vreinterpret_u32_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p8_f16",
        "intrinsic": "poly8x8_t vreinterpret_p8_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_p16_f16",
        "intrinsic": "poly16x4_t vreinterpret_p16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_mf8_f16",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_f16",
        "intrinsic": "uint64x1_t vreinterpret_u64_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_s64_f16",
        "intrinsic": "int64x1_t vreinterpret_s64_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpret_f64_f16",
        "intrinsic": "float64x1_t vreinterpret_f64_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_f16",
        "intrinsic": "poly64x1_t vreinterpret_p64_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_f16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s16_s8",
        "intrinsic": "int16x8_t vreinterpretq_s16_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_s8",
        "intrinsic": "int32x4_t vreinterpretq_s32_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_s8",
        "intrinsic": "float32x4_t vreinterpretq_f32_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_s8",
        "intrinsic": "uint8x16_t vreinterpretq_u8_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_s8",
        "intrinsic": "uint16x8_t vreinterpretq_u16_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_s8",
        "intrinsic": "uint32x4_t vreinterpretq_u32_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_s8",
        "intrinsic": "poly8x16_t vreinterpretq_p8_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_s8",
        "intrinsic": "poly16x8_t vreinterpretq_p16_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_s8",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_s8",
        "intrinsic": "uint64x2_t vreinterpretq_u64_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_s8",
        "intrinsic": "int64x2_t vreinterpretq_s64_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_s8",
        "intrinsic": "float64x2_t vreinterpretq_f64_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_s8",
        "intrinsic": "poly64x2_t vreinterpretq_p64_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_s8",
        "intrinsic": "poly128_t vreinterpretq_p128_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_s8",
        "intrinsic": "float16x8_t vreinterpretq_f16_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_s16",
        "intrinsic": "int8x16_t vreinterpretq_s8_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_s16",
        "intrinsic": "int32x4_t vreinterpretq_s32_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_s16",
        "intrinsic": "float32x4_t vreinterpretq_f32_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_s16",
        "intrinsic": "uint8x16_t vreinterpretq_u8_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_s16",
        "intrinsic": "uint16x8_t vreinterpretq_u16_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_s16",
        "intrinsic": "uint32x4_t vreinterpretq_u32_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_s16",
        "intrinsic": "poly8x16_t vreinterpretq_p8_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_s16",
        "intrinsic": "poly16x8_t vreinterpretq_p16_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_s16",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_s16",
        "intrinsic": "uint64x2_t vreinterpretq_u64_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_s16",
        "intrinsic": "int64x2_t vreinterpretq_s64_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_s16",
        "intrinsic": "float64x2_t vreinterpretq_f64_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_s16",
        "intrinsic": "poly64x2_t vreinterpretq_p64_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_s16",
        "intrinsic": "poly128_t vreinterpretq_p128_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_s16",
        "intrinsic": "float16x8_t vreinterpretq_f16_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_s32",
        "intrinsic": "int8x16_t vreinterpretq_s8_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_s32",
        "intrinsic": "int16x8_t vreinterpretq_s16_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_s32",
        "intrinsic": "float32x4_t vreinterpretq_f32_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_s32",
        "intrinsic": "uint8x16_t vreinterpretq_u8_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_s32",
        "intrinsic": "uint16x8_t vreinterpretq_u16_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_s32",
        "intrinsic": "uint32x4_t vreinterpretq_u32_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_s32",
        "intrinsic": "poly8x16_t vreinterpretq_p8_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_s32",
        "intrinsic": "poly16x8_t vreinterpretq_p16_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_s32",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_s32",
        "intrinsic": "uint64x2_t vreinterpretq_u64_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_s32",
        "intrinsic": "int64x2_t vreinterpretq_s64_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_s32",
        "intrinsic": "float64x2_t vreinterpretq_f64_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_s32",
        "intrinsic": "poly64x2_t vreinterpretq_p64_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_s32",
        "intrinsic": "poly128_t vreinterpretq_p128_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_s32",
        "intrinsic": "float16x8_t vreinterpretq_f16_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_f32",
        "intrinsic": "int8x16_t vreinterpretq_s8_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_f32",
        "intrinsic": "int16x8_t vreinterpretq_s16_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_f32",
        "intrinsic": "int32x4_t vreinterpretq_s32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_f32",
        "intrinsic": "uint8x16_t vreinterpretq_u8_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_f32",
        "intrinsic": "uint16x8_t vreinterpretq_u16_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_f32",
        "intrinsic": "uint32x4_t vreinterpretq_u32_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_f32",
        "intrinsic": "poly8x16_t vreinterpretq_p8_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_f32",
        "intrinsic": "poly16x8_t vreinterpretq_p16_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_f32",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_f32",
        "intrinsic": "uint64x2_t vreinterpretq_u64_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_f32",
        "intrinsic": "int64x2_t vreinterpretq_s64_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_f32",
        "intrinsic": "float64x2_t vreinterpretq_f64_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_f32",
        "intrinsic": "poly64x2_t vreinterpretq_p64_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_f32",
        "intrinsic": "poly128_t vreinterpretq_p128_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p64_f64",
        "intrinsic": "poly64x2_t vreinterpretq_p64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p128_f64",
        "intrinsic": "poly128_t vreinterpretq_p128_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_f64",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_f16_f32",
        "intrinsic": "float16x8_t vreinterpretq_f16_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_u8",
        "intrinsic": "int8x16_t vreinterpretq_s8_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_u8",
        "intrinsic": "int16x8_t vreinterpretq_s16_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_u8",
        "intrinsic": "int32x4_t vreinterpretq_s32_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_u8",
        "intrinsic": "float32x4_t vreinterpretq_f32_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_u8",
        "intrinsic": "uint16x8_t vreinterpretq_u16_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_u8",
        "intrinsic": "uint32x4_t vreinterpretq_u32_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_u8",
        "intrinsic": "poly8x16_t vreinterpretq_p8_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_u8",
        "intrinsic": "poly16x8_t vreinterpretq_p16_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_u8",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_u8",
        "intrinsic": "uint64x2_t vreinterpretq_u64_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_u8",
        "intrinsic": "int64x2_t vreinterpretq_s64_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_u8",
        "intrinsic": "float64x2_t vreinterpretq_f64_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_u8",
        "intrinsic": "poly64x2_t vreinterpretq_p64_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_u8",
        "intrinsic": "poly128_t vreinterpretq_p128_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_u8",
        "intrinsic": "float16x8_t vreinterpretq_f16_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_u16",
        "intrinsic": "int8x16_t vreinterpretq_s8_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_u16",
        "intrinsic": "int16x8_t vreinterpretq_s16_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_u16",
        "intrinsic": "int32x4_t vreinterpretq_s32_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_u16",
        "intrinsic": "float32x4_t vreinterpretq_f32_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_u16",
        "intrinsic": "uint8x16_t vreinterpretq_u8_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_u16",
        "intrinsic": "uint32x4_t vreinterpretq_u32_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_u16",
        "intrinsic": "poly8x16_t vreinterpretq_p8_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_u16",
        "intrinsic": "poly16x8_t vreinterpretq_p16_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_u16",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_u16",
        "intrinsic": "uint64x2_t vreinterpretq_u64_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_u16",
        "intrinsic": "int64x2_t vreinterpretq_s64_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_u16",
        "intrinsic": "float64x2_t vreinterpretq_f64_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_u16",
        "intrinsic": "poly64x2_t vreinterpretq_p64_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_u16",
        "intrinsic": "poly128_t vreinterpretq_p128_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_u16",
        "intrinsic": "float16x8_t vreinterpretq_f16_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_u32",
        "intrinsic": "int8x16_t vreinterpretq_s8_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_u32",
        "intrinsic": "int16x8_t vreinterpretq_s16_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_u32",
        "intrinsic": "int32x4_t vreinterpretq_s32_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_u32",
        "intrinsic": "float32x4_t vreinterpretq_f32_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_u32",
        "intrinsic": "uint8x16_t vreinterpretq_u8_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_u32",
        "intrinsic": "uint16x8_t vreinterpretq_u16_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_u32",
        "intrinsic": "poly8x16_t vreinterpretq_p8_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_u32",
        "intrinsic": "poly16x8_t vreinterpretq_p16_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_u32",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_u32",
        "intrinsic": "uint64x2_t vreinterpretq_u64_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_u32",
        "intrinsic": "int64x2_t vreinterpretq_s64_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_u32",
        "intrinsic": "float64x2_t vreinterpretq_f64_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_u32",
        "intrinsic": "poly64x2_t vreinterpretq_p64_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_u32",
        "intrinsic": "poly128_t vreinterpretq_p128_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_u32",
        "intrinsic": "float16x8_t vreinterpretq_f16_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_p8",
        "intrinsic": "int8x16_t vreinterpretq_s8_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_p8",
        "intrinsic": "int16x8_t vreinterpretq_s16_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_p8",
        "intrinsic": "int32x4_t vreinterpretq_s32_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_p8",
        "intrinsic": "float32x4_t vreinterpretq_f32_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_p8",
        "intrinsic": "uint8x16_t vreinterpretq_u8_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_p8",
        "intrinsic": "uint16x8_t vreinterpretq_u16_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_p8",
        "intrinsic": "uint32x4_t vreinterpretq_u32_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_p8",
        "intrinsic": "poly16x8_t vreinterpretq_p16_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u64_p8",
        "intrinsic": "uint64x2_t vreinterpretq_u64_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_p8",
        "intrinsic": "int64x2_t vreinterpretq_s64_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_p8",
        "intrinsic": "float64x2_t vreinterpretq_f64_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_p8",
        "intrinsic": "poly64x2_t vreinterpretq_p64_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_p8",
        "intrinsic": "poly128_t vreinterpretq_p128_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_p8",
        "intrinsic": "float16x8_t vreinterpretq_f16_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_mf8",
        "intrinsic": "int8x16_t vreinterpretq_s8_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s16_mf8",
        "intrinsic": "int16x8_t vreinterpretq_s16_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s32_mf8",
        "intrinsic": "int32x4_t vreinterpretq_s32_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_f32_mf8",
        "intrinsic": "float32x4_t vreinterpretq_f32_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u8_mf8",
        "intrinsic": "uint8x16_t vreinterpretq_u8_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u16_mf8",
        "intrinsic": "uint16x8_t vreinterpretq_u16_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u32_mf8",
        "intrinsic": "uint32x4_t vreinterpretq_u32_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p16_mf8",
        "intrinsic": "poly16x8_t vreinterpretq_p16_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_mf8",
        "intrinsic": "uint64x2_t vreinterpretq_u64_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s64_mf8",
        "intrinsic": "int64x2_t vreinterpretq_s64_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_f64_mf8",
        "intrinsic": "float64x2_t vreinterpretq_f64_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_mf8",
        "intrinsic": "poly64x2_t vreinterpretq_p64_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p128_mf8",
        "intrinsic": "poly128_t vreinterpretq_p128_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_f16_mf8",
        "intrinsic": "float16x8_t vreinterpretq_f16_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s8_p16",
        "intrinsic": "int8x16_t vreinterpretq_s8_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_p16",
        "intrinsic": "int16x8_t vreinterpretq_s16_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_p16",
        "intrinsic": "int32x4_t vreinterpretq_s32_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_p16",
        "intrinsic": "float32x4_t vreinterpretq_f32_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_p16",
        "intrinsic": "uint8x16_t vreinterpretq_u8_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_p16",
        "intrinsic": "uint16x8_t vreinterpretq_u16_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_p16",
        "intrinsic": "uint32x4_t vreinterpretq_u32_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_p16",
        "intrinsic": "poly8x16_t vreinterpretq_p8_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_p16",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_p16",
        "intrinsic": "uint64x2_t vreinterpretq_u64_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_p16",
        "intrinsic": "int64x2_t vreinterpretq_s64_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_p16",
        "intrinsic": "float64x2_t vreinterpretq_f64_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_p16",
        "intrinsic": "poly64x2_t vreinterpretq_p64_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_p16",
        "intrinsic": "poly128_t vreinterpretq_p128_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_p16",
        "intrinsic": "float16x8_t vreinterpretq_f16_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_u64",
        "intrinsic": "int8x16_t vreinterpretq_s8_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_u64",
        "intrinsic": "int16x8_t vreinterpretq_s16_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_u64",
        "intrinsic": "int32x4_t vreinterpretq_s32_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_u64",
        "intrinsic": "float32x4_t vreinterpretq_f32_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_u64",
        "intrinsic": "uint8x16_t vreinterpretq_u8_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_u64",
        "intrinsic": "uint16x8_t vreinterpretq_u16_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_u64",
        "intrinsic": "uint32x4_t vreinterpretq_u32_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_u64",
        "intrinsic": "poly8x16_t vreinterpretq_p8_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_u64",
        "intrinsic": "poly16x8_t vreinterpretq_p16_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_u64",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s64_u64",
        "intrinsic": "int64x2_t vreinterpretq_s64_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_u64",
        "intrinsic": "float64x2_t vreinterpretq_f64_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_s64",
        "intrinsic": "float64x2_t vreinterpretq_f64_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_s64",
        "intrinsic": "poly64x2_t vreinterpretq_p64_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_s64",
        "intrinsic": "poly128_t vreinterpretq_p128_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_s64",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p64_u64",
        "intrinsic": "poly64x2_t vreinterpretq_p64_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_u64",
        "intrinsic": "poly128_t vreinterpretq_p128_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_u64",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_u64",
        "intrinsic": "float16x8_t vreinterpretq_f16_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_s64",
        "intrinsic": "int8x16_t vreinterpretq_s8_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_s64",
        "intrinsic": "int16x8_t vreinterpretq_s16_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_s64",
        "intrinsic": "int32x4_t vreinterpretq_s32_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_s64",
        "intrinsic": "float32x4_t vreinterpretq_f32_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_s64",
        "intrinsic": "uint8x16_t vreinterpretq_u8_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_s64",
        "intrinsic": "uint16x8_t vreinterpretq_u16_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_s64",
        "intrinsic": "uint32x4_t vreinterpretq_u32_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_s64",
        "intrinsic": "poly8x16_t vreinterpretq_p8_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_s64",
        "intrinsic": "poly16x8_t vreinterpretq_p16_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_s64",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_s64",
        "intrinsic": "uint64x2_t vreinterpretq_u64_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u64_p64",
        "intrinsic": "uint64x2_t vreinterpretq_u64_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f16_s64",
        "intrinsic": "float16x8_t vreinterpretq_f16_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s8_f16",
        "intrinsic": "int8x16_t vreinterpretq_s8_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s16_f16",
        "intrinsic": "int16x8_t vreinterpretq_s16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s32_f16",
        "intrinsic": "int32x4_t vreinterpretq_s32_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f32_f16",
        "intrinsic": "float32x4_t vreinterpretq_f32_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u8_f16",
        "intrinsic": "uint8x16_t vreinterpretq_u8_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u16_f16",
        "intrinsic": "uint16x8_t vreinterpretq_u16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_u32_f16",
        "intrinsic": "uint32x4_t vreinterpretq_u32_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p8_f16",
        "intrinsic": "poly8x16_t vreinterpretq_p8_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_p16_f16",
        "intrinsic": "poly16x8_t vreinterpretq_p16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_f16",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_f16",
        "intrinsic": "uint64x2_t vreinterpretq_u64_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_s64_f16",
        "intrinsic": "int64x2_t vreinterpretq_s64_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vreinterpretq_f64_f16",
        "intrinsic": "float64x2_t vreinterpretq_f64_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_f16",
        "intrinsic": "poly64x2_t vreinterpretq_p64_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_f16",
        "intrinsic": "poly128_t vreinterpretq_p128_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_f16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_s8_f64",
        "intrinsic": "int8x8_t vreinterpret_s8_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s16_f64",
        "intrinsic": "int16x4_t vreinterpret_s16_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s32_f64",
        "intrinsic": "int32x2_t vreinterpret_s32_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u8_f64",
        "intrinsic": "uint8x8_t vreinterpret_u8_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u16_f64",
        "intrinsic": "uint16x4_t vreinterpret_u16_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u32_f64",
        "intrinsic": "uint32x2_t vreinterpret_u32_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p8_f64",
        "intrinsic": "poly8x8_t vreinterpret_p8_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p16_f64",
        "intrinsic": "poly16x4_t vreinterpret_p16_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_mf8_f64",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_f64",
        "intrinsic": "uint64x1_t vreinterpret_u64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s64_f64",
        "intrinsic": "int64x1_t vreinterpret_s64_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_f16_f64",
        "intrinsic": "float16x4_t vreinterpret_f16_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_f32_f64",
        "intrinsic": "float32x2_t vreinterpret_f32_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s8_f64",
        "intrinsic": "int8x16_t vreinterpretq_s8_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s16_f64",
        "intrinsic": "int16x8_t vreinterpretq_s16_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s32_f64",
        "intrinsic": "int32x4_t vreinterpretq_s32_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u8_f64",
        "intrinsic": "uint8x16_t vreinterpretq_u8_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u16_f64",
        "intrinsic": "uint16x8_t vreinterpretq_u16_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u32_f64",
        "intrinsic": "uint32x4_t vreinterpretq_u32_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p8_f64",
        "intrinsic": "poly8x16_t vreinterpretq_p8_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p16_f64",
        "intrinsic": "poly16x8_t vreinterpretq_p16_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_mf8_f64",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_f64",
        "intrinsic": "uint64x2_t vreinterpretq_u64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s64_f64",
        "intrinsic": "int64x2_t vreinterpretq_s64_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_f16_f64",
        "intrinsic": "float16x8_t vreinterpretq_f16_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_f32_f64",
        "intrinsic": "float32x4_t vreinterpretq_f32_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_s8_p64",
        "intrinsic": "int8x8_t vreinterpret_s8_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_s16_p64",
        "intrinsic": "int16x4_t vreinterpret_s16_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_s32_p64",
        "intrinsic": "int32x2_t vreinterpret_s32_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_u8_p64",
        "intrinsic": "uint8x8_t vreinterpret_u8_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_u16_p64",
        "intrinsic": "uint16x4_t vreinterpret_u16_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_u32_p64",
        "intrinsic": "uint32x2_t vreinterpret_u32_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_p8_p64",
        "intrinsic": "poly8x8_t vreinterpret_p8_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_p16_p64",
        "intrinsic": "poly16x4_t vreinterpret_p16_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_mf8_p64",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_s64_p64",
        "intrinsic": "int64x1_t vreinterpret_s64_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f64_p64",
        "intrinsic": "float64x1_t vreinterpret_f64_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_f16_p64",
        "intrinsic": "float16x4_t vreinterpret_f16_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f16_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s8_p64",
        "intrinsic": "int8x16_t vreinterpretq_s8_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s16_p64",
        "intrinsic": "int16x8_t vreinterpretq_s16_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s32_p64",
        "intrinsic": "int32x4_t vreinterpretq_s32_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u8_p64",
        "intrinsic": "uint8x16_t vreinterpretq_u8_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u16_p64",
        "intrinsic": "uint16x8_t vreinterpretq_u16_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u32_p64",
        "intrinsic": "uint32x4_t vreinterpretq_u32_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p8_p64",
        "intrinsic": "poly8x16_t vreinterpretq_p8_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p16_p64",
        "intrinsic": "poly16x8_t vreinterpretq_p16_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_p64",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_s64_p64",
        "intrinsic": "int64x2_t vreinterpretq_s64_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f64_p64",
        "intrinsic": "float64x2_t vreinterpretq_f64_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_f16_p64",
        "intrinsic": "float16x8_t vreinterpretq_f16_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s8_p128",
        "intrinsic": "int8x16_t vreinterpretq_s8_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s16_p128",
        "intrinsic": "int16x8_t vreinterpretq_s16_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s32_p128",
        "intrinsic": "int32x4_t vreinterpretq_s32_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u8_p128",
        "intrinsic": "uint8x16_t vreinterpretq_u8_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u16_p128",
        "intrinsic": "uint16x8_t vreinterpretq_u16_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u32_p128",
        "intrinsic": "uint32x4_t vreinterpretq_u32_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p8_p128",
        "intrinsic": "poly8x16_t vreinterpretq_p8_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p16_p128",
        "intrinsic": "poly16x8_t vreinterpretq_p16_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_p128",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_p128",
        "intrinsic": "uint64x2_t vreinterpretq_u64_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s64_p128",
        "intrinsic": "int64x2_t vreinterpretq_s64_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f64_p128",
        "intrinsic": "float64x2_t vreinterpretq_f64_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_f16_p128",
        "intrinsic": "float16x8_t vreinterpretq_f16_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f16_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_mf8_u8",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_mf8_u8",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u8_mf8",
        "intrinsic": "uint8x8_t vreinterpret_u8_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u8_mf8",
        "intrinsic": "uint8x16_t vreinterpretq_u8_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      }
    ],
    "Move": [
      {
        "name": "vmovn_s16",
        "intrinsic": "int8x8_t vmovn_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "XTN Vd.8B,Vn.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_s32",
        "intrinsic": "int16x4_t vmovn_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "XTN Vd.4H,Vn.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_s64",
        "intrinsic": "int32x2_t vmovn_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "XTN Vd.2S,Vn.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_u16",
        "intrinsic": "uint8x8_t vmovn_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "XTN Vd.8B,Vn.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_u32",
        "intrinsic": "uint16x4_t vmovn_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "XTN Vd.4H,Vn.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_u64",
        "intrinsic": "uint32x2_t vmovn_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_u64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "XTN Vd.2S,Vn.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_high_s16",
        "intrinsic": "int8x16_t vmovn_high_s16(int8x8_t r, int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_high_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H",
        "aarch64_instruction": "XTN2 Vd.16B,Vn.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_high_s32",
        "intrinsic": "int16x8_t vmovn_high_s32(int16x4_t r, int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_high_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S",
        "aarch64_instruction": "XTN2 Vd.8H,Vn.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_high_s64",
        "intrinsic": "int32x4_t vmovn_high_s64(int32x2_t r, int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_high_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D",
        "aarch64_instruction": "XTN2 Vd.4S,Vn.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_high_u16",
        "intrinsic": "uint8x16_t vmovn_high_u16(uint8x8_t r, uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_high_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H",
        "aarch64_instruction": "XTN2 Vd.16B,Vn.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_high_u32",
        "intrinsic": "uint16x8_t vmovn_high_u32(uint16x4_t r, uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_high_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S",
        "aarch64_instruction": "XTN2 Vd.8H,Vn.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovn_high_u64",
        "intrinsic": "uint32x4_t vmovn_high_u64(uint32x2_t r, uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovn_high_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D",
        "aarch64_instruction": "XTN2 Vd.4S,Vn.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovl_s8",
        "intrinsic": "int16x8_t vmovl_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "SSHLL Vd.8H,Vn.8B,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovl_s16",
        "intrinsic": "int32x4_t vmovl_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "SSHLL Vd.4S,Vn.4H,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovl_s32",
        "intrinsic": "int64x2_t vmovl_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "SSHLL Vd.2D,Vn.2S,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovl_u8",
        "intrinsic": "uint16x8_t vmovl_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "USHLL Vd.8H,Vn.8B,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovl_u16",
        "intrinsic": "uint32x4_t vmovl_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "USHLL Vd.4S,Vn.4H,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovl_u32",
        "intrinsic": "uint64x2_t vmovl_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "USHLL Vd.2D,Vn.2S,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovl_high_s8",
        "intrinsic": "int16x8_t vmovl_high_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_high_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "SSHLL2 Vd.8H,Vn.16B,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmovl_high_s16",
        "intrinsic": "int32x4_t vmovl_high_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_high_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SSHLL2 Vd.4S,Vn.8H,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmovl_high_s32",
        "intrinsic": "int64x2_t vmovl_high_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_high_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SSHLL2 Vd.2D,Vn.4S,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmovl_high_u8",
        "intrinsic": "uint16x8_t vmovl_high_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_high_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "USHLL2 Vd.8H,Vn.16B,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmovl_high_u16",
        "intrinsic": "uint32x4_t vmovl_high_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_high_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "USHLL2 Vd.4S,Vn.8H,#0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmovl_high_u32",
        "intrinsic": "uint64x2_t vmovl_high_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovl_high_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "USHLL2 Vd.2D,Vn.4S,#0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovn_s16",
        "intrinsic": "int8x8_t vqmovn_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SQXTN Vd.8B,Vn.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovn_s32",
        "intrinsic": "int16x4_t vqmovn_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SQXTN Vd.4H,Vn.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovn_s64",
        "intrinsic": "int32x2_t vqmovn_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "SQXTN Vd.2S,Vn.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovn_u16",
        "intrinsic": "uint8x8_t vqmovn_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "UQXTN Vd.8B,Vn.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovn_u32",
        "intrinsic": "uint16x4_t vqmovn_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "UQXTN Vd.4H,Vn.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovn_u64",
        "intrinsic": "uint32x2_t vqmovn_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_u64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "UQXTN Vd.2S,Vn.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovnh_s16",
        "intrinsic": "int8_t vqmovnh_s16(int16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovnh_s16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "SQXTN Bd,Hn",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovns_s32",
        "intrinsic": "int16_t vqmovns_s32(int32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovns_s32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "SQXTN Hd,Sn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovnd_s64",
        "intrinsic": "int32_t vqmovnd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovnd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "SQXTN Sd,Dn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovnh_u16",
        "intrinsic": "uint8_t vqmovnh_u16(uint16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovnh_u16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "UQXTN Bd,Hn",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovns_u32",
        "intrinsic": "uint16_t vqmovns_u32(uint32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovns_u32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "UQXTN Hd,Sn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovnd_u64",
        "intrinsic": "uint32_t vqmovnd_u64(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovnd_u64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "UQXTN Sd,Dn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovn_high_s16",
        "intrinsic": "int8x16_t vqmovn_high_s16(int8x8_t r, int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_high_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H",
        "aarch64_instruction": "SQXTN2 Vd.16B,Vn.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovn_high_s32",
        "intrinsic": "int16x8_t vqmovn_high_s32(int16x4_t r, int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_high_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S",
        "aarch64_instruction": "SQXTN2 Vd.8H,Vn.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovn_high_s64",
        "intrinsic": "int32x4_t vqmovn_high_s64(int32x2_t r, int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_high_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D",
        "aarch64_instruction": "SQXTN2 Vd.4S,Vn.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovn_high_u16",
        "intrinsic": "uint8x16_t vqmovn_high_u16(uint8x8_t r, uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_high_u16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H",
        "aarch64_instruction": "UQXTN2 Vd.16B,Vn.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovn_high_u32",
        "intrinsic": "uint16x8_t vqmovn_high_u32(uint16x4_t r, uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_high_u32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S",
        "aarch64_instruction": "UQXTN2 Vd.8H,Vn.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovn_high_u64",
        "intrinsic": "uint32x4_t vqmovn_high_u64(uint32x2_t r, uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovn_high_u64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D",
        "aarch64_instruction": "UQXTN2 Vd.4S,Vn.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovun_s16",
        "intrinsic": "uint8x8_t vqmovun_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovun_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SQXTUN Vd.8B,Vn.8H",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovun_s32",
        "intrinsic": "uint16x4_t vqmovun_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovun_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SQXTUN Vd.4H,Vn.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovun_s64",
        "intrinsic": "uint32x2_t vqmovun_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovun_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "SQXTUN Vd.2S,Vn.2D",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqmovunh_s16",
        "intrinsic": "uint8_t vqmovunh_s16(int16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovunh_s16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "SQXTUN Bd,Hn",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovuns_s32",
        "intrinsic": "uint16_t vqmovuns_s32(int32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovuns_s32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "SQXTUN Hd,Sn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovund_s64",
        "intrinsic": "uint32_t vqmovund_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovund_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "SQXTUN Sd,Dn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovun_high_s16",
        "intrinsic": "uint8x16_t vqmovun_high_s16(uint8x8_t r, int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovun_high_s16",
        "argument_preparation": "r -> Vd.8B; a -> Vn.8H",
        "aarch64_instruction": "SQXTUN2 Vd.16B,Vn.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovun_high_s32",
        "intrinsic": "uint16x8_t vqmovun_high_s32(uint16x4_t r, int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovun_high_s32",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4S",
        "aarch64_instruction": "SQXTUN2 Vd.8H,Vn.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqmovun_high_s64",
        "intrinsic": "uint32x4_t vqmovun_high_s64(uint32x2_t r, int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqmovun_high_s64",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2D",
        "aarch64_instruction": "SQXTUN2 Vd.4S,Vn.2D",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      }
    ],
    "Scalar arithmetic": [
      {
        "name": "vmla_lane_s16",
        "intrinsic": "int16x4_t vmla_lane_s16(int16x4_t a, int16x4_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_lane_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MLA Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_lane_s16",
        "intrinsic": "int16x8_t vmlaq_lane_s16(int16x8_t a, int16x8_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_lane_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MLA Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_lane_s32",
        "intrinsic": "int32x2_t vmla_lane_s32(int32x2_t a, int32x2_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_lane_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MLA Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_lane_s32",
        "intrinsic": "int32x4_t vmlaq_lane_s32(int32x4_t a, int32x4_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_lane_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MLA Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_lane_u16",
        "intrinsic": "uint16x4_t vmla_lane_u16(uint16x4_t a, uint16x4_t b, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_lane_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MLA Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_lane_u16",
        "intrinsic": "uint16x8_t vmlaq_lane_u16(uint16x8_t a, uint16x8_t b, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_lane_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MLA Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_lane_u32",
        "intrinsic": "uint32x2_t vmla_lane_u32(uint32x2_t a, uint32x2_t b, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_lane_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MLA Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_lane_u32",
        "intrinsic": "uint32x4_t vmlaq_lane_u32(uint32x4_t a, uint32x4_t b, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_lane_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MLA Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_lane_f32",
        "intrinsic": "float32x2_t vmla_lane_f32(float32x2_t a, float32x2_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_lane_f32",
        "argument_preparation": "0 <= lane <= 1",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * v[lane]) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_lane_f32",
        "intrinsic": "float32x4_t vmlaq_lane_f32(float32x4_t a, float32x4_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_lane_f32",
        "argument_preparation": "0 <= lane <= 1",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * v[lane]) for i = 0 to 3",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_laneq_s16",
        "intrinsic": "int16x4_t vmla_laneq_s16(int16x4_t a, int16x4_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_laneq_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MLA Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaq_laneq_s16",
        "intrinsic": "int16x8_t vmlaq_laneq_s16(int16x8_t a, int16x8_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_laneq_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MLA Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmla_laneq_s32",
        "intrinsic": "int32x2_t vmla_laneq_s32(int32x2_t a, int32x2_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_laneq_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MLA Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaq_laneq_s32",
        "intrinsic": "int32x4_t vmlaq_laneq_s32(int32x4_t a, int32x4_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_laneq_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MLA Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmla_laneq_u16",
        "intrinsic": "uint16x4_t vmla_laneq_u16(uint16x4_t a, uint16x4_t b, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_laneq_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MLA Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaq_laneq_u16",
        "intrinsic": "uint16x8_t vmlaq_laneq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_laneq_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MLA Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmla_laneq_u32",
        "intrinsic": "uint32x2_t vmla_laneq_u32(uint32x2_t a, uint32x2_t b, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_laneq_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MLA Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaq_laneq_u32",
        "intrinsic": "uint32x4_t vmlaq_laneq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_laneq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MLA Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmla_laneq_f32",
        "intrinsic": "float32x2_t vmla_laneq_f32(float32x2_t a, float32x2_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_laneq_f32",
        "argument_preparation": "0 <= lane <= 3",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * v[lane]) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaq_laneq_f32",
        "intrinsic": "float32x4_t vmlaq_laneq_f32(float32x4_t a, float32x4_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_laneq_f32",
        "argument_preparation": "0 <= lane <= 3",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * v[lane]) for i = 0 to 3",
        "result": "N/A",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_lane_s16",
        "intrinsic": "int32x4_t vmlal_lane_s16(int32x4_t a, int16x4_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_lane_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SMLAL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_lane_s32",
        "intrinsic": "int64x2_t vmlal_lane_s32(int64x2_t a, int32x2_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_lane_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SMLAL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_lane_u16",
        "intrinsic": "uint32x4_t vmlal_lane_u16(uint32x4_t a, uint16x4_t b, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_lane_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "UMLAL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_lane_u32",
        "intrinsic": "uint64x2_t vmlal_lane_u32(uint64x2_t a, uint32x2_t b, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_lane_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "UMLAL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_high_lane_s16",
        "intrinsic": "int32x4_t vmlal_high_lane_s16(int32x4_t a, int16x8_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_lane_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SMLAL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_lane_s32",
        "intrinsic": "int64x2_t vmlal_high_lane_s32(int64x2_t a, int32x4_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_lane_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SMLAL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_lane_u16",
        "intrinsic": "uint32x4_t vmlal_high_lane_u16(uint32x4_t a, uint16x8_t b, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_lane_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "UMLAL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_lane_u32",
        "intrinsic": "uint64x2_t vmlal_high_lane_u32(uint64x2_t a, uint32x4_t b, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_lane_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "UMLAL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_laneq_s16",
        "intrinsic": "int32x4_t vmlal_laneq_s16(int32x4_t a, int16x4_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_laneq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SMLAL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_laneq_s32",
        "intrinsic": "int64x2_t vmlal_laneq_s32(int64x2_t a, int32x2_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_laneq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SMLAL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_laneq_u16",
        "intrinsic": "uint32x4_t vmlal_laneq_u16(uint32x4_t a, uint16x4_t b, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_laneq_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "UMLAL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_laneq_u32",
        "intrinsic": "uint64x2_t vmlal_laneq_u32(uint64x2_t a, uint32x2_t b, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_laneq_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "UMLAL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_laneq_s16",
        "intrinsic": "int32x4_t vmlal_high_laneq_s16(int32x4_t a, int16x8_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_laneq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SMLAL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_laneq_s32",
        "intrinsic": "int64x2_t vmlal_high_laneq_s32(int64x2_t a, int32x4_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_laneq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SMLAL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_laneq_u16",
        "intrinsic": "uint32x4_t vmlal_high_laneq_u16(uint32x4_t a, uint16x8_t b, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_laneq_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "UMLAL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_laneq_u32",
        "intrinsic": "uint64x2_t vmlal_high_laneq_u32(uint64x2_t a, uint32x4_t b, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_laneq_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "UMLAL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmla_n_s16",
        "intrinsic": "int16x4_t vmla_n_s16(int16x4_t a, int16x4_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_n_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "MLA Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_n_s16",
        "intrinsic": "int16x8_t vmlaq_n_s16(int16x8_t a, int16x8_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_n_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "MLA Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_n_s32",
        "intrinsic": "int32x2_t vmla_n_s32(int32x2_t a, int32x2_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_n_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "MLA Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_n_s32",
        "intrinsic": "int32x4_t vmlaq_n_s32(int32x4_t a, int32x4_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_n_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "MLA Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_n_u16",
        "intrinsic": "uint16x4_t vmla_n_u16(uint16x4_t a, uint16x4_t b, uint16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_n_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "MLA Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_n_u16",
        "intrinsic": "uint16x8_t vmlaq_n_u16(uint16x8_t a, uint16x8_t b, uint16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_n_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "MLA Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_n_u32",
        "intrinsic": "uint32x2_t vmla_n_u32(uint32x2_t a, uint32x2_t b, uint32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_n_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "MLA Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_n_u32",
        "intrinsic": "uint32x4_t vmlaq_n_u32(uint32x4_t a, uint32x4_t b, uint32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_n_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "MLA Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmla_n_f32",
        "intrinsic": "float32x2_t vmla_n_f32(float32x2_t a, float32x2_t b, float32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmla_n_f32",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * c) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlaq_n_f32",
        "intrinsic": "float32x4_t vmlaq_n_f32(float32x4_t a, float32x4_t b, float32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaq_n_f32",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] + (b[i] * c) for i = 0 to 3",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_lane_s16",
        "intrinsic": "int16x4_t vmls_lane_s16(int16x4_t a, int16x4_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_lane_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MLS Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_lane_s16",
        "intrinsic": "int16x8_t vmlsq_lane_s16(int16x8_t a, int16x8_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_lane_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MLS Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_lane_s32",
        "intrinsic": "int32x2_t vmls_lane_s32(int32x2_t a, int32x2_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_lane_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MLS Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_lane_s32",
        "intrinsic": "int32x4_t vmlsq_lane_s32(int32x4_t a, int32x4_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_lane_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MLS Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_lane_u16",
        "intrinsic": "uint16x4_t vmls_lane_u16(uint16x4_t a, uint16x4_t b, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_lane_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MLS Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_lane_u16",
        "intrinsic": "uint16x8_t vmlsq_lane_u16(uint16x8_t a, uint16x8_t b, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_lane_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MLS Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_lane_u32",
        "intrinsic": "uint32x2_t vmls_lane_u32(uint32x2_t a, uint32x2_t b, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_lane_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MLS Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_lane_u32",
        "intrinsic": "uint32x4_t vmlsq_lane_u32(uint32x4_t a, uint32x4_t b, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_lane_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MLS Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_lane_f32",
        "intrinsic": "float32x2_t vmls_lane_f32(float32x2_t a, float32x2_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_lane_f32",
        "argument_preparation": "0 <= lane <= 1",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * v[lane]) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_lane_f32",
        "intrinsic": "float32x4_t vmlsq_lane_f32(float32x4_t a, float32x4_t b, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_lane_f32",
        "argument_preparation": "0 <= lane <= 1",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * v[lane]) for i = 0 to 3",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_laneq_s16",
        "intrinsic": "int16x4_t vmls_laneq_s16(int16x4_t a, int16x4_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_laneq_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MLS Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsq_laneq_s16",
        "intrinsic": "int16x8_t vmlsq_laneq_s16(int16x8_t a, int16x8_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_laneq_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MLS Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmls_laneq_s32",
        "intrinsic": "int32x2_t vmls_laneq_s32(int32x2_t a, int32x2_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_laneq_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MLS Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsq_laneq_s32",
        "intrinsic": "int32x4_t vmlsq_laneq_s32(int32x4_t a, int32x4_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_laneq_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MLS Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmls_laneq_u16",
        "intrinsic": "uint16x4_t vmls_laneq_u16(uint16x4_t a, uint16x4_t b, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_laneq_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MLS Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsq_laneq_u16",
        "intrinsic": "uint16x8_t vmlsq_laneq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_laneq_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MLS Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmls_laneq_u32",
        "intrinsic": "uint32x2_t vmls_laneq_u32(uint32x2_t a, uint32x2_t b, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_laneq_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MLS Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsq_laneq_u32",
        "intrinsic": "uint32x4_t vmlsq_laneq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_laneq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MLS Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmls_laneq_f32",
        "intrinsic": "float32x2_t vmls_laneq_f32(float32x2_t a, float32x2_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_laneq_f32",
        "argument_preparation": "0 <= lane <= 3",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * v[lane]) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsq_laneq_f32",
        "intrinsic": "float32x4_t vmlsq_laneq_f32(float32x4_t a, float32x4_t b, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_laneq_f32",
        "argument_preparation": "0 <= lane <= 3",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * v[lane]) for i = 0 to 3",
        "result": "N/A",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_lane_s16",
        "intrinsic": "int32x4_t vmlsl_lane_s16(int32x4_t a, int16x4_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_lane_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SMLSL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_lane_s32",
        "intrinsic": "int64x2_t vmlsl_lane_s32(int64x2_t a, int32x2_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_lane_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SMLSL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_lane_u16",
        "intrinsic": "uint32x4_t vmlsl_lane_u16(uint32x4_t a, uint16x4_t b, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_lane_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "UMLSL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_lane_u32",
        "intrinsic": "uint64x2_t vmlsl_lane_u32(uint64x2_t a, uint32x2_t b, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_lane_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "UMLSL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_high_lane_s16",
        "intrinsic": "int32x4_t vmlsl_high_lane_s16(int32x4_t a, int16x8_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_lane_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SMLSL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_lane_s32",
        "intrinsic": "int64x2_t vmlsl_high_lane_s32(int64x2_t a, int32x4_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_lane_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SMLSL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_lane_u16",
        "intrinsic": "uint32x4_t vmlsl_high_lane_u16(uint32x4_t a, uint16x8_t b, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_lane_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "UMLSL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_lane_u32",
        "intrinsic": "uint64x2_t vmlsl_high_lane_u32(uint64x2_t a, uint32x4_t b, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_lane_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "UMLSL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_laneq_s16",
        "intrinsic": "int32x4_t vmlsl_laneq_s16(int32x4_t a, int16x4_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_laneq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SMLSL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_laneq_s32",
        "intrinsic": "int64x2_t vmlsl_laneq_s32(int64x2_t a, int32x2_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_laneq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SMLSL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_laneq_u16",
        "intrinsic": "uint32x4_t vmlsl_laneq_u16(uint32x4_t a, uint16x4_t b, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_laneq_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "UMLSL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_laneq_u32",
        "intrinsic": "uint64x2_t vmlsl_laneq_u32(uint64x2_t a, uint32x2_t b, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_laneq_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "UMLSL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_laneq_s16",
        "intrinsic": "int32x4_t vmlsl_high_laneq_s16(int32x4_t a, int16x8_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_laneq_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SMLSL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_laneq_s32",
        "intrinsic": "int64x2_t vmlsl_high_laneq_s32(int64x2_t a, int32x4_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_laneq_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SMLSL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_laneq_u16",
        "intrinsic": "uint32x4_t vmlsl_high_laneq_u16(uint32x4_t a, uint16x8_t b, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_laneq_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "UMLSL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_laneq_u32",
        "intrinsic": "uint64x2_t vmlsl_high_laneq_u32(uint64x2_t a, uint32x4_t b, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_laneq_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "UMLSL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_n_s16",
        "intrinsic": "int16x4_t vmul_n_s16(int16x4_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_n_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.H[0]",
        "aarch64_instruction": "MUL Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_n_s16",
        "intrinsic": "int16x8_t vmulq_n_s16(int16x8_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_n_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.H[0]",
        "aarch64_instruction": "MUL Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_n_s32",
        "intrinsic": "int32x2_t vmul_n_s32(int32x2_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_n_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.S[0]",
        "aarch64_instruction": "MUL Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_n_s32",
        "intrinsic": "int32x4_t vmulq_n_s32(int32x4_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_n_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.S[0]",
        "aarch64_instruction": "MUL Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_n_u16",
        "intrinsic": "uint16x4_t vmul_n_u16(uint16x4_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_n_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.H[0]",
        "aarch64_instruction": "MUL Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_n_u16",
        "intrinsic": "uint16x8_t vmulq_n_u16(uint16x8_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_n_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.H[0]",
        "aarch64_instruction": "MUL Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_n_u32",
        "intrinsic": "uint32x2_t vmul_n_u32(uint32x2_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_n_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.S[0]",
        "aarch64_instruction": "MUL Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_n_u32",
        "intrinsic": "uint32x4_t vmulq_n_u32(uint32x4_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_n_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.S[0]",
        "aarch64_instruction": "MUL Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_n_f32",
        "intrinsic": "float32x2_t vmul_n_f32(float32x2_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_n_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.S[0]",
        "aarch64_instruction": "FMUL Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_n_f32",
        "intrinsic": "float32x4_t vmulq_n_f32(float32x4_t a, float32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_n_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.S[0]",
        "aarch64_instruction": "FMUL Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_n_f64",
        "intrinsic": "float64x1_t vmul_n_f64(float64x1_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_n_f64",
        "argument_preparation": "a -> Dn; b -> Vm.D[0]",
        "aarch64_instruction": "FMUL Dd,Dn,Vm.D[0]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_n_f64",
        "intrinsic": "float64x2_t vmulq_n_f64(float64x2_t a, float64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_n_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.D[0]",
        "aarch64_instruction": "FMUL Vd.2D,Vn.2D,Vm.D[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_lane_s16",
        "intrinsic": "int16x4_t vmul_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_lane_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MUL Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_lane_s16",
        "intrinsic": "int16x8_t vmulq_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_lane_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MUL Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_lane_s32",
        "intrinsic": "int32x2_t vmul_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_lane_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MUL Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_lane_s32",
        "intrinsic": "int32x4_t vmulq_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_lane_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MUL Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_lane_u16",
        "intrinsic": "uint16x4_t vmul_lane_u16(uint16x4_t a, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_lane_u16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MUL Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_lane_u16",
        "intrinsic": "uint16x8_t vmulq_lane_u16(uint16x8_t a, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_lane_u16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "MUL Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_lane_u32",
        "intrinsic": "uint32x2_t vmul_lane_u32(uint32x2_t a, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_lane_u32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MUL Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_lane_u32",
        "intrinsic": "uint32x4_t vmulq_lane_u32(uint32x4_t a, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_lane_u32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "MUL Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_lane_f32",
        "intrinsic": "float32x2_t vmul_lane_f32(float32x2_t a, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_lane_f32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMUL Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmulq_lane_f32",
        "intrinsic": "float32x4_t vmulq_lane_f32(float32x4_t a, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_lane_f32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMUL Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmul_lane_f64",
        "intrinsic": "float64x1_t vmul_lane_f64(float64x1_t a, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_lane_f64",
        "argument_preparation": "a -> Dn; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMUL Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_lane_f64",
        "intrinsic": "float64x2_t vmulq_lane_f64(float64x2_t a, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_lane_f64",
        "argument_preparation": "a -> Vn.2D; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMUL Vd.2D,Vn.2D,Vm.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmuls_lane_f32",
        "intrinsic": "float32_t vmuls_lane_f32(float32_t a, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmuls_lane_f32",
        "argument_preparation": "a -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "FMUL Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmuld_lane_f64",
        "intrinsic": "float64_t vmuld_lane_f64(float64_t a, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmuld_lane_f64",
        "argument_preparation": "a -> Dn; v -> Vm.1D; 0 <= lane <= 0",
        "aarch64_instruction": "FMUL Dd,Dn,Vm.S[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_laneq_s16",
        "intrinsic": "int16x4_t vmul_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_laneq_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MUL Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_laneq_s16",
        "intrinsic": "int16x8_t vmulq_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_laneq_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MUL Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_laneq_s32",
        "intrinsic": "int32x2_t vmul_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_laneq_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MUL Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_laneq_s32",
        "intrinsic": "int32x4_t vmulq_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_laneq_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MUL Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_laneq_u16",
        "intrinsic": "uint16x4_t vmul_laneq_u16(uint16x4_t a, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_laneq_u16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MUL Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_laneq_u16",
        "intrinsic": "uint16x8_t vmulq_laneq_u16(uint16x8_t a, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_laneq_u16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "MUL Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_laneq_u32",
        "intrinsic": "uint32x2_t vmul_laneq_u32(uint32x2_t a, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_laneq_u32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MUL Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_laneq_u32",
        "intrinsic": "uint32x4_t vmulq_laneq_u32(uint32x4_t a, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_laneq_u32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "MUL Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_laneq_f32",
        "intrinsic": "float32x2_t vmul_laneq_f32(float32x2_t a, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_laneq_f32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMUL Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_laneq_f32",
        "intrinsic": "float32x4_t vmulq_laneq_f32(float32x4_t a, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_laneq_f32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMUL Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_laneq_f64",
        "intrinsic": "float64x1_t vmul_laneq_f64(float64x1_t a, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_laneq_f64",
        "argument_preparation": "a -> Dn; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMUL Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_laneq_f64",
        "intrinsic": "float64x2_t vmulq_laneq_f64(float64x2_t a, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_laneq_f64",
        "argument_preparation": "a -> Vn.2D; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMUL Vd.2D,Vn.2D,Vm.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmuls_laneq_f32",
        "intrinsic": "float32_t vmuls_laneq_f32(float32_t a, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmuls_laneq_f32",
        "argument_preparation": "a -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "FMUL Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmuld_laneq_f64",
        "intrinsic": "float64_t vmuld_laneq_f64(float64_t a, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmuld_laneq_f64",
        "argument_preparation": "a -> Dn; v -> Vm.2D; 0 <= lane <= 1",
        "aarch64_instruction": "FMUL Dd,Dn,Vm.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_n_s16",
        "intrinsic": "int32x4_t vmull_n_s16(int16x4_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_n_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.H[0]",
        "aarch64_instruction": "SMULL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_n_s32",
        "intrinsic": "int64x2_t vmull_n_s32(int32x2_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_n_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.S[0]",
        "aarch64_instruction": "SMULL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_n_u16",
        "intrinsic": "uint32x4_t vmull_n_u16(uint16x4_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_n_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.H[0]",
        "aarch64_instruction": "UMULL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_n_u32",
        "intrinsic": "uint64x2_t vmull_n_u32(uint32x2_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_n_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.S[0]",
        "aarch64_instruction": "UMULL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_high_n_s16",
        "intrinsic": "int32x4_t vmull_high_n_s16(int16x8_t a, int16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_n_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.H[0]",
        "aarch64_instruction": "SMULL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_n_s32",
        "intrinsic": "int64x2_t vmull_high_n_s32(int32x4_t a, int32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_n_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.S[0]",
        "aarch64_instruction": "SMULL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_n_u16",
        "intrinsic": "uint32x4_t vmull_high_n_u16(uint16x8_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_n_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.H[0]",
        "aarch64_instruction": "UMULL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_n_u32",
        "intrinsic": "uint64x2_t vmull_high_n_u32(uint32x4_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_n_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.S[0]",
        "aarch64_instruction": "UMULL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_lane_s16",
        "intrinsic": "int32x4_t vmull_lane_s16(int16x4_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_lane_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SMULL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_lane_s32",
        "intrinsic": "int64x2_t vmull_lane_s32(int32x2_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_lane_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SMULL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_lane_u16",
        "intrinsic": "uint32x4_t vmull_lane_u16(uint16x4_t a, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_lane_u16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "UMULL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_lane_u32",
        "intrinsic": "uint64x2_t vmull_lane_u32(uint32x2_t a, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_lane_u32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "UMULL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmull_high_lane_s16",
        "intrinsic": "int32x4_t vmull_high_lane_s16(int16x8_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_lane_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SMULL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_lane_s32",
        "intrinsic": "int64x2_t vmull_high_lane_s32(int32x4_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_lane_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SMULL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_lane_u16",
        "intrinsic": "uint32x4_t vmull_high_lane_u16(uint16x8_t a, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_lane_u16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "UMULL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_lane_u32",
        "intrinsic": "uint64x2_t vmull_high_lane_u32(uint32x4_t a, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_lane_u32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "UMULL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_laneq_s16",
        "intrinsic": "int32x4_t vmull_laneq_s16(int16x4_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_laneq_s16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SMULL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_laneq_s32",
        "intrinsic": "int64x2_t vmull_laneq_s32(int32x2_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_laneq_s32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SMULL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_laneq_u16",
        "intrinsic": "uint32x4_t vmull_laneq_u16(uint16x4_t a, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_laneq_u16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "UMULL Vd.4S,Vn.4H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_laneq_u32",
        "intrinsic": "uint64x2_t vmull_laneq_u32(uint32x2_t a, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_laneq_u32",
        "argument_preparation": "a -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "UMULL Vd.2D,Vn.2S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_laneq_s16",
        "intrinsic": "int32x4_t vmull_high_laneq_s16(int16x8_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_laneq_s16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SMULL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_laneq_s32",
        "intrinsic": "int64x2_t vmull_high_laneq_s32(int32x4_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_laneq_s32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SMULL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_laneq_u16",
        "intrinsic": "uint32x4_t vmull_high_laneq_u16(uint16x8_t a, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_laneq_u16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "UMULL2 Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmull_high_laneq_u32",
        "intrinsic": "uint64x2_t vmull_high_laneq_u32(uint32x4_t a, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_laneq_u32",
        "argument_preparation": "a -> Vn.4S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "UMULL2 Vd.2D,Vn.4S,Vm.S[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_n_s16",
        "intrinsic": "int32x4_t vmlal_n_s16(int32x4_t a, int16x4_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_n_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "SMLAL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_n_s32",
        "intrinsic": "int64x2_t vmlal_n_s32(int64x2_t a, int32x2_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_n_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "SMLAL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_n_u16",
        "intrinsic": "uint32x4_t vmlal_n_u16(uint32x4_t a, uint16x4_t b, uint16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_n_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "UMLAL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_n_u32",
        "intrinsic": "uint64x2_t vmlal_n_u32(uint64x2_t a, uint32x2_t b, uint32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_n_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "UMLAL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlal_high_n_s16",
        "intrinsic": "int32x4_t vmlal_high_n_s16(int32x4_t a, int16x8_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_n_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "SMLAL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_n_s32",
        "intrinsic": "int64x2_t vmlal_high_n_s32(int64x2_t a, int32x4_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_n_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "SMLAL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_n_u16",
        "intrinsic": "uint32x4_t vmlal_high_n_u16(uint32x4_t a, uint16x8_t b, uint16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_n_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "UMLAL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlal_high_n_u32",
        "intrinsic": "uint64x2_t vmlal_high_n_u32(uint64x2_t a, uint32x4_t b, uint32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlal_high_n_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "UMLAL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmls_n_s16",
        "intrinsic": "int16x4_t vmls_n_s16(int16x4_t a, int16x4_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_n_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "MLS Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_n_s16",
        "intrinsic": "int16x8_t vmlsq_n_s16(int16x8_t a, int16x8_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_n_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "MLS Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_n_s32",
        "intrinsic": "int32x2_t vmls_n_s32(int32x2_t a, int32x2_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_n_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "MLS Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_n_s32",
        "intrinsic": "int32x4_t vmlsq_n_s32(int32x4_t a, int32x4_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_n_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "MLS Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_n_u16",
        "intrinsic": "uint16x4_t vmls_n_u16(uint16x4_t a, uint16x4_t b, uint16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_n_u16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "MLS Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_n_u16",
        "intrinsic": "uint16x8_t vmlsq_n_u16(uint16x8_t a, uint16x8_t b, uint16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_n_u16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "MLS Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_n_u32",
        "intrinsic": "uint32x2_t vmls_n_u32(uint32x2_t a, uint32x2_t b, uint32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_n_u32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "MLS Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_n_u32",
        "intrinsic": "uint32x4_t vmlsq_n_u32(uint32x4_t a, uint32x4_t b, uint32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_n_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "MLS Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmls_n_f32",
        "intrinsic": "float32x2_t vmls_n_f32(float32x2_t a, float32x2_t b, float32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmls_n_f32",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * c) for i = 0 to 1",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsq_n_f32",
        "intrinsic": "float32x4_t vmlsq_n_f32(float32x4_t a, float32x4_t b, float32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsq_n_f32",
        "argument_preparation": "N/A",
        "aarch64_instruction": "RESULT[I] = a[i] - (b[i] * c) for i = 0 to 3",
        "result": "N/A",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_n_s16",
        "intrinsic": "int32x4_t vmlsl_n_s16(int32x4_t a, int16x4_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_n_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "SMLSL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_n_s32",
        "intrinsic": "int64x2_t vmlsl_n_s32(int64x2_t a, int32x2_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_n_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "SMLSL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_n_u16",
        "intrinsic": "uint32x4_t vmlsl_n_u16(uint32x4_t a, uint16x4_t b, uint16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_n_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4H; c -> Vm.H[0]",
        "aarch64_instruction": "UMLSL Vd.4S,Vn.4H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_n_u32",
        "intrinsic": "uint64x2_t vmlsl_n_u32(uint64x2_t a, uint32x2_t b, uint32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_n_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.2S; c -> Vm.S[0]",
        "aarch64_instruction": "UMLSL Vd.2D,Vn.2S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmlsl_high_n_s16",
        "intrinsic": "int32x4_t vmlsl_high_n_s16(int32x4_t a, int16x8_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_n_s16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "SMLSL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_n_s32",
        "intrinsic": "int64x2_t vmlsl_high_n_s32(int64x2_t a, int32x4_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_n_s32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "SMLSL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_n_u16",
        "intrinsic": "uint32x4_t vmlsl_high_n_u16(uint32x4_t a, uint16x8_t b, uint16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_n_u16",
        "argument_preparation": "a -> Vd.4S; b -> Vn.8H; c -> Vm.H[0]",
        "aarch64_instruction": "UMLSL2 Vd.4S,Vn.8H,Vm.H[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlsl_high_n_u32",
        "intrinsic": "uint64x2_t vmlsl_high_n_u32(uint64x2_t a, uint32x4_t b, uint32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlsl_high_n_u32",
        "argument_preparation": "a -> Vd.2D; b -> Vn.4S; c -> Vm.S[0]",
        "aarch64_instruction": "UMLSL2 Vd.2D,Vn.4S,Vm.S[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_n_f32",
        "intrinsic": "float32x2_t vfma_n_f32(float32x2_t a, float32x2_t b, float32_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_n_f32",
        "argument_preparation": "n -> Vm.S[0]; b -> Vn.2S; a -> Vd.2S",
        "aarch64_instruction": "FMLA Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vfmaq_n_f32",
        "intrinsic": "float32x4_t vfmaq_n_f32(float32x4_t a, float32x4_t b, float32_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_n_f32",
        "argument_preparation": "n -> Vm.S[0]; b -> Vn.4S; a -> Vd.4S",
        "aarch64_instruction": "FMLA Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vfms_n_f32",
        "intrinsic": "float32x2_t vfms_n_f32(float32x2_t a, float32x2_t b, float32_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_n_f32",
        "argument_preparation": "n -> Vm.S[0]; b -> Vn.2S; a -> Vd.2S",
        "aarch64_instruction": "FMLS Vd.2S,Vn.2S,Vm.S[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_n_f32",
        "intrinsic": "float32x4_t vfmsq_n_f32(float32x4_t a, float32x4_t b, float32_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_n_f32",
        "argument_preparation": "n -> Vm.S[0]; b -> Vn.4S; a -> Vd.4S",
        "aarch64_instruction": "FMLS Vd.4S,Vn.4S,Vm.S[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_n_f64",
        "intrinsic": "float64x1_t vfma_n_f64(float64x1_t a, float64x1_t b, float64_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_n_f64",
        "argument_preparation": "b -> Dn; n -> Dm; a -> Da",
        "aarch64_instruction": "FMADD Dd,Dn,Dm,Da",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_n_f64",
        "intrinsic": "float64x2_t vfmaq_n_f64(float64x2_t a, float64x2_t b, float64_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_n_f64",
        "argument_preparation": "n -> Vm.D[0]; b -> Vn.2D; a -> Vd.2D",
        "aarch64_instruction": "FMLA Vd.2D,Vn.2D,Vm.D[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_n_f64",
        "intrinsic": "float64x1_t vfms_n_f64(float64x1_t a, float64x1_t b, float64_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_n_f64",
        "argument_preparation": "b -> Dn; n -> Dm; a -> Da",
        "aarch64_instruction": "FMSUB Dd,Dn,Dm,Da",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_n_f64",
        "intrinsic": "float64x2_t vfmsq_n_f64(float64x2_t a, float64x2_t b, float64_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_n_f64",
        "argument_preparation": "n -> Vm.D[0]; b -> Vn.2D; a -> Vd.2D",
        "aarch64_instruction": "FMLS Vd.2D,Vn.2D,Vm.D[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      }
    ],
    "Logical": [
      {
        "name": "vneg_s8",
        "intrinsic": "int8x8_t vneg_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vneg_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "NEG Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vnegq_s8",
        "intrinsic": "int8x16_t vnegq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "NEG Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vneg_s16",
        "intrinsic": "int16x4_t vneg_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vneg_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "NEG Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vnegq_s16",
        "intrinsic": "int16x8_t vnegq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "NEG Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vneg_s32",
        "intrinsic": "int32x2_t vneg_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vneg_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "NEG Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vnegq_s32",
        "intrinsic": "int32x4_t vnegq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "NEG Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vneg_f32",
        "intrinsic": "float32x2_t vneg_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vneg_f32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "FNEG Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vnegq_f32",
        "intrinsic": "float32x4_t vnegq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegq_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "FNEG Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vneg_s64",
        "intrinsic": "int64x1_t vneg_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vneg_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "NEG Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vnegd_s64",
        "intrinsic": "int64_t vnegd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "NEG Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vnegq_s64",
        "intrinsic": "int64x2_t vnegq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "NEG Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vneg_f64",
        "intrinsic": "float64x1_t vneg_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vneg_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FNEG Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vnegq_f64",
        "intrinsic": "float64x2_t vnegq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegq_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "FNEG Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqneg_s8",
        "intrinsic": "int8x8_t vqneg_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqneg_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "SQNEG Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqnegq_s8",
        "intrinsic": "int8x16_t vqnegq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqnegq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "SQNEG Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqneg_s16",
        "intrinsic": "int16x4_t vqneg_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqneg_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "SQNEG Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqnegq_s16",
        "intrinsic": "int16x8_t vqnegq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqnegq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SQNEG Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqneg_s32",
        "intrinsic": "int32x2_t vqneg_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqneg_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "SQNEG Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqnegq_s32",
        "intrinsic": "int32x4_t vqnegq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqnegq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "SQNEG Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vqneg_s64",
        "intrinsic": "int64x1_t vqneg_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqneg_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "SQNEG Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqnegq_s64",
        "intrinsic": "int64x2_t vqnegq_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqnegq_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "SQNEG Vd.2D,Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqnegb_s8",
        "intrinsic": "int8_t vqnegb_s8(int8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqnegb_s8",
        "argument_preparation": "a -> Bn",
        "aarch64_instruction": "SQNEG Bd,Bn",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqnegh_s16",
        "intrinsic": "int16_t vqnegh_s16(int16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqnegh_s16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "SQNEG Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqnegs_s32",
        "intrinsic": "int32_t vqnegs_s32(int32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqnegs_s32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "SQNEG Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqnegd_s64",
        "intrinsic": "int64_t vqnegd_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqnegd_s64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "SQNEG Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmvn_s8",
        "intrinsic": "int8x8_t vmvn_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvn_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "MVN Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvnq_s8",
        "intrinsic": "int8x16_t vmvnq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvnq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "MVN Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvn_s16",
        "intrinsic": "int16x4_t vmvn_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvn_s16",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "MVN Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvnq_s16",
        "intrinsic": "int16x8_t vmvnq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvnq_s16",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "MVN Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvn_s32",
        "intrinsic": "int32x2_t vmvn_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvn_s32",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "MVN Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvnq_s32",
        "intrinsic": "int32x4_t vmvnq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvnq_s32",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "MVN Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvn_u8",
        "intrinsic": "uint8x8_t vmvn_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvn_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "MVN Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvnq_u8",
        "intrinsic": "uint8x16_t vmvnq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvnq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "MVN Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvn_u16",
        "intrinsic": "uint16x4_t vmvn_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvn_u16",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "MVN Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvnq_u16",
        "intrinsic": "uint16x8_t vmvnq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvnq_u16",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "MVN Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvn_u32",
        "intrinsic": "uint32x2_t vmvn_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvn_u32",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "MVN Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvnq_u32",
        "intrinsic": "uint32x4_t vmvnq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvnq_u32",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "MVN Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvn_p8",
        "intrinsic": "poly8x8_t vmvn_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvn_p8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "MVN Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmvnq_p8",
        "intrinsic": "poly8x16_t vmvnq_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmvnq_p8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "MVN Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vand_s8",
        "intrinsic": "int8x8_t vand_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vand_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "AND Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vandq_s8",
        "intrinsic": "int8x16_t vandq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vandq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "AND Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vand_s16",
        "intrinsic": "int16x4_t vand_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vand_s16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "AND Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vandq_s16",
        "intrinsic": "int16x8_t vandq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vandq_s16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "AND Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vand_s32",
        "intrinsic": "int32x2_t vand_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vand_s32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "AND Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vandq_s32",
        "intrinsic": "int32x4_t vandq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vandq_s32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "AND Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vand_s64",
        "intrinsic": "int64x1_t vand_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vand_s64",
        "argument_preparation": "a -> Dn; b -> Dm",
        "aarch64_instruction": "AND Dd,Dn,Dm",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vandq_s64",
        "intrinsic": "int64x2_t vandq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vandq_s64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "AND Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vand_u8",
        "intrinsic": "uint8x8_t vand_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vand_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "AND Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vandq_u8",
        "intrinsic": "uint8x16_t vandq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vandq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "AND Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vand_u16",
        "intrinsic": "uint16x4_t vand_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vand_u16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "AND Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vandq_u16",
        "intrinsic": "uint16x8_t vandq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vandq_u16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "AND Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vand_u32",
        "intrinsic": "uint32x2_t vand_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vand_u32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "AND Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vandq_u32",
        "intrinsic": "uint32x4_t vandq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vandq_u32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "AND Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vand_u64",
        "intrinsic": "uint64x1_t vand_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vand_u64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "AND Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vandq_u64",
        "intrinsic": "uint64x2_t vandq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vandq_u64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "AND Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorr_s8",
        "intrinsic": "int8x8_t vorr_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorr_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorrq_s8",
        "intrinsic": "int8x16_t vorrq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorrq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorr_s16",
        "intrinsic": "int16x4_t vorr_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorr_s16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorrq_s16",
        "intrinsic": "int16x8_t vorrq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorrq_s16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorr_s32",
        "intrinsic": "int32x2_t vorr_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorr_s32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorrq_s32",
        "intrinsic": "int32x4_t vorrq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorrq_s32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorr_s64",
        "intrinsic": "int64x1_t vorr_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorr_s64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorrq_s64",
        "intrinsic": "int64x2_t vorrq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorrq_s64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorr_u8",
        "intrinsic": "uint8x8_t vorr_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorr_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorrq_u8",
        "intrinsic": "uint8x16_t vorrq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorrq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorr_u16",
        "intrinsic": "uint16x4_t vorr_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorr_u16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorrq_u16",
        "intrinsic": "uint16x8_t vorrq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorrq_u16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorr_u32",
        "intrinsic": "uint32x2_t vorr_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorr_u32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorrq_u32",
        "intrinsic": "uint32x4_t vorrq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorrq_u32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorr_u64",
        "intrinsic": "uint64x1_t vorr_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorr_u64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorrq_u64",
        "intrinsic": "uint64x2_t vorrq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorrq_u64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veor_s8",
        "intrinsic": "int8x8_t veor_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veorq_s8",
        "intrinsic": "int8x16_t veorq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veorq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veor_s16",
        "intrinsic": "int16x4_t veor_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor_s16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veorq_s16",
        "intrinsic": "int16x8_t veorq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veorq_s16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veor_s32",
        "intrinsic": "int32x2_t veor_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor_s32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veorq_s32",
        "intrinsic": "int32x4_t veorq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veorq_s32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veor_s64",
        "intrinsic": "int64x1_t veor_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor_s64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veorq_s64",
        "intrinsic": "int64x2_t veorq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veorq_s64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veor_u8",
        "intrinsic": "uint8x8_t veor_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veorq_u8",
        "intrinsic": "uint8x16_t veorq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veorq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veor_u16",
        "intrinsic": "uint16x4_t veor_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor_u16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veorq_u16",
        "intrinsic": "uint16x8_t veorq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veorq_u16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veor_u32",
        "intrinsic": "uint32x2_t veor_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor_u32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veorq_u32",
        "intrinsic": "uint32x4_t veorq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veorq_u32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veor_u64",
        "intrinsic": "uint64x1_t veor_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor_u64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "veorq_u64",
        "intrinsic": "uint64x2_t veorq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veorq_u64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorn_s8",
        "intrinsic": "int8x8_t vorn_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorn_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vornq_s8",
        "intrinsic": "int8x16_t vornq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vornq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorn_s16",
        "intrinsic": "int16x4_t vorn_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorn_s16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vornq_s16",
        "intrinsic": "int16x8_t vornq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vornq_s16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorn_s32",
        "intrinsic": "int32x2_t vorn_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorn_s32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vornq_s32",
        "intrinsic": "int32x4_t vornq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vornq_s32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorn_s64",
        "intrinsic": "int64x1_t vorn_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorn_s64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vornq_s64",
        "intrinsic": "int64x2_t vornq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vornq_s64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorn_u8",
        "intrinsic": "uint8x8_t vorn_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorn_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vornq_u8",
        "intrinsic": "uint8x16_t vornq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vornq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorn_u16",
        "intrinsic": "uint16x4_t vorn_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorn_u16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vornq_u16",
        "intrinsic": "uint16x8_t vornq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vornq_u16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorn_u32",
        "intrinsic": "uint32x2_t vorn_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorn_u32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vornq_u32",
        "intrinsic": "uint32x4_t vornq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vornq_u32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vorn_u64",
        "intrinsic": "uint64x1_t vorn_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vorn_u64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ORN Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vornq_u64",
        "intrinsic": "uint64x2_t vornq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vornq_u64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ORN Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      }
    ],
    "Bit manipulation": [
      {
        "name": "vcls_s8",
        "intrinsic": "int8x8_t vcls_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcls_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CLS Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclsq_s8",
        "intrinsic": "int8x16_t vclsq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclsq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CLS Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcls_s16",
        "intrinsic": "int16x4_t vcls_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcls_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CLS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclsq_s16",
        "intrinsic": "int16x8_t vclsq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclsq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CLS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcls_s32",
        "intrinsic": "int32x2_t vcls_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcls_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CLS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclsq_s32",
        "intrinsic": "int32x4_t vclsq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclsq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CLS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcls_u8",
        "intrinsic": "int8x8_t vcls_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcls_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CLS Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclsq_u8",
        "intrinsic": "int8x16_t vclsq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclsq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CLS Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcls_u16",
        "intrinsic": "int16x4_t vcls_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcls_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CLS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclsq_u16",
        "intrinsic": "int16x8_t vclsq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclsq_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CLS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcls_u32",
        "intrinsic": "int32x2_t vcls_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcls_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CLS Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclsq_u32",
        "intrinsic": "int32x4_t vclsq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclsq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CLS Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclz_s8",
        "intrinsic": "int8x8_t vclz_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclz_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CLZ Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclzq_s8",
        "intrinsic": "int8x16_t vclzq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclzq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CLZ Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclz_s16",
        "intrinsic": "int16x4_t vclz_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclz_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CLZ Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclzq_s16",
        "intrinsic": "int16x8_t vclzq_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclzq_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CLZ Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclz_s32",
        "intrinsic": "int32x2_t vclz_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclz_s32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CLZ Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclzq_s32",
        "intrinsic": "int32x4_t vclzq_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclzq_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CLZ Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclz_u8",
        "intrinsic": "uint8x8_t vclz_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclz_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CLZ Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclzq_u8",
        "intrinsic": "uint8x16_t vclzq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclzq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CLZ Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclz_u16",
        "intrinsic": "uint16x4_t vclz_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclz_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "CLZ Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclzq_u16",
        "intrinsic": "uint16x8_t vclzq_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclzq_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "CLZ Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclz_u32",
        "intrinsic": "uint32x2_t vclz_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclz_u32",
        "argument_preparation": "a -> Vn.2S",
        "aarch64_instruction": "CLZ Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vclzq_u32",
        "intrinsic": "uint32x4_t vclzq_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclzq_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "CLZ Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcnt_s8",
        "intrinsic": "int8x8_t vcnt_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcnt_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CNT Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcntq_s8",
        "intrinsic": "int8x16_t vcntq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcntq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CNT Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcnt_u8",
        "intrinsic": "uint8x8_t vcnt_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcnt_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CNT Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcntq_u8",
        "intrinsic": "uint8x16_t vcntq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcntq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CNT Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcnt_p8",
        "intrinsic": "poly8x8_t vcnt_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcnt_p8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "CNT Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcntq_p8",
        "intrinsic": "poly8x16_t vcntq_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcntq_p8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "CNT Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbic_s8",
        "intrinsic": "int8x8_t vbic_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbic_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "BIC Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbicq_s8",
        "intrinsic": "int8x16_t vbicq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbicq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "BIC Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbic_s16",
        "intrinsic": "int16x4_t vbic_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbic_s16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "BIC Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbicq_s16",
        "intrinsic": "int16x8_t vbicq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbicq_s16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "BIC Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbic_s32",
        "intrinsic": "int32x2_t vbic_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbic_s32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "BIC Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbicq_s32",
        "intrinsic": "int32x4_t vbicq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbicq_s32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "BIC Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbic_s64",
        "intrinsic": "int64x1_t vbic_s64(int64x1_t a, int64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbic_s64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "BIC Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbicq_s64",
        "intrinsic": "int64x2_t vbicq_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbicq_s64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "BIC Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbic_u8",
        "intrinsic": "uint8x8_t vbic_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbic_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "BIC Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbicq_u8",
        "intrinsic": "uint8x16_t vbicq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbicq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "BIC Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbic_u16",
        "intrinsic": "uint16x4_t vbic_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbic_u16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "BIC Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbicq_u16",
        "intrinsic": "uint16x8_t vbicq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbicq_u16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "BIC Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbic_u32",
        "intrinsic": "uint32x2_t vbic_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbic_u32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "BIC Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbicq_u32",
        "intrinsic": "uint32x4_t vbicq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbicq_u32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "BIC Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbic_u64",
        "intrinsic": "uint64x1_t vbic_u64(uint64x1_t a, uint64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbic_u64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "BIC Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbicq_u64",
        "intrinsic": "uint64x2_t vbicq_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbicq_u64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "BIC Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_s8",
        "intrinsic": "int8x8_t vbsl_s8(uint8x8_t a, int8x8_t b, int8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_s8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_s8",
        "intrinsic": "int8x16_t vbslq_s8(uint8x16_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_s8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_s16",
        "intrinsic": "int16x4_t vbsl_s16(uint16x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_s16",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_s16",
        "intrinsic": "int16x8_t vbslq_s16(uint16x8_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_s16",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_s32",
        "intrinsic": "int32x2_t vbsl_s32(uint32x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_s32",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_s32",
        "intrinsic": "int32x4_t vbslq_s32(uint32x4_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_s32",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_s64",
        "intrinsic": "int64x1_t vbsl_s64(uint64x1_t a, int64x1_t b, int64x1_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_s64",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_s64",
        "intrinsic": "int64x2_t vbslq_s64(uint64x2_t a, int64x2_t b, int64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_s64",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_u8",
        "intrinsic": "uint8x8_t vbsl_u8(uint8x8_t a, uint8x8_t b, uint8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_u8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_u8",
        "intrinsic": "uint8x16_t vbslq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_u8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_u16",
        "intrinsic": "uint16x4_t vbsl_u16(uint16x4_t a, uint16x4_t b, uint16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_u16",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_u16",
        "intrinsic": "uint16x8_t vbslq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_u16",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_u32",
        "intrinsic": "uint32x2_t vbsl_u32(uint32x2_t a, uint32x2_t b, uint32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_u32",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_u32",
        "intrinsic": "uint32x4_t vbslq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_u32",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_u64",
        "intrinsic": "uint64x1_t vbsl_u64(uint64x1_t a, uint64x1_t b, uint64x1_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_u64",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_u64",
        "intrinsic": "uint64x2_t vbslq_u64(uint64x2_t a, uint64x2_t b, uint64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_u64",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_p64",
        "intrinsic": "poly64x1_t vbsl_p64(poly64x1_t a, poly64x1_t b, poly64x1_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_p64",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbslq_p64",
        "intrinsic": "poly64x2_t vbslq_p64(poly64x2_t a, poly64x2_t b, poly64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_p64",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbsl_f32",
        "intrinsic": "float32x2_t vbsl_f32(uint32x2_t a, float32x2_t b, float32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_f32",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_f32",
        "intrinsic": "float32x4_t vbslq_f32(uint32x4_t a, float32x4_t b, float32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_f32",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_p8",
        "intrinsic": "poly8x8_t vbsl_p8(uint8x8_t a, poly8x8_t b, poly8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_p8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_p8",
        "intrinsic": "poly8x16_t vbslq_p8(uint8x16_t a, poly8x16_t b, poly8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_p8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_p16",
        "intrinsic": "poly16x4_t vbsl_p16(uint16x4_t a, poly16x4_t b, poly16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_p16",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_p16",
        "intrinsic": "poly16x8_t vbslq_p16(uint16x8_t a, poly16x8_t b, poly16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_p16",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbsl_f64",
        "intrinsic": "float64x1_t vbsl_f64(uint64x1_t a, float64x1_t b, float64x1_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_f64",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbslq_f64",
        "intrinsic": "float64x2_t vbslq_f64(uint64x2_t a, float64x2_t b, float64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_f64",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbsl_mf8",
        "intrinsic": "mfloat8x8_t vbsl_mf8(uint8x8_t a, mfloat8x8_t b, mfloat8x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_mf8",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_mf8",
        "intrinsic": "mfloat8x16_t vbslq_mf8(uint8x16_t a, mfloat8x16_t b, mfloat8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_mf8",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      }
    ],
    "Vector manipulation": [
      {
        "name": "vcopy_lane_s8",
        "intrinsic": "int8x8_t vcopy_lane_s8(int8x8_t a, const int lane1, int8x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_s8",
        "argument_preparation": "a -> Vd.8B; 0 <= lane1 <= 7; b -> Vn.8B; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_s8",
        "intrinsic": "int8x16_t vcopyq_lane_s8(int8x16_t a, const int lane1, int8x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_s8",
        "argument_preparation": "a -> Vd.16B; 0 <= lane1 <= 15; b -> Vn.8B; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_s16",
        "intrinsic": "int16x4_t vcopy_lane_s16(int16x4_t a, const int lane1, int16x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_s16",
        "argument_preparation": "a -> Vd.4H; 0 <= lane1 <= 3; b -> Vn.4H; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_s16",
        "intrinsic": "int16x8_t vcopyq_lane_s16(int16x8_t a, const int lane1, int16x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_s16",
        "argument_preparation": "a -> Vd.8H; 0 <= lane1 <= 7; b -> Vn.4H; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_s32",
        "intrinsic": "int32x2_t vcopy_lane_s32(int32x2_t a, const int lane1, int32x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_s32",
        "argument_preparation": "a -> Vd.2S; 0 <= lane1 <= 1; b -> Vn.2S; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_s32",
        "intrinsic": "int32x4_t vcopyq_lane_s32(int32x4_t a, const int lane1, int32x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_s32",
        "argument_preparation": "a -> Vd.4S; 0 <= lane1 <= 3; b -> Vn.2S; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_s64",
        "intrinsic": "int64x1_t vcopy_lane_s64(int64x1_t a, const int lane1, int64x1_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_s64",
        "argument_preparation": "a -> UNUSED; 0 <= lane1 <= 0; b -> Vn.1D; 0 <= lane2 <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane2]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_s64",
        "intrinsic": "int64x2_t vcopyq_lane_s64(int64x2_t a, const int lane1, int64x1_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_s64",
        "argument_preparation": "a -> Vd.2D; 0 <= lane1 <= 1; b -> Vn.1D; 0 <= lane2 <= 0",
        "aarch64_instruction": "INS Vd.D[lane1],Vn.D[lane2]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_u8",
        "intrinsic": "uint8x8_t vcopy_lane_u8(uint8x8_t a, const int lane1, uint8x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_u8",
        "argument_preparation": "a -> Vd.8B; 0 <= lane1 <= 7; b -> Vn.8B; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_u8",
        "intrinsic": "uint8x16_t vcopyq_lane_u8(uint8x16_t a, const int lane1, uint8x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_u8",
        "argument_preparation": "a -> Vd.16B; 0 <= lane1 <= 15; b -> Vn.8B; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_u16",
        "intrinsic": "uint16x4_t vcopy_lane_u16(uint16x4_t a, const int lane1, uint16x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_u16",
        "argument_preparation": "a -> Vd.4H; 0 <= lane1 <= 3; b -> Vn.4H; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_u16",
        "intrinsic": "uint16x8_t vcopyq_lane_u16(uint16x8_t a, const int lane1, uint16x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_u16",
        "argument_preparation": "a -> Vd.8H; 0 <= lane1 <= 7; b -> Vn.4H; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_u32",
        "intrinsic": "uint32x2_t vcopy_lane_u32(uint32x2_t a, const int lane1, uint32x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_u32",
        "argument_preparation": "a -> Vd.2S; 0 <= lane1 <= 1; b -> Vn.2S; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_u32",
        "intrinsic": "uint32x4_t vcopyq_lane_u32(uint32x4_t a, const int lane1, uint32x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_u32",
        "argument_preparation": "a -> Vd.4S; 0 <= lane1 <= 3; b -> Vn.2S; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_u64",
        "intrinsic": "uint64x1_t vcopy_lane_u64(uint64x1_t a, const int lane1, uint64x1_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_u64",
        "argument_preparation": "a -> UNUSED; 0 <= lane1 <= 0; b -> Vn.1D; 0 <= lane2 <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane2]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_u64",
        "intrinsic": "uint64x2_t vcopyq_lane_u64(uint64x2_t a, const int lane1, uint64x1_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_u64",
        "argument_preparation": "a -> Vd.2D; 0 <= lane1 <= 1; b -> Vn.1D; 0 <= lane2 <= 0",
        "aarch64_instruction": "INS Vd.D[lane1],Vn.D[lane2]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_p64",
        "intrinsic": "poly64x1_t vcopy_lane_p64(poly64x1_t a, const int lane1, poly64x1_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_p64",
        "argument_preparation": "a -> UNUSED; 0 <= lane1 <= 0; b -> Vn.1D; 0 <= lane2 <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane2]",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcopyq_lane_p64",
        "intrinsic": "poly64x2_t vcopyq_lane_p64(poly64x2_t a, const int lane1, poly64x1_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_p64",
        "argument_preparation": "a -> Vd.2D; 0 <= lane1 <= 1; b -> Vn.1D; 0 <= lane2 <= 0",
        "aarch64_instruction": "INS Vd.D[lane1],Vn.D[lane2]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcopy_lane_f32",
        "intrinsic": "float32x2_t vcopy_lane_f32(float32x2_t a, const int lane1, float32x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_f32",
        "argument_preparation": "a -> Vd.2S; 0 <= lane1 <= 1; b -> Vn.2S; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_f32",
        "intrinsic": "float32x4_t vcopyq_lane_f32(float32x4_t a, const int lane1, float32x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_f32",
        "argument_preparation": "a -> Vd.4S; 0 <= lane1 <= 3; b -> Vn.2S; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_f64",
        "intrinsic": "float64x1_t vcopy_lane_f64(float64x1_t a, const int lane1, float64x1_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_f64",
        "argument_preparation": "a -> UNUSED; 0 <= lane1 <= 0; b -> Vn.1D; 0 <= lane2 <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane2]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_f64",
        "intrinsic": "float64x2_t vcopyq_lane_f64(float64x2_t a, const int lane1, float64x1_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_f64",
        "argument_preparation": "a -> Vd.2D; 0 <= lane1 <= 1; b -> Vn.1D; 0 <= lane2 <= 0",
        "aarch64_instruction": "INS Vd.D[lane1],Vn.D[lane2]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_p8",
        "intrinsic": "poly8x8_t vcopy_lane_p8(poly8x8_t a, const int lane1, poly8x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_p8",
        "argument_preparation": "a -> Vd.8B; 0 <= lane1 <= 7; b -> Vn.8B; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_p8",
        "intrinsic": "poly8x16_t vcopyq_lane_p8(poly8x16_t a, const int lane1, poly8x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_p8",
        "argument_preparation": "a -> Vd.16B; 0 <= lane1 <= 15; b -> Vn.8B; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_p16",
        "intrinsic": "poly16x4_t vcopy_lane_p16(poly16x4_t a, const int lane1, poly16x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_p16",
        "argument_preparation": "a -> Vd.4H; 0 <= lane1 <= 3; b -> Vn.4H; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_p16",
        "intrinsic": "poly16x8_t vcopyq_lane_p16(poly16x8_t a, const int lane1, poly16x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_p16",
        "argument_preparation": "a -> Vd.8H; 0 <= lane1 <= 7; b -> Vn.4H; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_lane_mf8",
        "intrinsic": "mfloat8x8_t vcopy_lane_mf8(mfloat8x8_t a, const int lane1, mfloat8x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_mf8",
        "argument_preparation": "a -> Vd.8B; 0 <= lane1 <= 7; b -> Vn.8B; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_mf8",
        "intrinsic": "mfloat8x16_t vcopyq_lane_mf8(mfloat8x16_t a, const int lane1, mfloat8x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_mf8",
        "argument_preparation": "a -> Vd.16B; 0 <= lane1 <= 15; b -> Vn.8B; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_s8",
        "intrinsic": "int8x8_t vcopy_laneq_s8(int8x8_t a, const int lane1, int8x16_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_s8",
        "argument_preparation": "a -> Vd.8B; 0 <= lane1 <= 7; b -> Vn.16B; 0 <= lane2 <= 15",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_s8",
        "intrinsic": "int8x16_t vcopyq_laneq_s8(int8x16_t a, const int lane1, int8x16_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_s8",
        "argument_preparation": "a -> Vd.16B; 0 <= lane1 <= 15; b -> Vn.16B; 0 <= lane2 <= 15",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_s16",
        "intrinsic": "int16x4_t vcopy_laneq_s16(int16x4_t a, const int lane1, int16x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_s16",
        "argument_preparation": "a -> Vd.4H; 0 <= lane1 <= 3; b -> Vn.8H; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_s16",
        "intrinsic": "int16x8_t vcopyq_laneq_s16(int16x8_t a, const int lane1, int16x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_s16",
        "argument_preparation": "a -> Vd.8H; 0 <= lane1 <= 7; b -> Vn.8H; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_s32",
        "intrinsic": "int32x2_t vcopy_laneq_s32(int32x2_t a, const int lane1, int32x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_s32",
        "argument_preparation": "a -> Vd.2S; 0 <= lane1 <= 1; b -> Vn.4S; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_s32",
        "intrinsic": "int32x4_t vcopyq_laneq_s32(int32x4_t a, const int lane1, int32x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_s32",
        "argument_preparation": "a -> Vd.4S; 0 <= lane1 <= 3; b -> Vn.4S; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_s64",
        "intrinsic": "int64x1_t vcopy_laneq_s64(int64x1_t a, const int lane1, int64x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_s64",
        "argument_preparation": "a -> UNUSED; 0 <= lane1 <= 0; b -> Vn.2D; 0 <= lane2 <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane2]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_s64",
        "intrinsic": "int64x2_t vcopyq_laneq_s64(int64x2_t a, const int lane1, int64x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_s64",
        "argument_preparation": "a -> Vd.2D; 0 <= lane1 <= 1; b -> Vn.2D; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.D[lane1],Vn.D[lane2]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_u8",
        "intrinsic": "uint8x8_t vcopy_laneq_u8(uint8x8_t a, const int lane1, uint8x16_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_u8",
        "argument_preparation": "a -> Vd.8B; 0 <= lane1 <= 7; b -> Vn.16B; 0 <= lane2 <= 15",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_u8",
        "intrinsic": "uint8x16_t vcopyq_laneq_u8(uint8x16_t a, const int lane1, uint8x16_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_u8",
        "argument_preparation": "a -> Vd.16B; 0 <= lane1 <= 15; b -> Vn.16B; 0 <= lane2 <= 15",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_u16",
        "intrinsic": "uint16x4_t vcopy_laneq_u16(uint16x4_t a, const int lane1, uint16x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_u16",
        "argument_preparation": "a -> Vd.4H; 0 <= lane1 <= 3; b -> Vn.8H; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_u16",
        "intrinsic": "uint16x8_t vcopyq_laneq_u16(uint16x8_t a, const int lane1, uint16x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_u16",
        "argument_preparation": "a -> Vd.8H; 0 <= lane1 <= 7; b -> Vn.8H; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_u32",
        "intrinsic": "uint32x2_t vcopy_laneq_u32(uint32x2_t a, const int lane1, uint32x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_u32",
        "argument_preparation": "a -> Vd.2S; 0 <= lane1 <= 1; b -> Vn.4S; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_u32",
        "intrinsic": "uint32x4_t vcopyq_laneq_u32(uint32x4_t a, const int lane1, uint32x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_u32",
        "argument_preparation": "a -> Vd.4S; 0 <= lane1 <= 3; b -> Vn.4S; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_u64",
        "intrinsic": "uint64x1_t vcopy_laneq_u64(uint64x1_t a, const int lane1, uint64x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_u64",
        "argument_preparation": "a -> UNUSED; 0 <= lane1 <= 0; b -> Vn.2D; 0 <= lane2 <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane2]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_u64",
        "intrinsic": "uint64x2_t vcopyq_laneq_u64(uint64x2_t a, const int lane1, uint64x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_u64",
        "argument_preparation": "a -> Vd.2D; 0 <= lane1 <= 1; b -> Vn.2D; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.D[lane1],Vn.D[lane2]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_p64",
        "intrinsic": "poly64x1_t vcopy_laneq_p64(poly64x1_t a, const int lane1, poly64x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_p64",
        "argument_preparation": "a -> UNUSED; 0 <= lane1 <= 0; b -> Vn.2D; 0 <= lane2 <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane2]",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcopyq_laneq_p64",
        "intrinsic": "poly64x2_t vcopyq_laneq_p64(poly64x2_t a, const int lane1, poly64x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_p64",
        "argument_preparation": "a -> Vd.2D; 0 <= lane1 <= 1; b -> Vn.2D; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.D[lane1],Vn.D[lane2]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcopy_laneq_f32",
        "intrinsic": "float32x2_t vcopy_laneq_f32(float32x2_t a, const int lane1, float32x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_f32",
        "argument_preparation": "a -> Vd.2S; 0 <= lane1 <= 1; b -> Vn.4S; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_f32",
        "intrinsic": "float32x4_t vcopyq_laneq_f32(float32x4_t a, const int lane1, float32x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_f32",
        "argument_preparation": "a -> Vd.4S; 0 <= lane1 <= 3; b -> Vn.4S; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.S[lane1],Vn.S[lane2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_f64",
        "intrinsic": "float64x1_t vcopy_laneq_f64(float64x1_t a, const int lane1, float64x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_f64",
        "argument_preparation": "a -> UNUSED; 0 <= lane1 <= 0; b -> Vn.2D; 0 <= lane2 <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane2]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_f64",
        "intrinsic": "float64x2_t vcopyq_laneq_f64(float64x2_t a, const int lane1, float64x2_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_f64",
        "argument_preparation": "a -> Vd.2D; 0 <= lane1 <= 1; b -> Vn.2D; 0 <= lane2 <= 1",
        "aarch64_instruction": "INS Vd.D[lane1],Vn.D[lane2]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_p8",
        "intrinsic": "poly8x8_t vcopy_laneq_p8(poly8x8_t a, const int lane1, poly8x16_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_p8",
        "argument_preparation": "a -> Vd.8B; 0 <= lane1 <= 7; b -> Vn.16B; 0 <= lane2 <= 15",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_p8",
        "intrinsic": "poly8x16_t vcopyq_laneq_p8(poly8x16_t a, const int lane1, poly8x16_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_p8",
        "argument_preparation": "a -> Vd.16B; 0 <= lane1 <= 15; b -> Vn.16B; 0 <= lane2 <= 15",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_p16",
        "intrinsic": "poly16x4_t vcopy_laneq_p16(poly16x4_t a, const int lane1, poly16x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_p16",
        "argument_preparation": "a -> Vd.4H; 0 <= lane1 <= 3; b -> Vn.8H; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_p16",
        "intrinsic": "poly16x8_t vcopyq_laneq_p16(poly16x8_t a, const int lane1, poly16x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_p16",
        "argument_preparation": "a -> Vd.8H; 0 <= lane1 <= 7; b -> Vn.8H; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_mf8",
        "intrinsic": "mfloat8x8_t vcopy_laneq_mf8(mfloat8x8_t a, const int lane1, mfloat8x16_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_mf8",
        "argument_preparation": "a -> Vd.8B; 0 <= lane1 <= 7; b -> Vn.16B; 0 <= lane2 <= 15",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_mf8",
        "intrinsic": "mfloat8x16_t vcopyq_laneq_mf8(mfloat8x16_t a, const int lane1, mfloat8x16_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_mf8",
        "argument_preparation": "a -> Vd.16B; 0 <= lane1 <= 15; b -> Vn.16B; 0 <= lane2 <= 15",
        "aarch64_instruction": "INS Vd.B[lane1],Vn.B[lane2]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrbit_s8",
        "intrinsic": "int8x8_t vrbit_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrbit_s8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "RBIT Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrbitq_s8",
        "intrinsic": "int8x16_t vrbitq_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrbitq_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "RBIT Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrbit_u8",
        "intrinsic": "uint8x8_t vrbit_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrbit_u8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "RBIT Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrbitq_u8",
        "intrinsic": "uint8x16_t vrbitq_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrbitq_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "RBIT Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrbit_p8",
        "intrinsic": "poly8x8_t vrbit_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrbit_p8",
        "argument_preparation": "a -> Vn.8B",
        "aarch64_instruction": "RBIT Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrbitq_p8",
        "intrinsic": "poly8x16_t vrbitq_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrbitq_p8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "RBIT Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcreate_s8",
        "intrinsic": "int8x8_t vcreate_s8(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_s8",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_s16",
        "intrinsic": "int16x4_t vcreate_s16(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_s16",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_s32",
        "intrinsic": "int32x2_t vcreate_s32(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_s32",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_s64",
        "intrinsic": "int64x1_t vcreate_s64(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_s64",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_u8",
        "intrinsic": "uint8x8_t vcreate_u8(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_u8",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_u16",
        "intrinsic": "uint16x4_t vcreate_u16(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_u16",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_u32",
        "intrinsic": "uint32x2_t vcreate_u32(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_u32",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_u64",
        "intrinsic": "uint64x1_t vcreate_u64(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_u64",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_p64",
        "intrinsic": "poly64x1_t vcreate_p64(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_p64",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcreate_f16",
        "intrinsic": "float16x4_t vcreate_f16(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_f16",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_f32",
        "intrinsic": "float32x2_t vcreate_f32(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_f32",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_p8",
        "intrinsic": "poly8x8_t vcreate_p8(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_p8",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_p16",
        "intrinsic": "poly16x4_t vcreate_p16(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_p16",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcreate_f64",
        "intrinsic": "float64x1_t vcreate_f64(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_f64",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcreate_mf8",
        "intrinsic": "mfloat8x8_t vcreate_mf8(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_mf8",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_n_s8",
        "intrinsic": "int8x8_t vdup_n_s8(int8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_s8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8B,rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_s8",
        "intrinsic": "int8x16_t vdupq_n_s8(int8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_s8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.16B,rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_s16",
        "intrinsic": "int16x4_t vdup_n_s16(int16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_s16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_s16",
        "intrinsic": "int16x8_t vdupq_n_s16(int16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_s16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_s32",
        "intrinsic": "int32x2_t vdup_n_s32(int32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_s32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2S,rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_s32",
        "intrinsic": "int32x4_t vdupq_n_s32(int32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_s32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4S,rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_s64",
        "intrinsic": "int64x1_t vdup_n_s64(int64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_s64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "INS Dd.D[0],xn",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_s64",
        "intrinsic": "int64x2_t vdupq_n_s64(int64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_s64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2D,rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_u8",
        "intrinsic": "uint8x8_t vdup_n_u8(uint8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_u8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8B,rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_u8",
        "intrinsic": "uint8x16_t vdupq_n_u8(uint8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_u8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.16B,rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_u16",
        "intrinsic": "uint16x4_t vdup_n_u16(uint16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_u16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_u16",
        "intrinsic": "uint16x8_t vdupq_n_u16(uint16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_u16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_u32",
        "intrinsic": "uint32x2_t vdup_n_u32(uint32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_u32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2S,rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_u32",
        "intrinsic": "uint32x4_t vdupq_n_u32(uint32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_u32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4S,rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_u64",
        "intrinsic": "uint64x1_t vdup_n_u64(uint64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_u64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "INS Dd.D[0],xn",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_u64",
        "intrinsic": "uint64x2_t vdupq_n_u64(uint64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_u64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2D,rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_p64",
        "intrinsic": "poly64x1_t vdup_n_p64(poly64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_p64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "INS Dd.D[0],xn",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdupq_n_p64",
        "intrinsic": "poly64x2_t vdupq_n_p64(poly64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_p64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2D,rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdup_n_f32",
        "intrinsic": "float32x2_t vdup_n_f32(float32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_f32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2S,rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_f32",
        "intrinsic": "float32x4_t vdupq_n_f32(float32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_f32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4S,rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_p8",
        "intrinsic": "poly8x8_t vdup_n_p8(poly8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_p8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8B,rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_p8",
        "intrinsic": "poly8x16_t vdupq_n_p8(poly8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_p8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.16B,rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_p16",
        "intrinsic": "poly16x4_t vdup_n_p16(poly16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_p16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_p16",
        "intrinsic": "poly16x8_t vdupq_n_p16(poly16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_p16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_n_f64",
        "intrinsic": "float64x1_t vdup_n_f64(float64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_f64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "INS Dd.D[0],xn",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_n_f64",
        "intrinsic": "float64x2_t vdupq_n_f64(float64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_f64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2D,rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_n_mf8",
        "intrinsic": "mfloat8x8_t vdup_n_mf8(mfloat8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_mf8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8B,rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_n_mf8",
        "intrinsic": "mfloat8x16_t vdupq_n_mf8(mfloat8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_mf8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.16B,rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmov_n_s8",
        "intrinsic": "int8x8_t vmov_n_s8(int8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_s8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8B,rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_s8",
        "intrinsic": "int8x16_t vmovq_n_s8(int8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_s8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.16B,rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_s16",
        "intrinsic": "int16x4_t vmov_n_s16(int16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_s16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_s16",
        "intrinsic": "int16x8_t vmovq_n_s16(int16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_s16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_s32",
        "intrinsic": "int32x2_t vmov_n_s32(int32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_s32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2S,rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_s32",
        "intrinsic": "int32x4_t vmovq_n_s32(int32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_s32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4S,rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_s64",
        "intrinsic": "int64x1_t vmov_n_s64(int64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_s64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.1D,rn",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_s64",
        "intrinsic": "int64x2_t vmovq_n_s64(int64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_s64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2D,rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_u8",
        "intrinsic": "uint8x8_t vmov_n_u8(uint8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_u8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8B,rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_u8",
        "intrinsic": "uint8x16_t vmovq_n_u8(uint8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_u8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.16B,rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_u16",
        "intrinsic": "uint16x4_t vmov_n_u16(uint16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_u16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_u16",
        "intrinsic": "uint16x8_t vmovq_n_u16(uint16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_u16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_u32",
        "intrinsic": "uint32x2_t vmov_n_u32(uint32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_u32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2S,rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_u32",
        "intrinsic": "uint32x4_t vmovq_n_u32(uint32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_u32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4S,rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_u64",
        "intrinsic": "uint64x1_t vmov_n_u64(uint64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_u64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.1D,rn",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_u64",
        "intrinsic": "uint64x2_t vmovq_n_u64(uint64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_u64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2D,rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_f32",
        "intrinsic": "float32x2_t vmov_n_f32(float32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_f32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2S,rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_f32",
        "intrinsic": "float32x4_t vmovq_n_f32(float32_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_f32",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4S,rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_p8",
        "intrinsic": "poly8x8_t vmov_n_p8(poly8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_p8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8B,rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_p8",
        "intrinsic": "poly8x16_t vmovq_n_p8(poly8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_p8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.16B,rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_p16",
        "intrinsic": "poly16x4_t vmov_n_p16(poly16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_p16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_p16",
        "intrinsic": "poly16x8_t vmovq_n_p16(poly16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_p16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmov_n_f64",
        "intrinsic": "float64x1_t vmov_n_f64(float64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_f64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.1D,rn",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmovq_n_f64",
        "intrinsic": "float64x2_t vmovq_n_f64(float64_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_f64",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.2D,rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmov_n_mf8",
        "intrinsic": "mfloat8x8_t vmov_n_mf8(mfloat8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_mf8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8B,rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmovq_n_mf8",
        "intrinsic": "mfloat8x16_t vmovq_n_mf8(mfloat8_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_mf8",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.16B,rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_lane_s8",
        "intrinsic": "int8x8_t vdup_lane_s8(int8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_s8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8B,Vn.B[lane]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_s8",
        "intrinsic": "int8x16_t vdupq_lane_s8(int8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_s8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.16B,Vn.B[lane]",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_s16",
        "intrinsic": "int16x4_t vdup_lane_s16(int16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_s16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_s16",
        "intrinsic": "int16x8_t vdupq_lane_s16(int16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_s16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_s32",
        "intrinsic": "int32x2_t vdup_lane_s32(int32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_s32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.2S,Vn.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_s32",
        "intrinsic": "int32x4_t vdupq_lane_s32(int32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_s32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.4S,Vn.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_s64",
        "intrinsic": "int64x1_t vdup_lane_s64(int64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_s64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_s64",
        "intrinsic": "int64x2_t vdupq_lane_s64(int64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_s64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Vd.2D,Vn.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_u8",
        "intrinsic": "uint8x8_t vdup_lane_u8(uint8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_u8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8B,Vn.B[lane]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_u8",
        "intrinsic": "uint8x16_t vdupq_lane_u8(uint8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_u8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.16B,Vn.B[lane]",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_u16",
        "intrinsic": "uint16x4_t vdup_lane_u16(uint16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_u16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_u16",
        "intrinsic": "uint16x8_t vdupq_lane_u16(uint16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_u16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_u32",
        "intrinsic": "uint32x2_t vdup_lane_u32(uint32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_u32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.2S,Vn.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_u32",
        "intrinsic": "uint32x4_t vdupq_lane_u32(uint32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_u32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.4S,Vn.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_u64",
        "intrinsic": "uint64x1_t vdup_lane_u64(uint64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_u64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_u64",
        "intrinsic": "uint64x2_t vdupq_lane_u64(uint64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_u64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Vd.2D,Vn.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_p64",
        "intrinsic": "poly64x1_t vdup_lane_p64(poly64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_p64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdupq_lane_p64",
        "intrinsic": "poly64x2_t vdupq_lane_p64(poly64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_p64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Vd.2D,Vn.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdup_lane_f32",
        "intrinsic": "float32x2_t vdup_lane_f32(float32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_f32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.2S,Vn.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_f32",
        "intrinsic": "float32x4_t vdupq_lane_f32(float32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_f32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.4S,Vn.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_p8",
        "intrinsic": "poly8x8_t vdup_lane_p8(poly8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_p8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8B,Vn.B[lane]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_p8",
        "intrinsic": "poly8x16_t vdupq_lane_p8(poly8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_p8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.16B,Vn.B[lane]",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_p16",
        "intrinsic": "poly16x4_t vdup_lane_p16(poly16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_p16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_p16",
        "intrinsic": "poly16x8_t vdupq_lane_p16(poly16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_p16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_f64",
        "intrinsic": "float64x1_t vdup_lane_f64(float64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_f64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_lane_f64",
        "intrinsic": "float64x2_t vdupq_lane_f64(float64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_f64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Vd.2D,Vn.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_lane_mf8",
        "intrinsic": "mfloat8x8_t vdup_lane_mf8(mfloat8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_mf8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8B,Vn.B[lane]",
        "result": "Vd.8B -> result",
        "supported_architectures": "/A64"
      },
      {
        "name": "vdupq_lane_mf8",
        "intrinsic": "mfloat8x16_t vdupq_lane_mf8(mfloat8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_mf8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.16B,Vn.B[lane]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_s8",
        "intrinsic": "int8x8_t vdup_laneq_s8(int8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_s8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Vd.8B,Vn.B[lane]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_s8",
        "intrinsic": "int8x16_t vdupq_laneq_s8(int8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_s8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Vd.16B,Vn.B[lane]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_s16",
        "intrinsic": "int16x4_t vdup_laneq_s16(int16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_s16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_s16",
        "intrinsic": "int16x8_t vdupq_laneq_s16(int16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_s16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_s32",
        "intrinsic": "int32x2_t vdup_laneq_s32(int32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_s32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.2S,Vn.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_s32",
        "intrinsic": "int32x4_t vdupq_laneq_s32(int32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_s32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.4S,Vn.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_s64",
        "intrinsic": "int64x1_t vdup_laneq_s64(int64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_s64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_s64",
        "intrinsic": "int64x2_t vdupq_laneq_s64(int64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_s64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.2D,Vn.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_u8",
        "intrinsic": "uint8x8_t vdup_laneq_u8(uint8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_u8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Vd.8B,Vn.B[lane]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_u8",
        "intrinsic": "uint8x16_t vdupq_laneq_u8(uint8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_u8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Vd.16B,Vn.B[lane]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_u16",
        "intrinsic": "uint16x4_t vdup_laneq_u16(uint16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_u16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_u16",
        "intrinsic": "uint16x8_t vdupq_laneq_u16(uint16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_u16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_u32",
        "intrinsic": "uint32x2_t vdup_laneq_u32(uint32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_u32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.2S,Vn.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_u32",
        "intrinsic": "uint32x4_t vdupq_laneq_u32(uint32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_u32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.4S,Vn.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_u64",
        "intrinsic": "uint64x1_t vdup_laneq_u64(uint64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_u64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_u64",
        "intrinsic": "uint64x2_t vdupq_laneq_u64(uint64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_u64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.2D,Vn.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_p64",
        "intrinsic": "poly64x1_t vdup_laneq_p64(poly64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_p64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_p64",
        "intrinsic": "poly64x2_t vdupq_laneq_p64(poly64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_p64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.2D,Vn.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_f32",
        "intrinsic": "float32x2_t vdup_laneq_f32(float32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_f32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.2S,Vn.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_f32",
        "intrinsic": "float32x4_t vdupq_laneq_f32(float32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_f32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.4S,Vn.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_p8",
        "intrinsic": "poly8x8_t vdup_laneq_p8(poly8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_p8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Vd.8B,Vn.B[lane]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_p8",
        "intrinsic": "poly8x16_t vdupq_laneq_p8(poly8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_p8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Vd.16B,Vn.B[lane]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_p16",
        "intrinsic": "poly16x4_t vdup_laneq_p16(poly16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_p16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_p16",
        "intrinsic": "poly16x8_t vdupq_laneq_p16(poly16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_p16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_f64",
        "intrinsic": "float64x1_t vdup_laneq_f64(float64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_f64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_f64",
        "intrinsic": "float64x2_t vdupq_laneq_f64(float64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_f64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Vd.2D,Vn.D[lane]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_laneq_mf8",
        "intrinsic": "mfloat8x8_t vdup_laneq_mf8(mfloat8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_mf8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Vd.8B,Vn.B[lane]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_mf8",
        "intrinsic": "mfloat8x16_t vdupq_laneq_mf8(mfloat8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_mf8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Vd.16B,Vn.B[lane]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcombine_s8",
        "intrinsic": "int8x16_t vcombine_s8(int8x8_t low, int8x8_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_s8",
        "argument_preparation": "low -> Vn.8B; high -> Vm.8B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_s16",
        "intrinsic": "int16x8_t vcombine_s16(int16x4_t low, int16x4_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_s16",
        "argument_preparation": "low -> Vn.4H; high -> Vm.4H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_s32",
        "intrinsic": "int32x4_t vcombine_s32(int32x2_t low, int32x2_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_s32",
        "argument_preparation": "low -> Vn.2S; high -> Vm.2S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_s64",
        "intrinsic": "int64x2_t vcombine_s64(int64x1_t low, int64x1_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_s64",
        "argument_preparation": "low -> Vn.1D; high -> Vm.1D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_u8",
        "intrinsic": "uint8x16_t vcombine_u8(uint8x8_t low, uint8x8_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_u8",
        "argument_preparation": "low -> Vn.8B; high -> Vm.8B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_u16",
        "intrinsic": "uint16x8_t vcombine_u16(uint16x4_t low, uint16x4_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_u16",
        "argument_preparation": "low -> Vn.4H; high -> Vm.4H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_u32",
        "intrinsic": "uint32x4_t vcombine_u32(uint32x2_t low, uint32x2_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_u32",
        "argument_preparation": "low -> Vn.2S; high -> Vm.2S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_u64",
        "intrinsic": "uint64x2_t vcombine_u64(uint64x1_t low, uint64x1_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_u64",
        "argument_preparation": "low -> Vn.1D; high -> Vm.1D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_p64",
        "intrinsic": "poly64x2_t vcombine_p64(poly64x1_t low, poly64x1_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_p64",
        "argument_preparation": "low -> Vn.1D; high -> Vm.1D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcombine_f16",
        "intrinsic": "float16x8_t vcombine_f16(float16x4_t low, float16x4_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_f16",
        "argument_preparation": "low -> Vn.4H; high -> Vm.4H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_f32",
        "intrinsic": "float32x4_t vcombine_f32(float32x2_t low, float32x2_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_f32",
        "argument_preparation": "low -> Vn.2S; high -> Vm.2S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_p8",
        "intrinsic": "poly8x16_t vcombine_p8(poly8x8_t low, poly8x8_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_p8",
        "argument_preparation": "low -> Vn.8B; high -> Vm.8B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_p16",
        "intrinsic": "poly16x8_t vcombine_p16(poly16x4_t low, poly16x4_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_p16",
        "argument_preparation": "low -> Vn.4H; high -> Vm.4H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vcombine_f64",
        "intrinsic": "float64x2_t vcombine_f64(float64x1_t low, float64x1_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_f64",
        "argument_preparation": "low -> Vn.1D; high -> Vm.1D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcombine_mf8",
        "intrinsic": "mfloat8x16_t vcombine_mf8(mfloat8x8_t low, mfloat8x8_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_mf8",
        "argument_preparation": "low -> Vn.8B; high -> Vm.8B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vget_high_s8",
        "intrinsic": "int8x8_t vget_high_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_s16",
        "intrinsic": "int16x4_t vget_high_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_s32",
        "intrinsic": "int32x2_t vget_high_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_s64",
        "intrinsic": "int64x1_t vget_high_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_u8",
        "intrinsic": "uint8x8_t vget_high_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_u16",
        "intrinsic": "uint16x4_t vget_high_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_u32",
        "intrinsic": "uint32x2_t vget_high_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_u64",
        "intrinsic": "uint64x1_t vget_high_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_u64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_p64",
        "intrinsic": "poly64x1_t vget_high_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_p64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vget_high_f16",
        "intrinsic": "float16x4_t vget_high_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_f32",
        "intrinsic": "float32x2_t vget_high_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_p8",
        "intrinsic": "poly8x8_t vget_high_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_p8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_p16",
        "intrinsic": "poly16x4_t vget_high_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_p16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_high_f64",
        "intrinsic": "float64x1_t vget_high_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vget_high_mf8",
        "intrinsic": "mfloat8x8_t vget_high_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_mf8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vget_low_s8",
        "intrinsic": "int8x8_t vget_low_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_s8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_s16",
        "intrinsic": "int16x4_t vget_low_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_s32",
        "intrinsic": "int32x2_t vget_low_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_s32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_s64",
        "intrinsic": "int64x1_t vget_low_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_s64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_u8",
        "intrinsic": "uint8x8_t vget_low_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_u8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_u16",
        "intrinsic": "uint16x4_t vget_low_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_u32",
        "intrinsic": "uint32x2_t vget_low_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_u32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_u64",
        "intrinsic": "uint64x1_t vget_low_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_u64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_p64",
        "intrinsic": "poly64x1_t vget_low_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_p64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vget_low_f16",
        "intrinsic": "float16x4_t vget_low_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_f32",
        "intrinsic": "float32x2_t vget_low_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_p8",
        "intrinsic": "poly8x8_t vget_low_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_p8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_p16",
        "intrinsic": "poly16x4_t vget_low_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_p16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_low_f64",
        "intrinsic": "float64x1_t vget_low_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_f64",
        "argument_preparation": "a -> Vn.2D",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vget_low_mf8",
        "intrinsic": "mfloat8x8_t vget_low_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_mf8",
        "argument_preparation": "a -> Vn.16B",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupb_lane_s8",
        "intrinsic": "int8_t vdupb_lane_s8(int8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupb_lane_s8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vduph_lane_s16",
        "intrinsic": "int16_t vduph_lane_s16(int16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_lane_s16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdups_lane_s32",
        "intrinsic": "int32_t vdups_lane_s32(int32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdups_lane_s32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Sd,Vn.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupd_lane_s64",
        "intrinsic": "int64_t vdupd_lane_s64(int64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupd_lane_s64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupb_lane_u8",
        "intrinsic": "uint8_t vdupb_lane_u8(uint8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupb_lane_u8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vduph_lane_u16",
        "intrinsic": "uint16_t vduph_lane_u16(uint16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_lane_u16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdups_lane_u32",
        "intrinsic": "uint32_t vdups_lane_u32(uint32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdups_lane_u32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Sd,Vn.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupd_lane_u64",
        "intrinsic": "uint64_t vdupd_lane_u64(uint64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupd_lane_u64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdups_lane_f32",
        "intrinsic": "float32_t vdups_lane_f32(float32x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdups_lane_f32",
        "argument_preparation": "vec -> Vn.2S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Sd,Vn.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupd_lane_f64",
        "intrinsic": "float64_t vdupd_lane_f64(float64x1_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupd_lane_f64",
        "argument_preparation": "vec -> Vn.1D; 0 <= lane <= 0",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupb_lane_p8",
        "intrinsic": "poly8_t vdupb_lane_p8(poly8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupb_lane_p8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vduph_lane_p16",
        "intrinsic": "poly16_t vduph_lane_p16(poly16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_lane_p16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupb_lane_mf8",
        "intrinsic": "mfloat8_t vdupb_lane_mf8(mfloat8x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupb_lane_mf8",
        "argument_preparation": "vec -> Vn.8B; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupb_laneq_s8",
        "intrinsic": "int8_t vdupb_laneq_s8(int8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupb_laneq_s8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vduph_laneq_s16",
        "intrinsic": "int16_t vduph_laneq_s16(int16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_laneq_s16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdups_laneq_s32",
        "intrinsic": "int32_t vdups_laneq_s32(int32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdups_laneq_s32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Sd,Vn.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupd_laneq_s64",
        "intrinsic": "int64_t vdupd_laneq_s64(int64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupd_laneq_s64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupb_laneq_u8",
        "intrinsic": "uint8_t vdupb_laneq_u8(uint8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupb_laneq_u8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vduph_laneq_u16",
        "intrinsic": "uint16_t vduph_laneq_u16(uint16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_laneq_u16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdups_laneq_u32",
        "intrinsic": "uint32_t vdups_laneq_u32(uint32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdups_laneq_u32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Sd,Vn.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupd_laneq_u64",
        "intrinsic": "uint64_t vdupd_laneq_u64(uint64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupd_laneq_u64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdups_laneq_f32",
        "intrinsic": "float32_t vdups_laneq_f32(float32x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdups_laneq_f32",
        "argument_preparation": "vec -> Vn.4S; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Sd,Vn.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupd_laneq_f64",
        "intrinsic": "float64_t vdupd_laneq_f64(float64x2_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupd_laneq_f64",
        "argument_preparation": "vec -> Vn.2D; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupb_laneq_p8",
        "intrinsic": "poly8_t vdupb_laneq_p8(poly8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupb_laneq_p8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vduph_laneq_p16",
        "intrinsic": "poly16_t vduph_laneq_p16(poly16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_laneq_p16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupb_laneq_mf8",
        "intrinsic": "mfloat8_t vdupb_laneq_mf8(mfloat8x16_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupb_laneq_mf8",
        "argument_preparation": "vec -> Vn.16B; 0 <= lane <= 15",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vget_lane_u8",
        "intrinsic": "uint8_t vget_lane_u8(uint8x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_u8",
        "argument_preparation": "0<=lane<=7; v -> Vn.8B",
        "aarch64_instruction": "UMOV Rd,Vn.B[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_u16",
        "intrinsic": "uint16_t vget_lane_u16(uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_u16",
        "argument_preparation": "0<=lane<=3; v -> Vn.4H",
        "aarch64_instruction": "UMOV Rd,Vn.H[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_u32",
        "intrinsic": "uint32_t vget_lane_u32(uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_u32",
        "argument_preparation": "0<=lane<=1; v -> Vn.2S",
        "aarch64_instruction": "UMOV Rd,Vn.S[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_u64",
        "intrinsic": "uint64_t vget_lane_u64(uint64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_u64",
        "argument_preparation": "lane==0; v -> Vn.1D",
        "aarch64_instruction": "UMOV Rd,Vn.D[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_p64",
        "intrinsic": "poly64_t vget_lane_p64(poly64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_p64",
        "argument_preparation": "lane==0; v -> Vn.1D",
        "aarch64_instruction": "UMOV Rd,Vn.D[lane]",
        "result": "Rd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vget_lane_s8",
        "intrinsic": "int8_t vget_lane_s8(int8x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_s8",
        "argument_preparation": "0<=lane<=7; v -> Vn.8B",
        "aarch64_instruction": "SMOV Rd,Vn.B[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_s16",
        "intrinsic": "int16_t vget_lane_s16(int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_s16",
        "argument_preparation": "0<=lane<=3; v -> Vn.4H",
        "aarch64_instruction": "SMOV Rd,Vn.H[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_s32",
        "intrinsic": "int32_t vget_lane_s32(int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_s32",
        "argument_preparation": "0<=lane<=1; v -> Vn.2S",
        "aarch64_instruction": "SMOV Rd,Vn.S[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_s64",
        "intrinsic": "int64_t vget_lane_s64(int64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_s64",
        "argument_preparation": "lane==0; v -> Vn.1D",
        "aarch64_instruction": "UMOV Rd,Vn.D[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_p8",
        "intrinsic": "poly8_t vget_lane_p8(poly8x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_p8",
        "argument_preparation": "0<=lane<=7; v -> Vn.8B",
        "aarch64_instruction": "UMOV Rd,Vn.B[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_p16",
        "intrinsic": "poly16_t vget_lane_p16(poly16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_p16",
        "argument_preparation": "0<=lane<=3; v -> Vn.4H",
        "aarch64_instruction": "UMOV Rd,Vn.H[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_mf8",
        "intrinsic": "mfloat8_t vget_lane_mf8(mfloat8x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_mf8",
        "argument_preparation": "0<=lane<=7; v -> Vn.8B",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_f16",
        "intrinsic": "float16_t vget_lane_f16(float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_f16",
        "argument_preparation": "0<=lane<=3; v -> Vn.4H",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_f32",
        "intrinsic": "float32_t vget_lane_f32(float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_f32",
        "argument_preparation": "0<=lane<=1; v -> Vn.2S",
        "aarch64_instruction": "DUP Sd,Vn.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vget_lane_f64",
        "intrinsic": "float64_t vget_lane_f64(float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_f64",
        "argument_preparation": "lane==0; v -> Vn.1D",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vgetq_lane_u8",
        "intrinsic": "uint8_t vgetq_lane_u8(uint8x16_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_u8",
        "argument_preparation": "0<=lane<=15; v -> Vn.16B",
        "aarch64_instruction": "UMOV Rd,Vn.B[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_u16",
        "intrinsic": "uint16_t vgetq_lane_u16(uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_u16",
        "argument_preparation": "0<=lane<=7; v -> Vn.8H",
        "aarch64_instruction": "UMOV Rd,Vn.H[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_u32",
        "intrinsic": "uint32_t vgetq_lane_u32(uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_u32",
        "argument_preparation": "0<=lane<=3; v -> Vn.4S",
        "aarch64_instruction": "UMOV Rd,Vn.S[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_u64",
        "intrinsic": "uint64_t vgetq_lane_u64(uint64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_u64",
        "argument_preparation": "0<=lane<=1; v -> Vn.2D",
        "aarch64_instruction": "UMOV Rd,Vn.D[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_p64",
        "intrinsic": "poly64_t vgetq_lane_p64(poly64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_p64",
        "argument_preparation": "0<=lane<=1; v -> Vn.2D",
        "aarch64_instruction": "UMOV Rd,Vn.D[lane]",
        "result": "Rd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vgetq_lane_s8",
        "intrinsic": "int8_t vgetq_lane_s8(int8x16_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_s8",
        "argument_preparation": "0<=lane<=15; v -> Vn.16B",
        "aarch64_instruction": "SMOV Rd,Vn.B[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_s16",
        "intrinsic": "int16_t vgetq_lane_s16(int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_s16",
        "argument_preparation": "0<=lane<=7; v -> Vn.8H",
        "aarch64_instruction": "SMOV Rd,Vn.H[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_s32",
        "intrinsic": "int32_t vgetq_lane_s32(int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_s32",
        "argument_preparation": "0<=lane<=3; v -> Vn.4S",
        "aarch64_instruction": "SMOV Rd,Vn.S[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_s64",
        "intrinsic": "int64_t vgetq_lane_s64(int64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_s64",
        "argument_preparation": "0<=lane<=1; v -> Vn.2D",
        "aarch64_instruction": "UMOV Rd,Vn.D[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_p8",
        "intrinsic": "poly8_t vgetq_lane_p8(poly8x16_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_p8",
        "argument_preparation": "0<=lane<=15; v -> Vn.16B",
        "aarch64_instruction": "UMOV Rd,Vn.B[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_p16",
        "intrinsic": "poly16_t vgetq_lane_p16(poly16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_p16",
        "argument_preparation": "0<=lane<=7; v -> Vn.8H",
        "aarch64_instruction": "UMOV Rd,Vn.H[lane]",
        "result": "Rd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_mf8",
        "intrinsic": "mfloat8_t vgetq_lane_mf8(mfloat8x16_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_mf8",
        "argument_preparation": "0<=lane<=15; v -> Vn.16B",
        "aarch64_instruction": "DUP Bd,Vn.B[lane]",
        "result": "Bd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_f16",
        "intrinsic": "float16_t vgetq_lane_f16(float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_f16",
        "argument_preparation": "0<=lane<=7; v -> Vn.8H",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_f32",
        "intrinsic": "float32_t vgetq_lane_f32(float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_f32",
        "argument_preparation": "0<=lane<=3; v -> Vn.4S",
        "aarch64_instruction": "DUP Sd,Vn.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vgetq_lane_f64",
        "intrinsic": "float64_t vgetq_lane_f64(float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_f64",
        "argument_preparation": "0<=lane<=1; v -> Vn.2D",
        "aarch64_instruction": "DUP Dd,Vn.D[lane]",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vext_s8",
        "intrinsic": "int8x8_t vext_s8(int8x8_t a, int8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 7",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_s8",
        "intrinsic": "int8x16_t vextq_s8(int8x16_t a, int8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 15",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_s16",
        "intrinsic": "int16x4_t vext_s16(int16x4_t a, int16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_s16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 3",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<1)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_s16",
        "intrinsic": "int16x8_t vextq_s16(int16x8_t a, int16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_s16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 7",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<1)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_s32",
        "intrinsic": "int32x2_t vext_s32(int32x2_t a, int32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_s32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 1",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<2)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_s32",
        "intrinsic": "int32x4_t vextq_s32(int32x4_t a, int32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_s32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 3",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<2)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_s64",
        "intrinsic": "int64x1_t vext_s64(int64x1_t a, int64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_s64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; n == 0",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<3)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_s64",
        "intrinsic": "int64x2_t vextq_s64(int64x2_t a, int64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_s64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 1",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<3)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_u8",
        "intrinsic": "uint8x8_t vext_u8(uint8x8_t a, uint8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 7",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_u8",
        "intrinsic": "uint8x16_t vextq_u8(uint8x16_t a, uint8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 15",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_u16",
        "intrinsic": "uint16x4_t vext_u16(uint16x4_t a, uint16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_u16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 3",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<1)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_u16",
        "intrinsic": "uint16x8_t vextq_u16(uint16x8_t a, uint16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_u16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 7",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<1)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_u32",
        "intrinsic": "uint32x2_t vext_u32(uint32x2_t a, uint32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_u32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 1",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<2)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_u32",
        "intrinsic": "uint32x4_t vextq_u32(uint32x4_t a, uint32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_u32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 3",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<2)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_u64",
        "intrinsic": "uint64x1_t vext_u64(uint64x1_t a, uint64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_u64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; n == 0",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<3)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_u64",
        "intrinsic": "uint64x2_t vextq_u64(uint64x2_t a, uint64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_u64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 1",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<3)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_p64",
        "intrinsic": "poly64x1_t vext_p64(poly64x1_t a, poly64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_p64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; n == 0",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<3)",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vextq_p64",
        "intrinsic": "poly64x2_t vextq_p64(poly64x2_t a, poly64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_p64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 1",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<3)",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vext_f32",
        "intrinsic": "float32x2_t vext_f32(float32x2_t a, float32x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_f32",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 1",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<2)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_f32",
        "intrinsic": "float32x4_t vextq_f32(float32x4_t a, float32x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_f32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 3",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<2)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_f64",
        "intrinsic": "float64x1_t vext_f64(float64x1_t a, float64x1_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_f64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; n == 0",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<3)",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vextq_f64",
        "intrinsic": "float64x2_t vextq_f64(float64x2_t a, float64x2_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_f64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 1",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<3)",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vext_p8",
        "intrinsic": "poly8x8_t vext_p8(poly8x8_t a, poly8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 7",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_p8",
        "intrinsic": "poly8x16_t vextq_p8(poly8x16_t a, poly8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 15",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_p16",
        "intrinsic": "poly16x4_t vext_p16(poly16x4_t a, poly16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_p16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 3",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<1)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_p16",
        "intrinsic": "poly16x8_t vextq_p16(poly16x8_t a, poly16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_p16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 7",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<1)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vext_mf8",
        "intrinsic": "mfloat8x8_t vext_mf8(mfloat8x8_t a, mfloat8x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 7",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#n",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vextq_mf8",
        "intrinsic": "mfloat8x16_t vextq_mf8(mfloat8x16_t a, mfloat8x16_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 15",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#n",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrev64_s8",
        "intrinsic": "int8x8_t vrev64_s8(int8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_s8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV64 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_s8",
        "intrinsic": "int8x16_t vrev64q_s8(int8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_s8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV64 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_s16",
        "intrinsic": "int16x4_t vrev64_s16(int16x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_s16",
        "argument_preparation": "vec -> Vn.4H",
        "aarch64_instruction": "REV64 Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_s16",
        "intrinsic": "int16x8_t vrev64q_s16(int16x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_s16",
        "argument_preparation": "vec -> Vn.8H",
        "aarch64_instruction": "REV64 Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_s32",
        "intrinsic": "int32x2_t vrev64_s32(int32x2_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_s32",
        "argument_preparation": "vec -> Vn.2S",
        "aarch64_instruction": "REV64 Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_s32",
        "intrinsic": "int32x4_t vrev64q_s32(int32x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_s32",
        "argument_preparation": "vec -> Vn.4S",
        "aarch64_instruction": "REV64 Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_u8",
        "intrinsic": "uint8x8_t vrev64_u8(uint8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_u8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV64 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_u8",
        "intrinsic": "uint8x16_t vrev64q_u8(uint8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_u8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV64 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_u16",
        "intrinsic": "uint16x4_t vrev64_u16(uint16x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_u16",
        "argument_preparation": "vec -> Vn.4H",
        "aarch64_instruction": "REV64 Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_u16",
        "intrinsic": "uint16x8_t vrev64q_u16(uint16x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_u16",
        "argument_preparation": "vec -> Vn.8H",
        "aarch64_instruction": "REV64 Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_u32",
        "intrinsic": "uint32x2_t vrev64_u32(uint32x2_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_u32",
        "argument_preparation": "vec -> Vn.2S",
        "aarch64_instruction": "REV64 Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_u32",
        "intrinsic": "uint32x4_t vrev64q_u32(uint32x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_u32",
        "argument_preparation": "vec -> Vn.4S",
        "aarch64_instruction": "REV64 Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_f32",
        "intrinsic": "float32x2_t vrev64_f32(float32x2_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_f32",
        "argument_preparation": "vec -> Vn.2S",
        "aarch64_instruction": "REV64 Vd.2S,Vn.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_f32",
        "intrinsic": "float32x4_t vrev64q_f32(float32x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_f32",
        "argument_preparation": "vec -> Vn.4S",
        "aarch64_instruction": "REV64 Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_p8",
        "intrinsic": "poly8x8_t vrev64_p8(poly8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_p8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV64 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_p8",
        "intrinsic": "poly8x16_t vrev64q_p8(poly8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_p8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV64 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_p16",
        "intrinsic": "poly16x4_t vrev64_p16(poly16x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_p16",
        "argument_preparation": "vec -> Vn.4H",
        "aarch64_instruction": "REV64 Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_p16",
        "intrinsic": "poly16x8_t vrev64q_p16(poly16x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_p16",
        "argument_preparation": "vec -> Vn.8H",
        "aarch64_instruction": "REV64 Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_mf8",
        "intrinsic": "mfloat8x8_t vrev64_mf8(mfloat8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_mf8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV64 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrev64q_mf8",
        "intrinsic": "mfloat8x16_t vrev64q_mf8(mfloat8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_mf8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV64 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrev32_s8",
        "intrinsic": "int8x8_t vrev32_s8(int8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32_s8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV32 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32q_s8",
        "intrinsic": "int8x16_t vrev32q_s8(int8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32q_s8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV32 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32_s16",
        "intrinsic": "int16x4_t vrev32_s16(int16x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32_s16",
        "argument_preparation": "vec -> Vn.4H",
        "aarch64_instruction": "REV32 Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32q_s16",
        "intrinsic": "int16x8_t vrev32q_s16(int16x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32q_s16",
        "argument_preparation": "vec -> Vn.8H",
        "aarch64_instruction": "REV32 Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32_u8",
        "intrinsic": "uint8x8_t vrev32_u8(uint8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32_u8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV32 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32q_u8",
        "intrinsic": "uint8x16_t vrev32q_u8(uint8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32q_u8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV32 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32_u16",
        "intrinsic": "uint16x4_t vrev32_u16(uint16x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32_u16",
        "argument_preparation": "vec -> Vn.4H",
        "aarch64_instruction": "REV32 Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32q_u16",
        "intrinsic": "uint16x8_t vrev32q_u16(uint16x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32q_u16",
        "argument_preparation": "vec -> Vn.8H",
        "aarch64_instruction": "REV32 Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32_p8",
        "intrinsic": "poly8x8_t vrev32_p8(poly8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32_p8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV32 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32q_p8",
        "intrinsic": "poly8x16_t vrev32q_p8(poly8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32q_p8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV32 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32_p16",
        "intrinsic": "poly16x4_t vrev32_p16(poly16x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32_p16",
        "argument_preparation": "vec -> Vn.4H",
        "aarch64_instruction": "REV32 Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32q_p16",
        "intrinsic": "poly16x8_t vrev32q_p16(poly16x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32q_p16",
        "argument_preparation": "vec -> Vn.8H",
        "aarch64_instruction": "REV32 Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev32_mf8",
        "intrinsic": "mfloat8x8_t vrev32_mf8(mfloat8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32_mf8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV32 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrev32q_mf8",
        "intrinsic": "mfloat8x16_t vrev32q_mf8(mfloat8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev32q_mf8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV32 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrev16_s8",
        "intrinsic": "int8x8_t vrev16_s8(int8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev16_s8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV16 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev16q_s8",
        "intrinsic": "int8x16_t vrev16q_s8(int8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev16q_s8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV16 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev16_u8",
        "intrinsic": "uint8x8_t vrev16_u8(uint8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev16_u8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV16 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev16q_u8",
        "intrinsic": "uint8x16_t vrev16q_u8(uint8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev16q_u8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV16 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev16_p8",
        "intrinsic": "poly8x8_t vrev16_p8(poly8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev16_p8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV16 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev16q_p8",
        "intrinsic": "poly8x16_t vrev16q_p8(poly8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev16q_p8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV16 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev16_mf8",
        "intrinsic": "mfloat8x8_t vrev16_mf8(mfloat8x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev16_mf8",
        "argument_preparation": "vec -> Vn.8B",
        "aarch64_instruction": "REV16 Vd.8B,Vn.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrev16q_mf8",
        "intrinsic": "mfloat8x16_t vrev16q_mf8(mfloat8x16_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev16q_mf8",
        "argument_preparation": "vec -> Vn.16B",
        "aarch64_instruction": "REV16 Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_s8",
        "intrinsic": "int8x8_t vzip1_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_s8",
        "intrinsic": "int8x16_t vzip1q_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_s16",
        "intrinsic": "int16x4_t vzip1_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_s16",
        "intrinsic": "int16x8_t vzip1q_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_s32",
        "intrinsic": "int32x2_t vzip1_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_s32",
        "intrinsic": "int32x4_t vzip1q_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_s64",
        "intrinsic": "int64x2_t vzip1q_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ZIP1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_u8",
        "intrinsic": "uint8x8_t vzip1_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_u8",
        "intrinsic": "uint8x16_t vzip1q_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_u16",
        "intrinsic": "uint16x4_t vzip1_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_u16",
        "intrinsic": "uint16x8_t vzip1q_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_u32",
        "intrinsic": "uint32x2_t vzip1_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_u32",
        "intrinsic": "uint32x4_t vzip1q_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_u64",
        "intrinsic": "uint64x2_t vzip1q_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ZIP1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_p64",
        "intrinsic": "poly64x2_t vzip1q_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ZIP1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_f32",
        "intrinsic": "float32x2_t vzip1_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_f32",
        "intrinsic": "float32x4_t vzip1q_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_f64",
        "intrinsic": "float64x2_t vzip1q_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ZIP1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_p8",
        "intrinsic": "poly8x8_t vzip1_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_p8",
        "intrinsic": "poly8x16_t vzip1q_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_p16",
        "intrinsic": "poly16x4_t vzip1_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_p16",
        "intrinsic": "poly16x8_t vzip1q_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1_mf8",
        "intrinsic": "mfloat8x8_t vzip1_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_mf8",
        "intrinsic": "mfloat8x16_t vzip1q_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_s8",
        "intrinsic": "int8x8_t vzip2_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_s8",
        "intrinsic": "int8x16_t vzip2q_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_s16",
        "intrinsic": "int16x4_t vzip2_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_s16",
        "intrinsic": "int16x8_t vzip2q_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_s32",
        "intrinsic": "int32x2_t vzip2_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_s32",
        "intrinsic": "int32x4_t vzip2q_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_s64",
        "intrinsic": "int64x2_t vzip2q_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ZIP2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_u8",
        "intrinsic": "uint8x8_t vzip2_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_u8",
        "intrinsic": "uint8x16_t vzip2q_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_u16",
        "intrinsic": "uint16x4_t vzip2_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_u16",
        "intrinsic": "uint16x8_t vzip2q_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_u32",
        "intrinsic": "uint32x2_t vzip2_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_u32",
        "intrinsic": "uint32x4_t vzip2q_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_u64",
        "intrinsic": "uint64x2_t vzip2q_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ZIP2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_p64",
        "intrinsic": "poly64x2_t vzip2q_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ZIP2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_f32",
        "intrinsic": "float32x2_t vzip2_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_f32",
        "intrinsic": "float32x4_t vzip2q_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_f64",
        "intrinsic": "float64x2_t vzip2q_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "ZIP2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_p8",
        "intrinsic": "poly8x8_t vzip2_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_p8",
        "intrinsic": "poly8x16_t vzip2q_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_p16",
        "intrinsic": "poly16x4_t vzip2_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_p16",
        "intrinsic": "poly16x8_t vzip2q_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_mf8",
        "intrinsic": "mfloat8x8_t vzip2_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_mf8",
        "intrinsic": "mfloat8x16_t vzip2q_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip_s8",
        "intrinsic": "int8x8x2_t vzip_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP1 Vd1.8B,Vn.8B,Vm.8B; ZIP2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip_s16",
        "intrinsic": "int16x4x2_t vzip_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP1 Vd1.4H,Vn.4H,Vm.4H; ZIP2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip_u8",
        "intrinsic": "uint8x8x2_t vzip_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP1 Vd1.8B,Vn.8B,Vm.8B; ZIP2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip_u16",
        "intrinsic": "uint16x4x2_t vzip_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP1 Vd1.4H,Vn.4H,Vm.4H; ZIP2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip_p8",
        "intrinsic": "poly8x8x2_t vzip_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP1 Vd1.8B,Vn.8B,Vm.8B; ZIP2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip_p16",
        "intrinsic": "poly16x4x2_t vzip_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP1 Vd1.4H,Vn.4H,Vm.4H; ZIP2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip_mf8",
        "intrinsic": "mfloat8x8x2_t vzip_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "ZIP1 Vd1.8B,Vn.8B,Vm.8B; ZIP2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip_s32",
        "intrinsic": "int32x2x2_t vzip_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP1 Vd1.2S,Vn.2S,Vm.2S; ZIP2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip_f32",
        "intrinsic": "float32x2x2_t vzip_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP1 Vd1.2S,Vn.2S,Vm.2S; ZIP2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip_u32",
        "intrinsic": "uint32x2x2_t vzip_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "ZIP1 Vd1.2S,Vn.2S,Vm.2S; ZIP2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_s8",
        "intrinsic": "int8x16x2_t vzipq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP1 Vd1.16B,Vn.16B,Vm.16B; ZIP2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_s16",
        "intrinsic": "int16x8x2_t vzipq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP1 Vd1.8H,Vn.8H,Vm.8H; ZIP2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_s32",
        "intrinsic": "int32x4x2_t vzipq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP1 Vd1.4S,Vn.4S,Vm.4S; ZIP2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_f32",
        "intrinsic": "float32x4x2_t vzipq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP1 Vd1.4S,Vn.4S,Vm.4S; ZIP2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_u8",
        "intrinsic": "uint8x16x2_t vzipq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP1 Vd1.16B,Vn.16B,Vm.16B; ZIP2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_u16",
        "intrinsic": "uint16x8x2_t vzipq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP1 Vd1.8H,Vn.8H,Vm.8H; ZIP2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_u32",
        "intrinsic": "uint32x4x2_t vzipq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "ZIP1 Vd1.4S,Vn.4S,Vm.4S; ZIP2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_p8",
        "intrinsic": "poly8x16x2_t vzipq_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP1 Vd1.16B,Vn.16B,Vm.16B; ZIP2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_p16",
        "intrinsic": "poly16x8x2_t vzipq_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP1 Vd1.8H,Vn.8H,Vm.8H; ZIP2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_mf8",
        "intrinsic": "mfloat8x16x2_t vzipq_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "ZIP1 Vd1.16B,Vn.16B,Vm.16B; ZIP2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_s8",
        "intrinsic": "int8x8_t vuzp1_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_s8",
        "intrinsic": "int8x16_t vuzp1q_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_s16",
        "intrinsic": "int16x4_t vuzp1_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_s16",
        "intrinsic": "int16x8_t vuzp1q_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_s32",
        "intrinsic": "int32x2_t vuzp1_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_s32",
        "intrinsic": "int32x4_t vuzp1q_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_s64",
        "intrinsic": "int64x2_t vuzp1q_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UZP1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_u8",
        "intrinsic": "uint8x8_t vuzp1_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_u8",
        "intrinsic": "uint8x16_t vuzp1q_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_u16",
        "intrinsic": "uint16x4_t vuzp1_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_u16",
        "intrinsic": "uint16x8_t vuzp1q_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_u32",
        "intrinsic": "uint32x2_t vuzp1_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_u32",
        "intrinsic": "uint32x4_t vuzp1q_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_u64",
        "intrinsic": "uint64x2_t vuzp1q_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UZP1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_p64",
        "intrinsic": "poly64x2_t vuzp1q_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UZP1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_f32",
        "intrinsic": "float32x2_t vuzp1_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_f32",
        "intrinsic": "float32x4_t vuzp1q_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_f64",
        "intrinsic": "float64x2_t vuzp1q_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UZP1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_p8",
        "intrinsic": "poly8x8_t vuzp1_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_p8",
        "intrinsic": "poly8x16_t vuzp1q_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_p16",
        "intrinsic": "poly16x4_t vuzp1_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_p16",
        "intrinsic": "poly16x8_t vuzp1q_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1_mf8",
        "intrinsic": "mfloat8x8_t vuzp1_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_mf8",
        "intrinsic": "mfloat8x16_t vuzp1q_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_s8",
        "intrinsic": "int8x8_t vuzp2_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_s8",
        "intrinsic": "int8x16_t vuzp2q_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_s16",
        "intrinsic": "int16x4_t vuzp2_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_s16",
        "intrinsic": "int16x8_t vuzp2q_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_s32",
        "intrinsic": "int32x2_t vuzp2_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_s32",
        "intrinsic": "int32x4_t vuzp2q_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_s64",
        "intrinsic": "int64x2_t vuzp2q_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UZP2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_u8",
        "intrinsic": "uint8x8_t vuzp2_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_u8",
        "intrinsic": "uint8x16_t vuzp2q_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_u16",
        "intrinsic": "uint16x4_t vuzp2_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_u16",
        "intrinsic": "uint16x8_t vuzp2q_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_u32",
        "intrinsic": "uint32x2_t vuzp2_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_u32",
        "intrinsic": "uint32x4_t vuzp2q_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_u64",
        "intrinsic": "uint64x2_t vuzp2q_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UZP2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_p64",
        "intrinsic": "poly64x2_t vuzp2q_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UZP2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_f32",
        "intrinsic": "float32x2_t vuzp2_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_f32",
        "intrinsic": "float32x4_t vuzp2q_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_f64",
        "intrinsic": "float64x2_t vuzp2q_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "UZP2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_p8",
        "intrinsic": "poly8x8_t vuzp2_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_p8",
        "intrinsic": "poly8x16_t vuzp2q_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_p16",
        "intrinsic": "poly16x4_t vuzp2_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_p16",
        "intrinsic": "poly16x8_t vuzp2q_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_mf8",
        "intrinsic": "mfloat8x8_t vuzp2_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_mf8",
        "intrinsic": "mfloat8x16_t vuzp2q_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp_s8",
        "intrinsic": "int8x8x2_t vuzp_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP1 Vd1.8B,Vn.8B,Vm.8B; UZP2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_s16",
        "intrinsic": "int16x4x2_t vuzp_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP1 Vd1.4H,Vn.4H,Vm.4H; UZP2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_s32",
        "intrinsic": "int32x2x2_t vuzp_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP1 Vd1.2S,Vn.2S,Vm.2S; UZP2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_f32",
        "intrinsic": "float32x2x2_t vuzp_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP1 Vd1.2S,Vn.2S,Vm.2S; UZP2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_u8",
        "intrinsic": "uint8x8x2_t vuzp_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP1 Vd1.8B,Vn.8B,Vm.8B; UZP2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_u16",
        "intrinsic": "uint16x4x2_t vuzp_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP1 Vd1.4H,Vn.4H,Vm.4H; UZP2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_u32",
        "intrinsic": "uint32x2x2_t vuzp_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "UZP1 Vd1.2S,Vn.2S,Vm.2S; UZP2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_p8",
        "intrinsic": "poly8x8x2_t vuzp_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP1 Vd1.8B,Vn.8B,Vm.8B; UZP2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_p16",
        "intrinsic": "poly16x4x2_t vuzp_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP1 Vd1.4H,Vn.4H,Vm.4H; UZP2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp_mf8",
        "intrinsic": "mfloat8x8x2_t vuzp_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UZP1 Vd1.8B,Vn.8B,Vm.8B; UZP2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzpq_s8",
        "intrinsic": "int8x16x2_t vuzpq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP1 Vd1.16B,Vn.16B,Vm.16B; UZP2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_s16",
        "intrinsic": "int16x8x2_t vuzpq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP1 Vd1.8H,Vn.8H,Vm.8H; UZP2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_s32",
        "intrinsic": "int32x4x2_t vuzpq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP1 Vd1.4S,Vn.4S,Vm.4S; UZP2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_f32",
        "intrinsic": "float32x4x2_t vuzpq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP1 Vd1.4S,Vn.4S,Vm.4S; UZP2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_u8",
        "intrinsic": "uint8x16x2_t vuzpq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP1 Vd1.16B,Vn.16B,Vm.16B; UZP2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_u32",
        "intrinsic": "uint32x4x2_t vuzpq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "UZP1 Vd1.4S,Vn.4S,Vm.4S; UZP2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_p8",
        "intrinsic": "poly8x16x2_t vuzpq_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP1 Vd1.16B,Vn.16B,Vm.16B; UZP2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_p16",
        "intrinsic": "poly16x8x2_t vuzpq_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP1 Vd1.8H,Vn.8H,Vm.8H; UZP2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_mf8",
        "intrinsic": "mfloat8x16x2_t vuzpq_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UZP1 Vd1.16B,Vn.16B,Vm.16B; UZP2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_s8",
        "intrinsic": "int8x8_t vtrn1_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_s8",
        "intrinsic": "int8x16_t vtrn1q_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_s16",
        "intrinsic": "int16x4_t vtrn1_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_s16",
        "intrinsic": "int16x8_t vtrn1q_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_s32",
        "intrinsic": "int32x2_t vtrn1_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_s32",
        "intrinsic": "int32x4_t vtrn1q_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_s64",
        "intrinsic": "int64x2_t vtrn1q_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "TRN1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_u8",
        "intrinsic": "uint8x8_t vtrn1_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_u8",
        "intrinsic": "uint8x16_t vtrn1q_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_u16",
        "intrinsic": "uint16x4_t vtrn1_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_u16",
        "intrinsic": "uint16x8_t vtrn1q_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_u32",
        "intrinsic": "uint32x2_t vtrn1_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_u32",
        "intrinsic": "uint32x4_t vtrn1q_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_u64",
        "intrinsic": "uint64x2_t vtrn1q_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "TRN1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_p64",
        "intrinsic": "poly64x2_t vtrn1q_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "TRN1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_f32",
        "intrinsic": "float32x2_t vtrn1_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN1 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_f32",
        "intrinsic": "float32x4_t vtrn1q_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_f64",
        "intrinsic": "float64x2_t vtrn1q_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "TRN1 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_p8",
        "intrinsic": "poly8x8_t vtrn1_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_p8",
        "intrinsic": "poly8x16_t vtrn1q_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_p16",
        "intrinsic": "poly16x4_t vtrn1_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_p16",
        "intrinsic": "poly16x8_t vtrn1q_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1_mf8",
        "intrinsic": "mfloat8x8_t vtrn1_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN1 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_mf8",
        "intrinsic": "mfloat8x16_t vtrn1q_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN1 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_s8",
        "intrinsic": "int8x8_t vtrn2_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_s8",
        "intrinsic": "int8x16_t vtrn2q_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_s16",
        "intrinsic": "int16x4_t vtrn2_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_s16",
        "intrinsic": "int16x8_t vtrn2q_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_s32",
        "intrinsic": "int32x2_t vtrn2_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_s32",
        "intrinsic": "int32x4_t vtrn2q_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_s64",
        "intrinsic": "int64x2_t vtrn2q_s64(int64x2_t a, int64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_s64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "TRN2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_u8",
        "intrinsic": "uint8x8_t vtrn2_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_u8",
        "intrinsic": "uint8x16_t vtrn2q_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_u16",
        "intrinsic": "uint16x4_t vtrn2_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_u16",
        "intrinsic": "uint16x8_t vtrn2q_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_u32",
        "intrinsic": "uint32x2_t vtrn2_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_u32",
        "intrinsic": "uint32x4_t vtrn2q_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_u64",
        "intrinsic": "uint64x2_t vtrn2q_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "TRN2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_p64",
        "intrinsic": "poly64x2_t vtrn2q_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "TRN2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_f32",
        "intrinsic": "float32x2_t vtrn2_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN2 Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_f32",
        "intrinsic": "float32x4_t vtrn2q_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN2 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_f64",
        "intrinsic": "float64x2_t vtrn2q_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "TRN2 Vd.2D,Vn.2D,Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_p8",
        "intrinsic": "poly8x8_t vtrn2_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_p8",
        "intrinsic": "poly8x16_t vtrn2q_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_p16",
        "intrinsic": "poly16x4_t vtrn2_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_p16",
        "intrinsic": "poly16x8_t vtrn2q_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_mf8",
        "intrinsic": "mfloat8x8_t vtrn2_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN2 Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_mf8",
        "intrinsic": "mfloat8x16_t vtrn2q_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN2 Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn_s8",
        "intrinsic": "int8x8x2_t vtrn_s8(int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_s8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN1 Vd1.8B,Vn.8B,Vm.8B; TRN2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_s16",
        "intrinsic": "int16x4x2_t vtrn_s16(int16x4_t a, int16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_s16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN1 Vd1.4H,Vn.4H,Vm.4H; TRN2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_u8",
        "intrinsic": "uint8x8x2_t vtrn_u8(uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_u8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN1 Vd1.8B,Vn.8B,Vm.8B; TRN2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_u16",
        "intrinsic": "uint16x4x2_t vtrn_u16(uint16x4_t a, uint16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_u16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN1 Vd1.4H,Vn.4H,Vm.4H; TRN2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_p8",
        "intrinsic": "poly8x8x2_t vtrn_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN1 Vd1.8B,Vn.8B,Vm.8B; TRN2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_p16",
        "intrinsic": "poly16x4x2_t vtrn_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_p16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN1 Vd1.4H,Vn.4H,Vm.4H; TRN2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_s32",
        "intrinsic": "int32x2x2_t vtrn_s32(int32x2_t a, int32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_s32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN1 Vd1.2S,Vn.2S,Vm.2S; TRN2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_f32",
        "intrinsic": "float32x2x2_t vtrn_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN1 Vd1.2S,Vn.2S,Vm.2S; TRN2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_u32",
        "intrinsic": "uint32x2x2_t vtrn_u32(uint32x2_t a, uint32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_u32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "TRN1 Vd1.2S,Vn.2S,Vm.2S; TRN2 Vd2.2S,Vn.2S,Vm.2S",
        "result": "Vd1.2S -> result.val[0]; Vd2.2S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn_mf8",
        "intrinsic": "mfloat8x8x2_t vtrn_mf8(mfloat8x8_t a, mfloat8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_mf8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "TRN1 Vd1.8B,Vn.8B,Vm.8B; TRN2 Vd2.8B,Vn.8B,Vm.8B",
        "result": "Vd1.8B -> result.val[0]; Vd2.8B -> result.val[1]",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrnq_s8",
        "intrinsic": "int8x16x2_t vtrnq_s8(int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN1 Vd1.16B,Vn.16B,Vm.16B; TRN2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_s16",
        "intrinsic": "int16x8x2_t vtrnq_s16(int16x8_t a, int16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_s16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN1 Vd1.8H,Vn.8H,Vm.8H; TRN2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_s32",
        "intrinsic": "int32x4x2_t vtrnq_s32(int32x4_t a, int32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_s32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN1 Vd1.4S,Vn.4S,Vm.4S; TRN2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_f32",
        "intrinsic": "float32x4x2_t vtrnq_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN1 Vd1.4S,Vn.4S,Vm.4S; TRN2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_u8",
        "intrinsic": "uint8x16x2_t vtrnq_u8(uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN1 Vd1.16B,Vn.16B,Vm.16B; TRN2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_u16",
        "intrinsic": "uint16x8x2_t vtrnq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN1 Vd1.8H,Vn.8H,Vm.8H; TRN2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_u32",
        "intrinsic": "uint32x4x2_t vtrnq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "TRN1 Vd1.4S,Vn.4S,Vm.4S; TRN2 Vd2.4S,Vn.4S,Vm.4S",
        "result": "Vd1.4S -> result.val[0]; Vd2.4S -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_p8",
        "intrinsic": "poly8x16x2_t vtrnq_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN1 Vd1.16B,Vn.16B,Vm.16B; TRN2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_p16",
        "intrinsic": "poly16x8x2_t vtrnq_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_p16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN1 Vd1.8H,Vn.8H,Vm.8H; TRN2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_mf8",
        "intrinsic": "mfloat8x16x2_t vtrnq_mf8(mfloat8x16_t a, mfloat8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_mf8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "TRN1 Vd1.16B,Vn.16B,Vm.16B; TRN2 Vd2.16B,Vn.16B,Vm.16B",
        "result": "Vd1.16B -> result.val[0]; Vd2.16B -> result.val[1]",
        "supported_architectures": "A64"
      },
      {
        "name": "vset_lane_u8",
        "intrinsic": "uint8x8_t vset_lane_u8(uint8_t a, uint8x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_u8",
        "argument_preparation": "0<=lane<=7; a -> Rn; v -> Vd.8B",
        "aarch64_instruction": "MOV Vd.B[lane],Rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_u16",
        "intrinsic": "uint16x4_t vset_lane_u16(uint16_t a, uint16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_u16",
        "argument_preparation": "0<=lane<=3; a -> Rn; v -> Vd.4H",
        "aarch64_instruction": "MOV Vd.H[lane],Rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_u32",
        "intrinsic": "uint32x2_t vset_lane_u32(uint32_t a, uint32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_u32",
        "argument_preparation": "0<=lane<=1; a -> Rn; v -> Vd.2S",
        "aarch64_instruction": "MOV Vd.S[lane],Rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_u64",
        "intrinsic": "uint64x1_t vset_lane_u64(uint64_t a, uint64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_u64",
        "argument_preparation": "lane==0; a -> Rn; v -> Vd.1D",
        "aarch64_instruction": "MOV Vd.D[lane],Rn",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_p64",
        "intrinsic": "poly64x1_t vset_lane_p64(poly64_t a, poly64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_p64",
        "argument_preparation": "lane==0; a -> Rn; v -> Vd.1D",
        "aarch64_instruction": "MOV Vd.D[lane],Rn",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vset_lane_s8",
        "intrinsic": "int8x8_t vset_lane_s8(int8_t a, int8x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_s8",
        "argument_preparation": "0<=lane<=7; a -> Rn; v -> Vd.8B",
        "aarch64_instruction": "MOV Vd.B[lane],Rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_s16",
        "intrinsic": "int16x4_t vset_lane_s16(int16_t a, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_s16",
        "argument_preparation": "0<=lane<=3; a -> Rn; v -> Vd.4H",
        "aarch64_instruction": "MOV Vd.H[lane],Rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_s32",
        "intrinsic": "int32x2_t vset_lane_s32(int32_t a, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_s32",
        "argument_preparation": "0<=lane<=1; a -> Rn; v -> Vd.2S",
        "aarch64_instruction": "MOV Vd.S[lane],Rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_s64",
        "intrinsic": "int64x1_t vset_lane_s64(int64_t a, int64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_s64",
        "argument_preparation": "lane==0; a -> Rn; v -> Vd.1D",
        "aarch64_instruction": "MOV Vd.D[lane],Rn",
        "result": "Vd.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_p8",
        "intrinsic": "poly8x8_t vset_lane_p8(poly8_t a, poly8x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_p8",
        "argument_preparation": "0<=lane<=7; a -> Rn; v -> Vd.8B",
        "aarch64_instruction": "MOV Vd.B[lane],Rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_p16",
        "intrinsic": "poly16x4_t vset_lane_p16(poly16_t a, poly16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_p16",
        "argument_preparation": "0<=lane<=3; a -> Rn; v -> Vd.4H",
        "aarch64_instruction": "MOV Vd.H[lane],Rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_f16",
        "intrinsic": "float16x4_t vset_lane_f16(float16_t a, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_f16",
        "argument_preparation": "0<=lane<=3; a -> VnH; v -> Vd.4H",
        "aarch64_instruction": "MOV Vd.H[lane],Vn.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_f16",
        "intrinsic": "float16x8_t vsetq_lane_f16(float16_t a, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_f16",
        "argument_preparation": "0<=lane<=7; a -> VnH; v -> Vd.8H",
        "aarch64_instruction": "MOV Vd.H[lane],Vn.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_f32",
        "intrinsic": "float32x2_t vset_lane_f32(float32_t a, float32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_f32",
        "argument_preparation": "0<=lane<=1; a -> Rn; v -> Vd.2S",
        "aarch64_instruction": "MOV Vd.S[lane],Rn",
        "result": "Vd.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vset_lane_f64",
        "intrinsic": "float64x1_t vset_lane_f64(float64_t a, float64x1_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_f64",
        "argument_preparation": "lane==0; a -> Rn; v -> Vd.1D",
        "aarch64_instruction": "MOV Vd.D[lane],Rn",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vset_lane_mf8",
        "intrinsic": "mfloat8x8_t vset_lane_mf8(mfloat8_t a, mfloat8x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_mf8",
        "argument_preparation": "0<=lane<=7; a -> Rn; v -> Vd.8B",
        "aarch64_instruction": "MOV Vd.B[lane],Rn",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsetq_lane_u8",
        "intrinsic": "uint8x16_t vsetq_lane_u8(uint8_t a, uint8x16_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_u8",
        "argument_preparation": "0<=lane<=15; a -> Rn; v -> Vd.16B",
        "aarch64_instruction": "MOV Vd.B[lane],Rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_u16",
        "intrinsic": "uint16x8_t vsetq_lane_u16(uint16_t a, uint16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_u16",
        "argument_preparation": "0<=lane<=7; a -> Rn; v -> Vd.8H",
        "aarch64_instruction": "MOV Vd.H[lane],Rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_u32",
        "intrinsic": "uint32x4_t vsetq_lane_u32(uint32_t a, uint32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_u32",
        "argument_preparation": "0<=lane<=3; a -> Rn; v -> Vd.4S",
        "aarch64_instruction": "MOV Vd.S[lane],Rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_u64",
        "intrinsic": "uint64x2_t vsetq_lane_u64(uint64_t a, uint64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_u64",
        "argument_preparation": "0<=lane<=1; a -> Rn; v -> Vd.2D",
        "aarch64_instruction": "MOV Vd.D[lane],Rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_p64",
        "intrinsic": "poly64x2_t vsetq_lane_p64(poly64_t a, poly64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_p64",
        "argument_preparation": "0<=lane<=1; a -> Rn; v -> Vd.2D",
        "aarch64_instruction": "MOV Vd.D[lane],Rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsetq_lane_s8",
        "intrinsic": "int8x16_t vsetq_lane_s8(int8_t a, int8x16_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_s8",
        "argument_preparation": "0<=lane<=15; a -> Rn; v -> Vd.16B",
        "aarch64_instruction": "MOV Vd.B[lane],Rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_s16",
        "intrinsic": "int16x8_t vsetq_lane_s16(int16_t a, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_s16",
        "argument_preparation": "0<=lane<=7; a -> Rn; v -> Vd.8H",
        "aarch64_instruction": "MOV Vd.H[lane],Rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_s32",
        "intrinsic": "int32x4_t vsetq_lane_s32(int32_t a, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_s32",
        "argument_preparation": "0<=lane<=3; a -> Rn; v -> Vd.4S",
        "aarch64_instruction": "MOV Vd.S[lane],Rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_s64",
        "intrinsic": "int64x2_t vsetq_lane_s64(int64_t a, int64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_s64",
        "argument_preparation": "0<=lane<=1; a -> Rn; v -> Vd.2D",
        "aarch64_instruction": "MOV Vd.D[lane],Rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_p8",
        "intrinsic": "poly8x16_t vsetq_lane_p8(poly8_t a, poly8x16_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_p8",
        "argument_preparation": "0<=lane<=15; a -> Rn; v -> Vd.16B",
        "aarch64_instruction": "MOV Vd.B[lane],Rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_p16",
        "intrinsic": "poly16x8_t vsetq_lane_p16(poly16_t a, poly16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_p16",
        "argument_preparation": "0<=lane<=7; a -> Rn; v -> Vd.8H",
        "aarch64_instruction": "MOV Vd.H[lane],Rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_f32",
        "intrinsic": "float32x4_t vsetq_lane_f32(float32_t a, float32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_f32",
        "argument_preparation": "0<=lane<=3; a -> Rn; v -> Vd.4S",
        "aarch64_instruction": "MOV Vd.S[lane],Rn",
        "result": "Vd.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vsetq_lane_f64",
        "intrinsic": "float64x2_t vsetq_lane_f64(float64_t a, float64x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_f64",
        "argument_preparation": "0<=lane<=1; a -> Rn; v -> Vd.2D",
        "aarch64_instruction": "MOV Vd.D[lane],Rn",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsetq_lane_mf8",
        "intrinsic": "mfloat8x16_t vsetq_lane_mf8(mfloat8_t a, mfloat8x16_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_mf8",
        "argument_preparation": "0<=lane<=15; a -> Rn; v -> Vd.16B",
        "aarch64_instruction": "MOV Vd.B[lane],Rn",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzpq_u16",
        "intrinsic": "uint16x8x2_t vuzpq_u16(uint16x8_t a, uint16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_u16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP1 Vd1.8H,Vn.8H,Vm.8H; UZP2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      }
    ],
    "Load": [
      {
        "name": "vld1_s8",
        "intrinsic": "int8x8_t vld1_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B},[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s8",
        "intrinsic": "int8x16_t vld1q_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B},[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s16",
        "intrinsic": "int16x4_t vld1_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s16",
        "intrinsic": "int16x8_t vld1q_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s32",
        "intrinsic": "int32x2_t vld1_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S},[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s32",
        "intrinsic": "int32x4_t vld1q_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S},[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s64",
        "intrinsic": "int64x1_t vld1_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D},[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s64",
        "intrinsic": "int64x2_t vld1q_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D},[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u8",
        "intrinsic": "uint8x8_t vld1_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B},[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u8",
        "intrinsic": "uint8x16_t vld1q_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B},[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u16",
        "intrinsic": "uint16x4_t vld1_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u16",
        "intrinsic": "uint16x8_t vld1q_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u32",
        "intrinsic": "uint32x2_t vld1_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S},[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u32",
        "intrinsic": "uint32x4_t vld1q_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S},[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u64",
        "intrinsic": "uint64x1_t vld1_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D},[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u64",
        "intrinsic": "uint64x2_t vld1q_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D},[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p64",
        "intrinsic": "poly64x1_t vld1_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D},[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_p64",
        "intrinsic": "poly64x2_t vld1q_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D},[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_f16",
        "intrinsic": "float16x4_t vld1_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_f16",
        "intrinsic": "float16x8_t vld1q_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_f32",
        "intrinsic": "float32x2_t vld1_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S},[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_f32",
        "intrinsic": "float32x4_t vld1q_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S},[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p8",
        "intrinsic": "poly8x8_t vld1_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B},[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p8",
        "intrinsic": "poly8x16_t vld1q_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B},[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p16",
        "intrinsic": "poly16x4_t vld1_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p16",
        "intrinsic": "poly16x8_t vld1q_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_f64",
        "intrinsic": "float64x1_t vld1_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D},[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_f64",
        "intrinsic": "float64x2_t vld1q_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D},[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_mf8",
        "intrinsic": "mfloat8x8_t vld1_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B},[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_mf8",
        "intrinsic": "mfloat8x16_t vld1q_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B},[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_lane_s8",
        "intrinsic": "int8x8_t vld1_lane_s8(int8_t const *ptr, int8x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_s8",
        "argument_preparation": "ptr -> Xn; src -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.b}[lane],[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_s8",
        "intrinsic": "int8x16_t vld1q_lane_s8(int8_t const *ptr, int8x16_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_s8",
        "argument_preparation": "ptr -> Xn; src -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD1 {Vt.b}[lane],[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_s16",
        "intrinsic": "int16x4_t vld1_lane_s16(int16_t const *ptr, int16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_s16",
        "argument_preparation": "ptr -> Xn; src -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_s16",
        "intrinsic": "int16x8_t vld1q_lane_s16(int16_t const *ptr, int16x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_s16",
        "argument_preparation": "ptr -> Xn; src -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_s32",
        "intrinsic": "int32x2_t vld1_lane_s32(int32_t const *ptr, int32x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_s32",
        "argument_preparation": "ptr -> Xn; src -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD1 {Vt.S}[lane],[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_s32",
        "intrinsic": "int32x4_t vld1q_lane_s32(int32_t const *ptr, int32x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_s32",
        "argument_preparation": "ptr -> Xn; src -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD1 {Vt.S}[lane],[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_s64",
        "intrinsic": "int64x1_t vld1_lane_s64(int64_t const *ptr, int64x1_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_s64",
        "argument_preparation": "ptr -> Xn; src -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD1 {Vt.D}[lane],[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_s64",
        "intrinsic": "int64x2_t vld1q_lane_s64(int64_t const *ptr, int64x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_s64",
        "argument_preparation": "ptr -> Xn; src -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD1 {Vt.D}[lane],[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_u8",
        "intrinsic": "uint8x8_t vld1_lane_u8(uint8_t const *ptr, uint8x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_u8",
        "argument_preparation": "ptr -> Xn; src -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.B}[lane],[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_u8",
        "intrinsic": "uint8x16_t vld1q_lane_u8(uint8_t const *ptr, uint8x16_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_u8",
        "argument_preparation": "ptr -> Xn; src -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD1 {Vt.B}[lane],[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_u16",
        "intrinsic": "uint16x4_t vld1_lane_u16(uint16_t const *ptr, uint16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_u16",
        "argument_preparation": "ptr -> Xn; src -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_u16",
        "intrinsic": "uint16x8_t vld1q_lane_u16(uint16_t const *ptr, uint16x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_u16",
        "argument_preparation": "ptr -> Xn; src -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_u32",
        "intrinsic": "uint32x2_t vld1_lane_u32(uint32_t const *ptr, uint32x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_u32",
        "argument_preparation": "ptr -> Xn; src -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD1 {Vt.S}[lane],[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_u32",
        "intrinsic": "uint32x4_t vld1q_lane_u32(uint32_t const *ptr, uint32x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_u32",
        "argument_preparation": "ptr -> Xn; src -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD1 {Vt.S}[lane],[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_u64",
        "intrinsic": "uint64x1_t vld1_lane_u64(uint64_t const *ptr, uint64x1_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_u64",
        "argument_preparation": "ptr -> Xn; src -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD1 {Vt.D}[lane],[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_u64",
        "intrinsic": "uint64x2_t vld1q_lane_u64(uint64_t const *ptr, uint64x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_u64",
        "argument_preparation": "ptr -> Xn; src -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD1 {Vt.D}[lane],[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_p64",
        "intrinsic": "poly64x1_t vld1_lane_p64(poly64_t const *ptr, poly64x1_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_p64",
        "argument_preparation": "ptr -> Xn; src -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD1 {Vt.D}[lane],[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_lane_p64",
        "intrinsic": "poly64x2_t vld1q_lane_p64(poly64_t const *ptr, poly64x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_p64",
        "argument_preparation": "ptr -> Xn; src -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD1 {Vt.D}[lane],[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_lane_f16",
        "intrinsic": "float16x4_t vld1_lane_f16(float16_t const *ptr, float16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_f16",
        "argument_preparation": "ptr -> Xn; src -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_f16",
        "intrinsic": "float16x8_t vld1q_lane_f16(float16_t const *ptr, float16x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_f16",
        "argument_preparation": "ptr -> Xn; src -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_f32",
        "intrinsic": "float32x2_t vld1_lane_f32(float32_t const *ptr, float32x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_f32",
        "argument_preparation": "ptr -> Xn; src -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD1 {Vt.S}[lane],[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_f32",
        "intrinsic": "float32x4_t vld1q_lane_f32(float32_t const *ptr, float32x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_f32",
        "argument_preparation": "ptr -> Xn; src -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD1 {Vt.S}[lane],[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_p8",
        "intrinsic": "poly8x8_t vld1_lane_p8(poly8_t const *ptr, poly8x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_p8",
        "argument_preparation": "ptr -> Xn; src -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.B}[lane],[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_p8",
        "intrinsic": "poly8x16_t vld1q_lane_p8(poly8_t const *ptr, poly8x16_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_p8",
        "argument_preparation": "ptr -> Xn; src -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD1 {Vt.B}[lane],[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_p16",
        "intrinsic": "poly16x4_t vld1_lane_p16(poly16_t const *ptr, poly16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_p16",
        "argument_preparation": "ptr -> Xn; src -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_lane_p16",
        "intrinsic": "poly16x8_t vld1q_lane_p16(poly16_t const *ptr, poly16x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_p16",
        "argument_preparation": "ptr -> Xn; src -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_lane_f64",
        "intrinsic": "float64x1_t vld1_lane_f64(float64_t const *ptr, float64x1_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_f64",
        "argument_preparation": "ptr -> Xn; src -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD1 {Vt.D}[lane],[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_lane_f64",
        "intrinsic": "float64x2_t vld1q_lane_f64(float64_t const *ptr, float64x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_f64",
        "argument_preparation": "ptr -> Xn; src -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD1 {Vt.D}[lane],[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_lane_mf8",
        "intrinsic": "mfloat8x8_t vld1_lane_mf8(mfloat8_t const *ptr, mfloat8x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_mf8",
        "argument_preparation": "ptr -> Xn; src -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.b}[lane],[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_lane_mf8",
        "intrinsic": "mfloat8x16_t vld1q_lane_mf8(mfloat8_t const *ptr, mfloat8x16_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_mf8",
        "argument_preparation": "ptr -> Xn; src -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD1 {Vt.b}[lane],[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vldap1_lane_u64",
        "intrinsic": "uint64x1_t vldap1_lane_u64(uint64_t const *ptr, uint64x1_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldap1_lane_u64",
        "argument_preparation": "ptr -> Xn; src -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LDAP1 {Vt.D}[lane],[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vldap1q_lane_u64",
        "intrinsic": "uint64x2_t vldap1q_lane_u64(uint64_t const *ptr, uint64x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldap1q_lane_u64",
        "argument_preparation": "ptr -> Xn; src -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LDAP1 {Vt.D}[lane],[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vldap1_lane_s64",
        "intrinsic": "int64x1_t vldap1_lane_s64(int64_t const *ptr, int64x1_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldap1_lane_s64",
        "argument_preparation": "ptr -> Xn; src -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LDAP1 {Vt.D}[lane],[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vldap1q_lane_s64",
        "intrinsic": "int64x2_t vldap1q_lane_s64(int64_t const *ptr, int64x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldap1q_lane_s64",
        "argument_preparation": "ptr -> Xn; src -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LDAP1 {Vt.D}[lane],[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vldap1_lane_f64",
        "intrinsic": "float64x1_t vldap1_lane_f64(float64_t const *ptr, float64x1_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldap1_lane_f64",
        "argument_preparation": "ptr -> Xn; src -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LDAP1 {Vt.D}[lane],[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vldap1q_lane_f64",
        "intrinsic": "float64x2_t vldap1q_lane_f64(float64_t const *ptr, float64x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldap1q_lane_f64",
        "argument_preparation": "ptr -> Xn; src -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LDAP1 {Vt.D}[lane],[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vldap1_lane_p64",
        "intrinsic": "poly64x1_t vldap1_lane_p64(poly64_t const *ptr, poly64x1_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldap1_lane_p64",
        "argument_preparation": "ptr -> Xn; src -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LDAP1 {Vt.D}[lane],[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vldap1q_lane_p64",
        "intrinsic": "poly64x2_t vldap1q_lane_p64(poly64_t const *ptr, poly64x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldap1q_lane_p64",
        "argument_preparation": "ptr -> Xn; src -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LDAP1 {Vt.D}[lane],[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_dup_s8",
        "intrinsic": "int8x8_t vld1_dup_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8B},[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_s8",
        "intrinsic": "int8x16_t vld1q_dup_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.16B},[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_s16",
        "intrinsic": "int16x4_t vld1_dup_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_s16",
        "intrinsic": "int16x8_t vld1q_dup_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_s32",
        "intrinsic": "int32x2_t vld1_dup_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.2S},[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_s32",
        "intrinsic": "int32x4_t vld1q_dup_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.4S},[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_s64",
        "intrinsic": "int64x1_t vld1_dup_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D},[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_s64",
        "intrinsic": "int64x2_t vld1q_dup_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.2D},[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_u8",
        "intrinsic": "uint8x8_t vld1_dup_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8B},[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_u8",
        "intrinsic": "uint8x16_t vld1q_dup_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.16B},[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_u16",
        "intrinsic": "uint16x4_t vld1_dup_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_u16",
        "intrinsic": "uint16x8_t vld1q_dup_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_u32",
        "intrinsic": "uint32x2_t vld1_dup_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.2S},[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_u32",
        "intrinsic": "uint32x4_t vld1q_dup_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.4S},[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_u64",
        "intrinsic": "uint64x1_t vld1_dup_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D},[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_u64",
        "intrinsic": "uint64x2_t vld1q_dup_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.2D},[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_p64",
        "intrinsic": "poly64x1_t vld1_dup_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D},[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_dup_p64",
        "intrinsic": "poly64x2_t vld1q_dup_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.2D},[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_dup_f16",
        "intrinsic": "float16x4_t vld1_dup_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_f16",
        "intrinsic": "float16x8_t vld1q_dup_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_f32",
        "intrinsic": "float32x2_t vld1_dup_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.2S},[Xn]",
        "result": "Vt.2S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_f32",
        "intrinsic": "float32x4_t vld1q_dup_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.4S},[Xn]",
        "result": "Vt.4S -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_p8",
        "intrinsic": "poly8x8_t vld1_dup_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8B},[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_p8",
        "intrinsic": "poly8x16_t vld1q_dup_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.16B},[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_p16",
        "intrinsic": "poly16x4_t vld1_dup_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_dup_p16",
        "intrinsic": "poly16x8_t vld1q_dup_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_dup_f64",
        "intrinsic": "float64x1_t vld1_dup_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D},[Xn]",
        "result": "Vt.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_dup_f64",
        "intrinsic": "float64x2_t vld1q_dup_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.2D},[Xn]",
        "result": "Vt.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_dup_mf8",
        "intrinsic": "mfloat8x8_t vld1_dup_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8B},[Xn]",
        "result": "Vt.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_dup_mf8",
        "intrinsic": "mfloat8x16_t vld1q_dup_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.16B},[Xn]",
        "result": "Vt.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vstl1_lane_u64",
        "intrinsic": "void vstl1_lane_u64(uint64_t *ptr, uint64x1_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstl1_lane_u64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "STL1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vstl1q_lane_u64",
        "intrinsic": "void vstl1q_lane_u64(uint64_t *ptr, uint64x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstl1q_lane_u64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "STL1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vstl1_lane_s64",
        "intrinsic": "void vstl1_lane_s64(int64_t *ptr, int64x1_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstl1_lane_s64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "STL1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vstl1q_lane_s64",
        "intrinsic": "void vstl1q_lane_s64(int64_t *ptr, int64x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstl1q_lane_s64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "STL1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vstl1_lane_f64",
        "intrinsic": "void vstl1_lane_f64(float64_t *ptr, float64x1_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstl1_lane_f64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "STL1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vstl1q_lane_f64",
        "intrinsic": "void vstl1q_lane_f64(float64_t *ptr, float64x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstl1q_lane_f64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "STL1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vstl1_lane_p64",
        "intrinsic": "void vstl1_lane_p64(poly64_t *ptr, poly64x1_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstl1_lane_p64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "STL1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vstl1q_lane_p64",
        "intrinsic": "void vstl1q_lane_p64(poly64_t *ptr, poly64x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstl1q_lane_p64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "STL1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_s8",
        "intrinsic": "int8x8x2_t vld2_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_s8",
        "intrinsic": "int8x16x2_t vld2q_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_s16",
        "intrinsic": "int16x4x2_t vld2_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_s16",
        "intrinsic": "int16x8x2_t vld2q_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_s32",
        "intrinsic": "int32x2x2_t vld2_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_s32",
        "intrinsic": "int32x4x2_t vld2q_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_u8",
        "intrinsic": "uint8x8x2_t vld2_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_u8",
        "intrinsic": "uint8x16x2_t vld2q_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_u16",
        "intrinsic": "uint16x4x2_t vld2_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_u16",
        "intrinsic": "uint16x8x2_t vld2q_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_u32",
        "intrinsic": "uint32x2x2_t vld2_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_u32",
        "intrinsic": "uint32x4x2_t vld2q_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_f16",
        "intrinsic": "float16x4x2_t vld2_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_f16",
        "intrinsic": "float16x8x2_t vld2q_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_f32",
        "intrinsic": "float32x2x2_t vld2_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_f32",
        "intrinsic": "float32x4x2_t vld2q_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_p8",
        "intrinsic": "poly8x8x2_t vld2_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_p8",
        "intrinsic": "poly8x16x2_t vld2q_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_p16",
        "intrinsic": "poly16x4x2_t vld2_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_p16",
        "intrinsic": "poly16x8x2_t vld2q_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_s64",
        "intrinsic": "int64x1x2_t vld2_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_u64",
        "intrinsic": "uint64x1x2_t vld2_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_p64",
        "intrinsic": "poly64x1x2_t vld2_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld2q_s64",
        "intrinsic": "int64x2x2_t vld2q_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_u64",
        "intrinsic": "uint64x2x2_t vld2q_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_p64",
        "intrinsic": "poly64x2x2_t vld2q_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_f64",
        "intrinsic": "float64x1x2_t vld2_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_f64",
        "intrinsic": "float64x2x2_t vld2q_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_mf8",
        "intrinsic": "mfloat8x8x2_t vld2_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_mf8",
        "intrinsic": "mfloat8x16x2_t vld2q_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_s8",
        "intrinsic": "int8x8x3_t vld3_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_s8",
        "intrinsic": "int8x16x3_t vld3q_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_s16",
        "intrinsic": "int16x4x3_t vld3_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_s16",
        "intrinsic": "int16x8x3_t vld3q_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_s32",
        "intrinsic": "int32x2x3_t vld3_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_s32",
        "intrinsic": "int32x4x3_t vld3q_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_u8",
        "intrinsic": "uint8x8x3_t vld3_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_u8",
        "intrinsic": "uint8x16x3_t vld3q_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_u16",
        "intrinsic": "uint16x4x3_t vld3_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_u16",
        "intrinsic": "uint16x8x3_t vld3q_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_u32",
        "intrinsic": "uint32x2x3_t vld3_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_u32",
        "intrinsic": "uint32x4x3_t vld3q_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_f16",
        "intrinsic": "float16x4x3_t vld3_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_f16",
        "intrinsic": "float16x8x3_t vld3q_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_f32",
        "intrinsic": "float32x2x3_t vld3_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_f32",
        "intrinsic": "float32x4x3_t vld3q_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_p8",
        "intrinsic": "poly8x8x3_t vld3_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_p8",
        "intrinsic": "poly8x16x3_t vld3q_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_p16",
        "intrinsic": "poly16x4x3_t vld3_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_p16",
        "intrinsic": "poly16x8x3_t vld3q_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_s64",
        "intrinsic": "int64x1x3_t vld3_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_u64",
        "intrinsic": "uint64x1x3_t vld3_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_p64",
        "intrinsic": "poly64x1x3_t vld3_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld3q_s64",
        "intrinsic": "int64x2x3_t vld3q_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_u64",
        "intrinsic": "uint64x2x3_t vld3q_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_p64",
        "intrinsic": "poly64x2x3_t vld3q_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_f64",
        "intrinsic": "float64x1x3_t vld3_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_f64",
        "intrinsic": "float64x2x3_t vld3q_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_mf8",
        "intrinsic": "mfloat8x8x3_t vld3_mf8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_mf8",
        "intrinsic": "mfloat8x16x3_t vld3q_mf8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_s8",
        "intrinsic": "int8x8x4_t vld4_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_s8",
        "intrinsic": "int8x16x4_t vld4q_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_s16",
        "intrinsic": "int16x4x4_t vld4_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_s16",
        "intrinsic": "int16x8x4_t vld4q_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_s32",
        "intrinsic": "int32x2x4_t vld4_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_s32",
        "intrinsic": "int32x4x4_t vld4q_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_u8",
        "intrinsic": "uint8x8x4_t vld4_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_u8",
        "intrinsic": "uint8x16x4_t vld4q_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_u16",
        "intrinsic": "uint16x4x4_t vld4_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_u16",
        "intrinsic": "uint16x8x4_t vld4q_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_u32",
        "intrinsic": "uint32x2x4_t vld4_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_u32",
        "intrinsic": "uint32x4x4_t vld4q_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_f16",
        "intrinsic": "float16x4x4_t vld4_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_f16",
        "intrinsic": "float16x8x4_t vld4q_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_f32",
        "intrinsic": "float32x2x4_t vld4_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_f32",
        "intrinsic": "float32x4x4_t vld4q_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_p8",
        "intrinsic": "poly8x8x4_t vld4_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_p8",
        "intrinsic": "poly8x16x4_t vld4q_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_p16",
        "intrinsic": "poly16x4x4_t vld4_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_p16",
        "intrinsic": "poly16x8x4_t vld4q_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_s64",
        "intrinsic": "int64x1x4_t vld4_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_u64",
        "intrinsic": "uint64x1x4_t vld4_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_p64",
        "intrinsic": "poly64x1x4_t vld4_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld4q_s64",
        "intrinsic": "int64x2x4_t vld4q_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_u64",
        "intrinsic": "uint64x2x4_t vld4q_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_p64",
        "intrinsic": "poly64x2x4_t vld4q_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_f64",
        "intrinsic": "float64x1x4_t vld4_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_f64",
        "intrinsic": "float64x2x4_t vld4q_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_mf8",
        "intrinsic": "mfloat8x8x4_t vld4_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_mf8",
        "intrinsic": "mfloat8x16x4_t vld4q_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_dup_s8",
        "intrinsic": "int8x8x2_t vld2_dup_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_s8",
        "intrinsic": "int8x16x2_t vld2q_dup_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_s16",
        "intrinsic": "int16x4x2_t vld2_dup_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_s16",
        "intrinsic": "int16x8x2_t vld2q_dup_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_s32",
        "intrinsic": "int32x2x2_t vld2_dup_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_s32",
        "intrinsic": "int32x4x2_t vld2q_dup_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_u8",
        "intrinsic": "uint8x8x2_t vld2_dup_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_u8",
        "intrinsic": "uint8x16x2_t vld2q_dup_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_u16",
        "intrinsic": "uint16x4x2_t vld2_dup_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_u16",
        "intrinsic": "uint16x8x2_t vld2q_dup_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_u32",
        "intrinsic": "uint32x2x2_t vld2_dup_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_u32",
        "intrinsic": "uint32x4x2_t vld2q_dup_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_f16",
        "intrinsic": "float16x4x2_t vld2_dup_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_f16",
        "intrinsic": "float16x8x2_t vld2q_dup_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_f32",
        "intrinsic": "float32x2x2_t vld2_dup_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_f32",
        "intrinsic": "float32x4x2_t vld2q_dup_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_p8",
        "intrinsic": "poly8x8x2_t vld2_dup_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_p8",
        "intrinsic": "poly8x16x2_t vld2q_dup_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_p16",
        "intrinsic": "poly16x4x2_t vld2_dup_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_dup_p16",
        "intrinsic": "poly16x8x2_t vld2q_dup_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_s64",
        "intrinsic": "int64x1x2_t vld2_dup_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_u64",
        "intrinsic": "uint64x1x2_t vld2_dup_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_dup_p64",
        "intrinsic": "poly64x1x2_t vld2_dup_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld2q_dup_s64",
        "intrinsic": "int64x2x2_t vld2q_dup_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_dup_u64",
        "intrinsic": "uint64x2x2_t vld2q_dup_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_dup_p64",
        "intrinsic": "poly64x2x2_t vld2q_dup_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_dup_f64",
        "intrinsic": "float64x1x2_t vld2_dup_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_dup_f64",
        "intrinsic": "float64x2x2_t vld2q_dup_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_dup_mf8",
        "intrinsic": "mfloat8x8x2_t vld2_dup_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_dup_mf8",
        "intrinsic": "mfloat8x16x2_t vld2q_dup_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_dup_s8",
        "intrinsic": "int8x8x3_t vld3_dup_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_s8",
        "intrinsic": "int8x16x3_t vld3q_dup_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_s16",
        "intrinsic": "int16x4x3_t vld3_dup_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_s16",
        "intrinsic": "int16x8x3_t vld3q_dup_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_s32",
        "intrinsic": "int32x2x3_t vld3_dup_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_s32",
        "intrinsic": "int32x4x3_t vld3q_dup_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_u8",
        "intrinsic": "uint8x8x3_t vld3_dup_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_u8",
        "intrinsic": "uint8x16x3_t vld3q_dup_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_u16",
        "intrinsic": "uint16x4x3_t vld3_dup_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_u16",
        "intrinsic": "uint16x8x3_t vld3q_dup_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_u32",
        "intrinsic": "uint32x2x3_t vld3_dup_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_u32",
        "intrinsic": "uint32x4x3_t vld3q_dup_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_f16",
        "intrinsic": "float16x4x3_t vld3_dup_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_f16",
        "intrinsic": "float16x8x3_t vld3q_dup_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_f32",
        "intrinsic": "float32x2x3_t vld3_dup_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_f32",
        "intrinsic": "float32x4x3_t vld3q_dup_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_p8",
        "intrinsic": "poly8x8x3_t vld3_dup_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_p8",
        "intrinsic": "poly8x16x3_t vld3q_dup_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_p16",
        "intrinsic": "poly16x4x3_t vld3_dup_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_dup_p16",
        "intrinsic": "poly16x8x3_t vld3q_dup_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_s64",
        "intrinsic": "int64x1x3_t vld3_dup_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_u64",
        "intrinsic": "uint64x1x3_t vld3_dup_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_dup_p64",
        "intrinsic": "poly64x1x3_t vld3_dup_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld3q_dup_s64",
        "intrinsic": "int64x2x3_t vld3q_dup_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_dup_u64",
        "intrinsic": "uint64x2x3_t vld3q_dup_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_dup_p64",
        "intrinsic": "poly64x2x3_t vld3q_dup_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_dup_f64",
        "intrinsic": "float64x1x3_t vld3_dup_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_dup_f64",
        "intrinsic": "float64x2x3_t vld3q_dup_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_dup_mf8",
        "intrinsic": "mfloat8x8x3_t vld3_dup_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_dup_mf8",
        "intrinsic": "mfloat8x16x3_t vld3q_dup_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_dup_s8",
        "intrinsic": "int8x8x4_t vld4_dup_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_s8",
        "intrinsic": "int8x16x4_t vld4q_dup_s8(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_s8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_s16",
        "intrinsic": "int16x4x4_t vld4_dup_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_s16",
        "intrinsic": "int16x8x4_t vld4q_dup_s16(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_s16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_s32",
        "intrinsic": "int32x2x4_t vld4_dup_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_s32",
        "intrinsic": "int32x4x4_t vld4q_dup_s32(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_s32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_u8",
        "intrinsic": "uint8x8x4_t vld4_dup_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_u8",
        "intrinsic": "uint8x16x4_t vld4q_dup_u8(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_u8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_u16",
        "intrinsic": "uint16x4x4_t vld4_dup_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_u16",
        "intrinsic": "uint16x8x4_t vld4q_dup_u16(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_u16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_u32",
        "intrinsic": "uint32x2x4_t vld4_dup_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_u32",
        "intrinsic": "uint32x4x4_t vld4q_dup_u32(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_u32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_f16",
        "intrinsic": "float16x4x4_t vld4_dup_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_f16",
        "intrinsic": "float16x8x4_t vld4q_dup_f16(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_f16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_f32",
        "intrinsic": "float32x2x4_t vld4_dup_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_f32",
        "intrinsic": "float32x4x4_t vld4q_dup_f32(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_f32",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_p8",
        "intrinsic": "poly8x8x4_t vld4_dup_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_p8",
        "intrinsic": "poly8x16x4_t vld4q_dup_p8(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_p8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_p16",
        "intrinsic": "poly16x4x4_t vld4_dup_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_dup_p16",
        "intrinsic": "poly16x8x4_t vld4q_dup_p16(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_p16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_s64",
        "intrinsic": "int64x1x4_t vld4_dup_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_u64",
        "intrinsic": "uint64x1x4_t vld4_dup_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_dup_p64",
        "intrinsic": "poly64x1x4_t vld4_dup_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld4q_dup_s64",
        "intrinsic": "int64x2x4_t vld4q_dup_s64(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_s64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_dup_u64",
        "intrinsic": "uint64x2x4_t vld4q_dup_u64(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_u64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_dup_p64",
        "intrinsic": "poly64x2x4_t vld4q_dup_p64(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_p64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_dup_f64",
        "intrinsic": "float64x1x4_t vld4_dup_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_dup_f64",
        "intrinsic": "float64x2x4_t vld4q_dup_f64(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_f64",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_dup_mf8",
        "intrinsic": "mfloat8x8x4_t vld4_dup_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_dup_mf8",
        "intrinsic": "mfloat8x16x4_t vld4q_dup_mf8(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_mf8",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_lane_s16",
        "intrinsic": "int16x4x2_t vld2_lane_s16(int16_t const *ptr, int16x4x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_s16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_lane_s16",
        "intrinsic": "int16x8x2_t vld2q_lane_s16(int16_t const *ptr, int16x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_s16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_s32",
        "intrinsic": "int32x2x2_t vld2_lane_s32(int32_t const *ptr, int32x2x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_s32",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_lane_s32",
        "intrinsic": "int32x4x2_t vld2q_lane_s32(int32_t const *ptr, int32x4x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_s32",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_u16",
        "intrinsic": "uint16x4x2_t vld2_lane_u16(uint16_t const *ptr, uint16x4x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_u16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_lane_u16",
        "intrinsic": "uint16x8x2_t vld2q_lane_u16(uint16_t const *ptr, uint16x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_u16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_u32",
        "intrinsic": "uint32x2x2_t vld2_lane_u32(uint32_t const *ptr, uint32x2x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_u32",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_lane_u32",
        "intrinsic": "uint32x4x2_t vld2q_lane_u32(uint32_t const *ptr, uint32x4x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_u32",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_f16",
        "intrinsic": "float16x4x2_t vld2_lane_f16(float16_t const *ptr, float16x4x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_f16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_lane_f16",
        "intrinsic": "float16x8x2_t vld2q_lane_f16(float16_t const *ptr, float16x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_f16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_f32",
        "intrinsic": "float32x2x2_t vld2_lane_f32(float32_t const *ptr, float32x2x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_f32",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_lane_f32",
        "intrinsic": "float32x4x2_t vld2q_lane_f32(float32_t const *ptr, float32x4x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_f32",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_p16",
        "intrinsic": "poly16x4x2_t vld2_lane_p16(poly16_t const *ptr, poly16x4x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_p16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_lane_p16",
        "intrinsic": "poly16x8x2_t vld2q_lane_p16(poly16_t const *ptr, poly16x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_p16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_s8",
        "intrinsic": "int8x8x2_t vld2_lane_s8(int8_t const *ptr, int8x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_s8",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_u8",
        "intrinsic": "uint8x8x2_t vld2_lane_u8(uint8_t const *ptr, uint8x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_u8",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2_lane_p8",
        "intrinsic": "poly8x8x2_t vld2_lane_p8(poly8_t const *ptr, poly8x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_p8",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld2q_lane_s8",
        "intrinsic": "int8x16x2_t vld2q_lane_s8(int8_t const *ptr, int8x16x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_s8",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_lane_u8",
        "intrinsic": "uint8x16x2_t vld2q_lane_u8(uint8_t const *ptr, uint8x16x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_u8",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_lane_p8",
        "intrinsic": "poly8x16x2_t vld2q_lane_p8(poly8_t const *ptr, poly8x16x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_p8",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_lane_s64",
        "intrinsic": "int64x1x2_t vld2_lane_s64(int64_t const *ptr, int64x1x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_s64",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "ptr -> Xn; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_lane_s64",
        "intrinsic": "int64x2x2_t vld2q_lane_s64(int64_t const *ptr, int64x2x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_s64",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "ptr -> Xn; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_lane_u64",
        "intrinsic": "uint64x1x2_t vld2_lane_u64(uint64_t const *ptr, uint64x1x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_u64",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_lane_u64",
        "intrinsic": "uint64x2x2_t vld2q_lane_u64(uint64_t const *ptr, uint64x2x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_u64",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_lane_p64",
        "intrinsic": "poly64x1x2_t vld2_lane_p64(poly64_t const *ptr, poly64x1x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_p64",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_lane_p64",
        "intrinsic": "poly64x2x2_t vld2q_lane_p64(poly64_t const *ptr, poly64x2x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_p64",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_lane_f64",
        "intrinsic": "float64x1x2_t vld2_lane_f64(float64_t const *ptr, float64x1x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_f64",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_lane_f64",
        "intrinsic": "float64x2x2_t vld2q_lane_f64(float64_t const *ptr, float64x2x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_f64",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2_lane_mf8",
        "intrinsic": "mfloat8x8x2_t vld2_lane_mf8(mfloat8_t const *ptr, mfloat8x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_mf8",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld2q_lane_mf8",
        "intrinsic": "mfloat8x16x2_t vld2q_lane_mf8(mfloat8_t const *ptr, mfloat8x16x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_mf8",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_lane_s16",
        "intrinsic": "int16x4x3_t vld3_lane_s16(int16_t const *ptr, int16x4x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_s16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_lane_s16",
        "intrinsic": "int16x8x3_t vld3q_lane_s16(int16_t const *ptr, int16x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_s16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_s32",
        "intrinsic": "int32x2x3_t vld3_lane_s32(int32_t const *ptr, int32x2x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_s32",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.2S; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_lane_s32",
        "intrinsic": "int32x4x3_t vld3q_lane_s32(int32_t const *ptr, int32x4x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_s32",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.4S; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_u16",
        "intrinsic": "uint16x4x3_t vld3_lane_u16(uint16_t const *ptr, uint16x4x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_u16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_lane_u16",
        "intrinsic": "uint16x8x3_t vld3q_lane_u16(uint16_t const *ptr, uint16x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_u16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_u32",
        "intrinsic": "uint32x2x3_t vld3_lane_u32(uint32_t const *ptr, uint32x2x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_u32",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.2S; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_lane_u32",
        "intrinsic": "uint32x4x3_t vld3q_lane_u32(uint32_t const *ptr, uint32x4x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_u32",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.4S; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_f16",
        "intrinsic": "float16x4x3_t vld3_lane_f16(float16_t const *ptr, float16x4x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_f16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_lane_f16",
        "intrinsic": "float16x8x3_t vld3q_lane_f16(float16_t const *ptr, float16x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_f16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_f32",
        "intrinsic": "float32x2x3_t vld3_lane_f32(float32_t const *ptr, float32x2x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_f32",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.2S; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_lane_f32",
        "intrinsic": "float32x4x3_t vld3q_lane_f32(float32_t const *ptr, float32x4x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_f32",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.4S; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_p16",
        "intrinsic": "poly16x4x3_t vld3_lane_p16(poly16_t const *ptr, poly16x4x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_p16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_lane_p16",
        "intrinsic": "poly16x8x3_t vld3q_lane_p16(poly16_t const *ptr, poly16x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_p16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_s8",
        "intrinsic": "int8x8x3_t vld3_lane_s8(int8_t const *ptr, int8x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_s8",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8B; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_u8",
        "intrinsic": "uint8x8x3_t vld3_lane_u8(uint8_t const *ptr, uint8x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_u8",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8B; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3_lane_p8",
        "intrinsic": "poly8x8x3_t vld3_lane_p8(poly8_t const *ptr, poly8x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_p8",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8B; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld3q_lane_s8",
        "intrinsic": "int8x16x3_t vld3q_lane_s8(int8_t const *ptr, int8x16x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_s8",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.16B; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_lane_u8",
        "intrinsic": "uint8x16x3_t vld3q_lane_u8(uint8_t const *ptr, uint8x16x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_u8",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.16B; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_lane_p8",
        "intrinsic": "poly8x16x3_t vld3q_lane_p8(poly8_t const *ptr, poly8x16x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_p8",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.16B; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_lane_s64",
        "intrinsic": "int64x1x3_t vld3_lane_s64(int64_t const *ptr, int64x1x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_s64",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.1D; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_lane_s64",
        "intrinsic": "int64x2x3_t vld3q_lane_s64(int64_t const *ptr, int64x2x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_s64",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.2D; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_lane_u64",
        "intrinsic": "uint64x1x3_t vld3_lane_u64(uint64_t const *ptr, uint64x1x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_u64",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.1D; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_lane_u64",
        "intrinsic": "uint64x2x3_t vld3q_lane_u64(uint64_t const *ptr, uint64x2x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_u64",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.2D; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_lane_p64",
        "intrinsic": "poly64x1x3_t vld3_lane_p64(poly64_t const *ptr, poly64x1x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_p64",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.1D; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_lane_p64",
        "intrinsic": "poly64x2x3_t vld3q_lane_p64(poly64_t const *ptr, poly64x2x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_p64",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.2D; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_lane_f64",
        "intrinsic": "float64x1x3_t vld3_lane_f64(float64_t const *ptr, float64x1x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_f64",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.1D; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_lane_f64",
        "intrinsic": "float64x2x3_t vld3q_lane_f64(float64_t const *ptr, float64x2x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_f64",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.2D; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3_lane_mf8",
        "intrinsic": "mfloat8x8x3_t vld3_lane_mf8(mfloat8_t const *ptr, mfloat8x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_mf8",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8B; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld3q_lane_mf8",
        "intrinsic": "mfloat8x16x3_t vld3q_lane_mf8(mfloat8_t const *ptr, mfloat8x16x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_mf8",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.16B; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_lane_s16",
        "intrinsic": "int16x4x4_t vld4_lane_s16(int16_t const *ptr, int16x4x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_s16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.4H; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_lane_s16",
        "intrinsic": "int16x8x4_t vld4q_lane_s16(int16_t const *ptr, int16x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_s16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8H; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_s32",
        "intrinsic": "int32x2x4_t vld4_lane_s32(int32_t const *ptr, int32x2x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_s32",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.2S; src.val[2] -> Vt3.2S; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_lane_s32",
        "intrinsic": "int32x4x4_t vld4q_lane_s32(int32_t const *ptr, int32x4x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_s32",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.4S; src.val[2] -> Vt3.4S; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_u16",
        "intrinsic": "uint16x4x4_t vld4_lane_u16(uint16_t const *ptr, uint16x4x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_u16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.4H; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_lane_u16",
        "intrinsic": "uint16x8x4_t vld4q_lane_u16(uint16_t const *ptr, uint16x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_u16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8H; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_u32",
        "intrinsic": "uint32x2x4_t vld4_lane_u32(uint32_t const *ptr, uint32x2x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_u32",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.2S; src.val[2] -> Vt3.2S; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_lane_u32",
        "intrinsic": "uint32x4x4_t vld4q_lane_u32(uint32_t const *ptr, uint32x4x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_u32",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.4S; src.val[2] -> Vt3.4S; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_f16",
        "intrinsic": "float16x4x4_t vld4_lane_f16(float16_t const *ptr, float16x4x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_f16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.4H; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_lane_f16",
        "intrinsic": "float16x8x4_t vld4q_lane_f16(float16_t const *ptr, float16x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_f16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8H; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_f32",
        "intrinsic": "float32x2x4_t vld4_lane_f32(float32_t const *ptr, float32x2x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_f32",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.2S; src.val[2] -> Vt3.2S; src.val[1] -> Vt2.2S; src.val[0] -> Vt.2S; 0 <= lane <= 1",
        "aarch64_instruction": "LD4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_lane_f32",
        "intrinsic": "float32x4x4_t vld4q_lane_f32(float32_t const *ptr, float32x4x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_f32",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.4S; src.val[2] -> Vt3.4S; src.val[1] -> Vt2.4S; src.val[0] -> Vt.4S; 0 <= lane <= 3",
        "aarch64_instruction": "LD4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_p16",
        "intrinsic": "poly16x4x4_t vld4_lane_p16(poly16_t const *ptr, poly16x4x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_p16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.4H; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_lane_p16",
        "intrinsic": "poly16x8x4_t vld4q_lane_p16(poly16_t const *ptr, poly16x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_p16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8H; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_s8",
        "intrinsic": "int8x8x4_t vld4_lane_s8(int8_t const *ptr, int8x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_s8",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8B; src.val[2] -> Vt3.8B; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_u8",
        "intrinsic": "uint8x8x4_t vld4_lane_u8(uint8_t const *ptr, uint8x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_u8",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8B; src.val[2] -> Vt3.8B; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4_lane_p8",
        "intrinsic": "poly8x8x4_t vld4_lane_p8(poly8_t const *ptr, poly8x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_p8",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8B; src.val[2] -> Vt3.8B; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld4q_lane_s8",
        "intrinsic": "int8x16x4_t vld4q_lane_s8(int8_t const *ptr, int8x16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_s8",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.16B; src.val[2] -> Vt3.16B; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_lane_u8",
        "intrinsic": "uint8x16x4_t vld4q_lane_u8(uint8_t const *ptr, uint8x16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_u8",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.16B; src.val[2] -> Vt3.16B; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_lane_p8",
        "intrinsic": "poly8x16x4_t vld4q_lane_p8(poly8_t const *ptr, poly8x16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_p8",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.16B; src.val[2] -> Vt3.16B; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_lane_s64",
        "intrinsic": "int64x1x4_t vld4_lane_s64(int64_t const *ptr, int64x1x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_s64",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.1D; src.val[2] -> Vt3.1D; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_lane_s64",
        "intrinsic": "int64x2x4_t vld4q_lane_s64(int64_t const *ptr, int64x2x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_s64",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.2D; src.val[2] -> Vt3.2D; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_lane_u64",
        "intrinsic": "uint64x1x4_t vld4_lane_u64(uint64_t const *ptr, uint64x1x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_u64",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.1D; src.val[2] -> Vt3.1D; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_lane_u64",
        "intrinsic": "uint64x2x4_t vld4q_lane_u64(uint64_t const *ptr, uint64x2x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_u64",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.2D; src.val[2] -> Vt3.2D; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_lane_p64",
        "intrinsic": "poly64x1x4_t vld4_lane_p64(poly64_t const *ptr, poly64x1x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_p64",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.1D; src.val[2] -> Vt3.1D; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_lane_p64",
        "intrinsic": "poly64x2x4_t vld4q_lane_p64(poly64_t const *ptr, poly64x2x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_p64",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.2D; src.val[2] -> Vt3.2D; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_lane_f64",
        "intrinsic": "float64x1x4_t vld4_lane_f64(float64_t const *ptr, float64x1x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_f64",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.1D; src.val[2] -> Vt3.1D; src.val[1] -> Vt2.1D; src.val[0] -> Vt.1D; 0 <= lane <= 0",
        "aarch64_instruction": "LD4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_lane_f64",
        "intrinsic": "float64x2x4_t vld4q_lane_f64(float64_t const *ptr, float64x2x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_f64",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.2D; src.val[2] -> Vt3.2D; src.val[1] -> Vt2.2D; src.val[0] -> Vt.2D; 0 <= lane <= 1",
        "aarch64_instruction": "LD4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4_lane_mf8",
        "intrinsic": "mfloat8x8x4_t vld4_lane_mf8(mfloat8_t const *ptr, mfloat8x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_mf8",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8B; src.val[2] -> Vt3.8B; src.val[1] -> Vt2.8B; src.val[0] -> Vt.8B; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld4q_lane_mf8",
        "intrinsic": "mfloat8x16x4_t vld4q_lane_mf8(mfloat8_t const *ptr, mfloat8x16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_mf8",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.16B; src.val[2] -> Vt3.16B; src.val[1] -> Vt2.16B; src.val[0] -> Vt.16B; 0 <= lane <= 15",
        "aarch64_instruction": "LD4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_s8_x2",
        "intrinsic": "int8x8x2_t vld1_s8_x2(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s8_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s8_x2",
        "intrinsic": "int8x16x2_t vld1q_s8_x2(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s8_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s16_x2",
        "intrinsic": "int16x4x2_t vld1_s16_x2(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s16_x2",
        "intrinsic": "int16x8x2_t vld1q_s16_x2(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s32_x2",
        "intrinsic": "int32x2x2_t vld1_s32_x2(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s32_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s32_x2",
        "intrinsic": "int32x4x2_t vld1q_s32_x2(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s32_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u8_x2",
        "intrinsic": "uint8x8x2_t vld1_u8_x2(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u8_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u8_x2",
        "intrinsic": "uint8x16x2_t vld1q_u8_x2(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u8_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u16_x2",
        "intrinsic": "uint16x4x2_t vld1_u16_x2(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u16_x2",
        "intrinsic": "uint16x8x2_t vld1q_u16_x2(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u32_x2",
        "intrinsic": "uint32x2x2_t vld1_u32_x2(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u32_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u32_x2",
        "intrinsic": "uint32x4x2_t vld1q_u32_x2(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u32_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_f16_x2",
        "intrinsic": "float16x4x2_t vld1_f16_x2(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_f16_x2",
        "intrinsic": "float16x8x2_t vld1q_f16_x2(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_f32_x2",
        "intrinsic": "float32x2x2_t vld1_f32_x2(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f32_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt2.2S},[Xn]",
        "result": "Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_f32_x2",
        "intrinsic": "float32x4x2_t vld1q_f32_x2(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f32_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt2.4S},[Xn]",
        "result": "Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p8_x2",
        "intrinsic": "poly8x8x2_t vld1_p8_x2(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p8_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p8_x2",
        "intrinsic": "poly8x16x2_t vld1q_p8_x2(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p8_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p16_x2",
        "intrinsic": "poly16x4x2_t vld1_p16_x2(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p16_x2",
        "intrinsic": "poly16x8x2_t vld1q_p16_x2(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s64_x2",
        "intrinsic": "int64x1x2_t vld1_s64_x2(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s64_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u64_x2",
        "intrinsic": "uint64x1x2_t vld1_u64_x2(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u64_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p64_x2",
        "intrinsic": "poly64x1x2_t vld1_p64_x2(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p64_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_s64_x2",
        "intrinsic": "int64x2x2_t vld1q_s64_x2(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s64_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u64_x2",
        "intrinsic": "uint64x2x2_t vld1q_u64_x2(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u64_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p64_x2",
        "intrinsic": "poly64x2x2_t vld1q_p64_x2(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p64_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_f64_x2",
        "intrinsic": "float64x1x2_t vld1_f64_x2(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f64_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_f64_x2",
        "intrinsic": "float64x2x2_t vld1q_f64_x2(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f64_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt2.2D},[Xn]",
        "result": "Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_mf8_x2",
        "intrinsic": "mfloat8x8x2_t vld1_mf8_x2(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_mf8_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt2.8B},[Xn]",
        "result": "Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_mf8_x2",
        "intrinsic": "mfloat8x16x2_t vld1q_mf8_x2(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_mf8_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt2.16B},[Xn]",
        "result": "Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_s8_x3",
        "intrinsic": "int8x8x3_t vld1_s8_x3(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s8_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s8_x3",
        "intrinsic": "int8x16x3_t vld1q_s8_x3(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s8_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s16_x3",
        "intrinsic": "int16x4x3_t vld1_s16_x3(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s16_x3",
        "intrinsic": "int16x8x3_t vld1q_s16_x3(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s32_x3",
        "intrinsic": "int32x2x3_t vld1_s32_x3(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s32_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s32_x3",
        "intrinsic": "int32x4x3_t vld1q_s32_x3(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s32_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u8_x3",
        "intrinsic": "uint8x8x3_t vld1_u8_x3(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u8_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u8_x3",
        "intrinsic": "uint8x16x3_t vld1q_u8_x3(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u8_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u16_x3",
        "intrinsic": "uint16x4x3_t vld1_u16_x3(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u16_x3",
        "intrinsic": "uint16x8x3_t vld1q_u16_x3(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u32_x3",
        "intrinsic": "uint32x2x3_t vld1_u32_x3(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u32_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u32_x3",
        "intrinsic": "uint32x4x3_t vld1q_u32_x3(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u32_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_f16_x3",
        "intrinsic": "float16x4x3_t vld1_f16_x3(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_f16_x3",
        "intrinsic": "float16x8x3_t vld1q_f16_x3(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_f32_x3",
        "intrinsic": "float32x2x3_t vld1_f32_x3(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f32_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt3.2S},[Xn]",
        "result": "Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_f32_x3",
        "intrinsic": "float32x4x3_t vld1q_f32_x3(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f32_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt3.4S},[Xn]",
        "result": "Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p8_x3",
        "intrinsic": "poly8x8x3_t vld1_p8_x3(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p8_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p8_x3",
        "intrinsic": "poly8x16x3_t vld1q_p8_x3(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p8_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p16_x3",
        "intrinsic": "poly16x4x3_t vld1_p16_x3(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p16_x3",
        "intrinsic": "poly16x8x3_t vld1q_p16_x3(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s64_x3",
        "intrinsic": "int64x1x3_t vld1_s64_x3(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s64_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u64_x3",
        "intrinsic": "uint64x1x3_t vld1_u64_x3(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u64_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p64_x3",
        "intrinsic": "poly64x1x3_t vld1_p64_x3(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p64_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_s64_x3",
        "intrinsic": "int64x2x3_t vld1q_s64_x3(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s64_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u64_x3",
        "intrinsic": "uint64x2x3_t vld1q_u64_x3(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u64_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p64_x3",
        "intrinsic": "poly64x2x3_t vld1q_p64_x3(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p64_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_f64_x3",
        "intrinsic": "float64x1x3_t vld1_f64_x3(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f64_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_f64_x3",
        "intrinsic": "float64x2x3_t vld1q_f64_x3(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f64_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt3.2D},[Xn]",
        "result": "Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_mf8_x3",
        "intrinsic": "mfloat8x8x3_t vld1_mf8_x3(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_mf8_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt3.8B},[Xn]",
        "result": "Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_mf8_x3",
        "intrinsic": "mfloat8x16x3_t vld1q_mf8_x3(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_mf8_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt3.16B},[Xn]",
        "result": "Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_s8_x4",
        "intrinsic": "int8x8x4_t vld1_s8_x4(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s8_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s8_x4",
        "intrinsic": "int8x16x4_t vld1q_s8_x4(int8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s8_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s16_x4",
        "intrinsic": "int16x4x4_t vld1_s16_x4(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s16_x4",
        "intrinsic": "int16x8x4_t vld1q_s16_x4(int16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s32_x4",
        "intrinsic": "int32x2x4_t vld1_s32_x4(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s32_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_s32_x4",
        "intrinsic": "int32x4x4_t vld1q_s32_x4(int32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s32_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u8_x4",
        "intrinsic": "uint8x8x4_t vld1_u8_x4(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u8_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u8_x4",
        "intrinsic": "uint8x16x4_t vld1q_u8_x4(uint8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u8_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u16_x4",
        "intrinsic": "uint16x4x4_t vld1_u16_x4(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u16_x4",
        "intrinsic": "uint16x8x4_t vld1q_u16_x4(uint16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u32_x4",
        "intrinsic": "uint32x2x4_t vld1_u32_x4(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u32_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u32_x4",
        "intrinsic": "uint32x4x4_t vld1q_u32_x4(uint32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u32_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_f16_x4",
        "intrinsic": "float16x4x4_t vld1_f16_x4(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_f16_x4",
        "intrinsic": "float16x8x4_t vld1q_f16_x4(float16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_f32_x4",
        "intrinsic": "float32x2x4_t vld1_f32_x4(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f32_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2S - Vt4.2S},[Xn]",
        "result": "Vt4.2S -> result.val[3]; Vt3.2S -> result.val[2]; Vt2.2S -> result.val[1]; Vt.2S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_f32_x4",
        "intrinsic": "float32x4x4_t vld1q_f32_x4(float32_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f32_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4S - Vt4.4S},[Xn]",
        "result": "Vt4.4S -> result.val[3]; Vt3.4S -> result.val[2]; Vt2.4S -> result.val[1]; Vt.4S -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p8_x4",
        "intrinsic": "poly8x8x4_t vld1_p8_x4(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p8_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p8_x4",
        "intrinsic": "poly8x16x4_t vld1q_p8_x4(poly8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p8_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p16_x4",
        "intrinsic": "poly16x4x4_t vld1_p16_x4(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p16_x4",
        "intrinsic": "poly16x8x4_t vld1q_p16_x4(poly16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_s64_x4",
        "intrinsic": "int64x1x4_t vld1_s64_x4(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_s64_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_u64_x4",
        "intrinsic": "uint64x1x4_t vld1_u64_x4(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_u64_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_p64_x4",
        "intrinsic": "poly64x1x4_t vld1_p64_x4(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_p64_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_s64_x4",
        "intrinsic": "int64x2x4_t vld1q_s64_x4(int64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_s64_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_u64_x4",
        "intrinsic": "uint64x2x4_t vld1q_u64_x4(uint64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_u64_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_p64_x4",
        "intrinsic": "poly64x2x4_t vld1q_p64_x4(poly64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_p64_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_f64_x4",
        "intrinsic": "float64x1x4_t vld1_f64_x4(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_f64_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "Vt4.1D -> result.val[3]; Vt3.1D -> result.val[2]; Vt2.1D -> result.val[1]; Vt.1D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_f64_x4",
        "intrinsic": "float64x2x4_t vld1q_f64_x4(float64_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_f64_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.2D - Vt4.2D},[Xn]",
        "result": "Vt4.2D -> result.val[3]; Vt3.2D -> result.val[2]; Vt2.2D -> result.val[1]; Vt.2D -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1_mf8_x4",
        "intrinsic": "mfloat8x8x4_t vld1_mf8_x4(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_mf8_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8B - Vt4.8B},[Xn]",
        "result": "Vt4.8B -> result.val[3]; Vt3.8B -> result.val[2]; Vt2.8B -> result.val[1]; Vt.8B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vld1q_mf8_x4",
        "intrinsic": "mfloat8x16x4_t vld1q_mf8_x4(mfloat8_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_mf8_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.16B - Vt4.16B},[Xn]",
        "result": "Vt4.16B -> result.val[3]; Vt3.16B -> result.val[2]; Vt2.16B -> result.val[1]; Vt.16B -> result.val[0]",
        "supported_architectures": "A64"
      },
      {
        "name": "vldrq_p128",
        "intrinsic": "poly128_t vldrq_p128(poly128_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vldrq_p128",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LDR Qd,[Xn]",
        "result": "Qd -> result",
        "supported_architectures": "A32/A64"
      }
    ],
    "Store": [
      {
        "name": "vst1_s8",
        "intrinsic": "void vst1_s8(int8_t *ptr, int8x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s8",
        "argument_preparation": "val -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s8",
        "intrinsic": "void vst1q_s8(int8_t *ptr, int8x16_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s8",
        "argument_preparation": "val -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s16",
        "intrinsic": "void vst1_s16(int16_t *ptr, int16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s16",
        "intrinsic": "void vst1q_s16(int16_t *ptr, int16x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s32",
        "intrinsic": "void vst1_s32(int32_t *ptr, int32x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s32",
        "argument_preparation": "val -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s32",
        "intrinsic": "void vst1q_s32(int32_t *ptr, int32x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s32",
        "argument_preparation": "val -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s64",
        "intrinsic": "void vst1_s64(int64_t *ptr, int64x1_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s64",
        "intrinsic": "void vst1q_s64(int64_t *ptr, int64x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u8",
        "intrinsic": "void vst1_u8(uint8_t *ptr, uint8x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u8",
        "argument_preparation": "val -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u8",
        "intrinsic": "void vst1q_u8(uint8_t *ptr, uint8x16_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u8",
        "argument_preparation": "val -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u16",
        "intrinsic": "void vst1_u16(uint16_t *ptr, uint16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u16",
        "intrinsic": "void vst1q_u16(uint16_t *ptr, uint16x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u32",
        "intrinsic": "void vst1_u32(uint32_t *ptr, uint32x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u32",
        "argument_preparation": "val -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u32",
        "intrinsic": "void vst1q_u32(uint32_t *ptr, uint32x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u32",
        "argument_preparation": "val -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u64",
        "intrinsic": "void vst1_u64(uint64_t *ptr, uint64x1_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u64",
        "intrinsic": "void vst1q_u64(uint64_t *ptr, uint64x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p64",
        "intrinsic": "void vst1_p64(poly64_t *ptr, poly64x1_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_p64",
        "intrinsic": "void vst1q_p64(poly64_t *ptr, poly64x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1_f16",
        "intrinsic": "void vst1_f16(float16_t *ptr, float16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_f16",
        "intrinsic": "void vst1q_f16(float16_t *ptr, float16x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f32",
        "intrinsic": "void vst1_f32(float32_t *ptr, float32x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f32",
        "argument_preparation": "val -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_f32",
        "intrinsic": "void vst1q_f32(float32_t *ptr, float32x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f32",
        "argument_preparation": "val -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p8",
        "intrinsic": "void vst1_p8(poly8_t *ptr, poly8x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p8",
        "argument_preparation": "val -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p8",
        "intrinsic": "void vst1q_p8(poly8_t *ptr, poly8x16_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p8",
        "argument_preparation": "val -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p16",
        "intrinsic": "void vst1_p16(poly16_t *ptr, poly16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p16",
        "intrinsic": "void vst1q_p16(poly16_t *ptr, poly16x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f64",
        "intrinsic": "void vst1_f64(float64_t *ptr, float64x1_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_f64",
        "intrinsic": "void vst1q_f64(float64_t *ptr, float64x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_mf8",
        "intrinsic": "void vst1_mf8(mfloat8_t *ptr, mfloat8x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_mf8",
        "argument_preparation": "val -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_mf8",
        "intrinsic": "void vst1q_mf8(mfloat8_t *ptr, mfloat8x16_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_mf8",
        "argument_preparation": "val -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_lane_s8",
        "intrinsic": "void vst1_lane_s8(int8_t *ptr, int8x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_s8",
        "argument_preparation": "val -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_s8",
        "intrinsic": "void vst1q_lane_s8(int8_t *ptr, int8x16_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_s8",
        "argument_preparation": "val -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST1 {Vt.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_s16",
        "intrinsic": "void vst1_lane_s16(int16_t *ptr, int16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_s16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_s16",
        "intrinsic": "void vst1q_lane_s16(int16_t *ptr, int16x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_s16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_s32",
        "intrinsic": "void vst1_lane_s32(int32_t *ptr, int32x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_s32",
        "argument_preparation": "val -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST1 {Vt.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_s32",
        "intrinsic": "void vst1q_lane_s32(int32_t *ptr, int32x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_s32",
        "argument_preparation": "val -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST1 {Vt.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_s64",
        "intrinsic": "void vst1_lane_s64(int64_t *ptr, int64x1_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_s64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_s64",
        "intrinsic": "void vst1q_lane_s64(int64_t *ptr, int64x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_s64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_u8",
        "intrinsic": "void vst1_lane_u8(uint8_t *ptr, uint8x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_u8",
        "argument_preparation": "val -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_u8",
        "intrinsic": "void vst1q_lane_u8(uint8_t *ptr, uint8x16_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_u8",
        "argument_preparation": "val -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST1 {Vt.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_u16",
        "intrinsic": "void vst1_lane_u16(uint16_t *ptr, uint16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_u16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_u16",
        "intrinsic": "void vst1q_lane_u16(uint16_t *ptr, uint16x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_u16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_u32",
        "intrinsic": "void vst1_lane_u32(uint32_t *ptr, uint32x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_u32",
        "argument_preparation": "val -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST1 {Vt.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_u32",
        "intrinsic": "void vst1q_lane_u32(uint32_t *ptr, uint32x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_u32",
        "argument_preparation": "val -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST1 {Vt.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_u64",
        "intrinsic": "void vst1_lane_u64(uint64_t *ptr, uint64x1_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_u64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_u64",
        "intrinsic": "void vst1q_lane_u64(uint64_t *ptr, uint64x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_u64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_p64",
        "intrinsic": "void vst1_lane_p64(poly64_t *ptr, poly64x1_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_p64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_lane_p64",
        "intrinsic": "void vst1q_lane_p64(poly64_t *ptr, poly64x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_p64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1_lane_f16",
        "intrinsic": "void vst1_lane_f16(float16_t *ptr, float16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_f16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_f16",
        "intrinsic": "void vst1q_lane_f16(float16_t *ptr, float16x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_f16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_f32",
        "intrinsic": "void vst1_lane_f32(float32_t *ptr, float32x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_f32",
        "argument_preparation": "val -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST1 {Vt.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_f32",
        "intrinsic": "void vst1q_lane_f32(float32_t *ptr, float32x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_f32",
        "argument_preparation": "val -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST1 {Vt.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_p8",
        "intrinsic": "void vst1_lane_p8(poly8_t *ptr, poly8x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_p8",
        "argument_preparation": "val -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_p8",
        "intrinsic": "void vst1q_lane_p8(poly8_t *ptr, poly8x16_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_p8",
        "argument_preparation": "val -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST1 {Vt.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_p16",
        "intrinsic": "void vst1_lane_p16(poly16_t *ptr, poly16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_p16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_lane_p16",
        "intrinsic": "void vst1q_lane_p16(poly16_t *ptr, poly16x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_p16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_lane_f64",
        "intrinsic": "void vst1_lane_f64(float64_t *ptr, float64x1_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_f64",
        "argument_preparation": "val -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_lane_f64",
        "intrinsic": "void vst1q_lane_f64(float64_t *ptr, float64x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_f64",
        "argument_preparation": "val -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST1 {Vt.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_lane_mf8",
        "intrinsic": "void vst1_lane_mf8(mfloat8_t *ptr, mfloat8x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_mf8",
        "argument_preparation": "val -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_lane_mf8",
        "intrinsic": "void vst1q_lane_mf8(mfloat8_t *ptr, mfloat8x16_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_mf8",
        "argument_preparation": "val -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST1 {Vt.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_s8",
        "intrinsic": "void vst2_s8(int8_t *ptr, int8x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_s8",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8B - Vt2.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_s8",
        "intrinsic": "void vst2q_s8(int8_t *ptr, int8x16x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_s8",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.16B - Vt2.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_s16",
        "intrinsic": "void vst2_s16(int16_t *ptr, int16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_s16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_s16",
        "intrinsic": "void vst2q_s16(int16_t *ptr, int16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_s16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_s32",
        "intrinsic": "void vst2_s32(int32_t *ptr, int32x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_s32",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.2S - Vt2.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_s32",
        "intrinsic": "void vst2q_s32(int32_t *ptr, int32x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_s32",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.4S - Vt2.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_u8",
        "intrinsic": "void vst2_u8(uint8_t *ptr, uint8x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_u8",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8B - Vt2.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_u8",
        "intrinsic": "void vst2q_u8(uint8_t *ptr, uint8x16x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_u8",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.16B - Vt2.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_u16",
        "intrinsic": "void vst2_u16(uint16_t *ptr, uint16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_u16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_u16",
        "intrinsic": "void vst2q_u16(uint16_t *ptr, uint16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_u16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_u32",
        "intrinsic": "void vst2_u32(uint32_t *ptr, uint32x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_u32",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.2S - Vt2.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_u32",
        "intrinsic": "void vst2q_u32(uint32_t *ptr, uint32x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_u32",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.4S - Vt2.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_f16",
        "intrinsic": "void vst2_f16(float16_t *ptr, float16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_f16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_f16",
        "intrinsic": "void vst2q_f16(float16_t *ptr, float16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_f16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_f32",
        "intrinsic": "void vst2_f32(float32_t *ptr, float32x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_f32",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.2S - Vt2.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_f32",
        "intrinsic": "void vst2q_f32(float32_t *ptr, float32x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_f32",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.4S - Vt2.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_p8",
        "intrinsic": "void vst2_p8(poly8_t *ptr, poly8x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_p8",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8B - Vt2.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_p8",
        "intrinsic": "void vst2q_p8(poly8_t *ptr, poly8x16x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_p8",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.16B - Vt2.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_p16",
        "intrinsic": "void vst2_p16(poly16_t *ptr, poly16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_p16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_p16",
        "intrinsic": "void vst2q_p16(poly16_t *ptr, poly16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_p16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_s64",
        "intrinsic": "void vst2_s64(int64_t *ptr, int64x1x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_s64",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_u64",
        "intrinsic": "void vst2_u64(uint64_t *ptr, uint64x1x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_u64",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_p64",
        "intrinsic": "void vst2_p64(poly64_t *ptr, poly64x1x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_p64",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst2q_s64",
        "intrinsic": "void vst2q_s64(int64_t *ptr, int64x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_s64",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.2D - Vt2.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_u64",
        "intrinsic": "void vst2q_u64(uint64_t *ptr, uint64x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_u64",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.2D - Vt2.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_p64",
        "intrinsic": "void vst2q_p64(poly64_t *ptr, poly64x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_p64",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.2D - Vt2.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_f64",
        "intrinsic": "void vst2_f64(float64_t *ptr, float64x1x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_f64",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_f64",
        "intrinsic": "void vst2q_f64(float64_t *ptr, float64x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_f64",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.2D - Vt2.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_mf8",
        "intrinsic": "void vst2_mf8(mfloat8_t *ptr, mfloat8x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_mf8",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8B - Vt2.8B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_mf8",
        "intrinsic": "void vst2q_mf8(mfloat8_t *ptr, mfloat8x16x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_mf8",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.16B - Vt2.16B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3_s8",
        "intrinsic": "void vst3_s8(int8_t *ptr, int8x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_s8",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8B - Vt3.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_s8",
        "intrinsic": "void vst3q_s8(int8_t *ptr, int8x16x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_s8",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.16B - Vt3.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_s16",
        "intrinsic": "void vst3_s16(int16_t *ptr, int16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_s16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_s16",
        "intrinsic": "void vst3q_s16(int16_t *ptr, int16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_s16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_s32",
        "intrinsic": "void vst3_s32(int32_t *ptr, int32x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_s32",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.2S - Vt3.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_s32",
        "intrinsic": "void vst3q_s32(int32_t *ptr, int32x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_s32",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.4S - Vt3.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_u8",
        "intrinsic": "void vst3_u8(uint8_t *ptr, uint8x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_u8",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8B - Vt3.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_u8",
        "intrinsic": "void vst3q_u8(uint8_t *ptr, uint8x16x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_u8",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.16B - Vt3.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_u16",
        "intrinsic": "void vst3_u16(uint16_t *ptr, uint16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_u16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_u16",
        "intrinsic": "void vst3q_u16(uint16_t *ptr, uint16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_u16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_u32",
        "intrinsic": "void vst3_u32(uint32_t *ptr, uint32x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_u32",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.2S - Vt3.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_u32",
        "intrinsic": "void vst3q_u32(uint32_t *ptr, uint32x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_u32",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.4S - Vt3.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_f16",
        "intrinsic": "void vst3_f16(float16_t *ptr, float16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_f16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_f16",
        "intrinsic": "void vst3q_f16(float16_t *ptr, float16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_f16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_f32",
        "intrinsic": "void vst3_f32(float32_t *ptr, float32x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_f32",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.2S - Vt3.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_f32",
        "intrinsic": "void vst3q_f32(float32_t *ptr, float32x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_f32",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.4S - Vt3.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_p8",
        "intrinsic": "void vst3_p8(poly8_t *ptr, poly8x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_p8",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8B - Vt3.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_p8",
        "intrinsic": "void vst3q_p8(poly8_t *ptr, poly8x16x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_p8",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.16B - Vt3.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_p16",
        "intrinsic": "void vst3_p16(poly16_t *ptr, poly16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_p16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_p16",
        "intrinsic": "void vst3q_p16(poly16_t *ptr, poly16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_p16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_s64",
        "intrinsic": "void vst3_s64(int64_t *ptr, int64x1x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_s64",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_u64",
        "intrinsic": "void vst3_u64(uint64_t *ptr, uint64x1x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_u64",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_p64",
        "intrinsic": "void vst3_p64(poly64_t *ptr, poly64x1x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_p64",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst3q_s64",
        "intrinsic": "void vst3q_s64(int64_t *ptr, int64x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_s64",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.2D - Vt3.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_u64",
        "intrinsic": "void vst3q_u64(uint64_t *ptr, uint64x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_u64",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.2D - Vt3.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_p64",
        "intrinsic": "void vst3q_p64(poly64_t *ptr, poly64x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_p64",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.2D - Vt3.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3_f64",
        "intrinsic": "void vst3_f64(float64_t *ptr, float64x1x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_f64",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_f64",
        "intrinsic": "void vst3q_f64(float64_t *ptr, float64x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_f64",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.2D - Vt3.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3_mf8",
        "intrinsic": "void vst3_mf8(mfloat8_t *ptr, mfloat8x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_mf8",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8B - Vt3.8B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_mf8",
        "intrinsic": "void vst3q_mf8(mfloat8_t *ptr, mfloat8x16x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_mf8",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.16B - Vt3.16B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_s8",
        "intrinsic": "void vst4_s8(int8_t *ptr, int8x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_s8",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8B - Vt4.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_s8",
        "intrinsic": "void vst4q_s8(int8_t *ptr, int8x16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_s8",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.16B - Vt4.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_s16",
        "intrinsic": "void vst4_s16(int16_t *ptr, int16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_s16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_s16",
        "intrinsic": "void vst4q_s16(int16_t *ptr, int16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_s16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_s32",
        "intrinsic": "void vst4_s32(int32_t *ptr, int32x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_s32",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.2S - Vt4.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_s32",
        "intrinsic": "void vst4q_s32(int32_t *ptr, int32x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_s32",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.4S - Vt4.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_u8",
        "intrinsic": "void vst4_u8(uint8_t *ptr, uint8x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_u8",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8B - Vt4.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_u8",
        "intrinsic": "void vst4q_u8(uint8_t *ptr, uint8x16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_u8",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.16B - Vt4.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_u16",
        "intrinsic": "void vst4_u16(uint16_t *ptr, uint16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_u16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_u16",
        "intrinsic": "void vst4q_u16(uint16_t *ptr, uint16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_u16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_u32",
        "intrinsic": "void vst4_u32(uint32_t *ptr, uint32x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_u32",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.2S - Vt4.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_u32",
        "intrinsic": "void vst4q_u32(uint32_t *ptr, uint32x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_u32",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.4S - Vt4.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_f16",
        "intrinsic": "void vst4_f16(float16_t *ptr, float16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_f16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_f16",
        "intrinsic": "void vst4q_f16(float16_t *ptr, float16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_f16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_f32",
        "intrinsic": "void vst4_f32(float32_t *ptr, float32x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_f32",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.2S - Vt4.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_f32",
        "intrinsic": "void vst4q_f32(float32_t *ptr, float32x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_f32",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.4S - Vt4.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_p8",
        "intrinsic": "void vst4_p8(poly8_t *ptr, poly8x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_p8",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8B - Vt4.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_p8",
        "intrinsic": "void vst4q_p8(poly8_t *ptr, poly8x16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_p8",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.16B - Vt4.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_p16",
        "intrinsic": "void vst4_p16(poly16_t *ptr, poly16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_p16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_p16",
        "intrinsic": "void vst4q_p16(poly16_t *ptr, poly16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_p16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_s64",
        "intrinsic": "void vst4_s64(int64_t *ptr, int64x1x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_s64",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_u64",
        "intrinsic": "void vst4_u64(uint64_t *ptr, uint64x1x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_u64",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_p64",
        "intrinsic": "void vst4_p64(poly64_t *ptr, poly64x1x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_p64",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst4q_s64",
        "intrinsic": "void vst4q_s64(int64_t *ptr, int64x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_s64",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.2D - Vt4.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_u64",
        "intrinsic": "void vst4q_u64(uint64_t *ptr, uint64x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_u64",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.2D - Vt4.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_p64",
        "intrinsic": "void vst4q_p64(poly64_t *ptr, poly64x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_p64",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.2D - Vt4.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_f64",
        "intrinsic": "void vst4_f64(float64_t *ptr, float64x1x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_f64",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_f64",
        "intrinsic": "void vst4q_f64(float64_t *ptr, float64x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_f64",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.2D - Vt4.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_mf8",
        "intrinsic": "void vst4_mf8(mfloat8_t *ptr, mfloat8x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_mf8",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8B - Vt4.8B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_mf8",
        "intrinsic": "void vst4q_mf8(mfloat8_t *ptr, mfloat8x16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_mf8",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.16B - Vt4.16B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_lane_s8",
        "intrinsic": "void vst2_lane_s8(int8_t *ptr, int8x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_s8",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_u8",
        "intrinsic": "void vst2_lane_u8(uint8_t *ptr, uint8x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_u8",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_p8",
        "intrinsic": "void vst2_lane_p8(poly8_t *ptr, poly8x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_p8",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_mf8",
        "intrinsic": "void vst2_lane_mf8(mfloat8_t *ptr, mfloat8x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_mf8",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3_lane_s8",
        "intrinsic": "void vst3_lane_s8(int8_t *ptr, int8x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_s8",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_u8",
        "intrinsic": "void vst3_lane_u8(uint8_t *ptr, uint8x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_u8",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_p8",
        "intrinsic": "void vst3_lane_p8(poly8_t *ptr, poly8x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_p8",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_mf8",
        "intrinsic": "void vst3_lane_mf8(mfloat8_t *ptr, mfloat8x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_mf8",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_lane_s8",
        "intrinsic": "void vst4_lane_s8(int8_t *ptr, int8x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_s8",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_u8",
        "intrinsic": "void vst4_lane_u8(uint8_t *ptr, uint8x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_u8",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_p8",
        "intrinsic": "void vst4_lane_p8(poly8_t *ptr, poly8x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_p8",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_mf8",
        "intrinsic": "void vst4_lane_mf8(mfloat8_t *ptr, mfloat8x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_mf8",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_lane_s16",
        "intrinsic": "void vst2_lane_s16(int16_t *ptr, int16x4x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_s16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_lane_s16",
        "intrinsic": "void vst2q_lane_s16(int16_t *ptr, int16x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_s16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_s32",
        "intrinsic": "void vst2_lane_s32(int32_t *ptr, int32x2x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_s32",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_lane_s32",
        "intrinsic": "void vst2q_lane_s32(int32_t *ptr, int32x4x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_s32",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_u16",
        "intrinsic": "void vst2_lane_u16(uint16_t *ptr, uint16x4x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_u16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_lane_u16",
        "intrinsic": "void vst2q_lane_u16(uint16_t *ptr, uint16x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_u16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_u32",
        "intrinsic": "void vst2_lane_u32(uint32_t *ptr, uint32x2x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_u32",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_lane_u32",
        "intrinsic": "void vst2q_lane_u32(uint32_t *ptr, uint32x4x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_u32",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_f16",
        "intrinsic": "void vst2_lane_f16(float16_t *ptr, float16x4x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_f16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_lane_f16",
        "intrinsic": "void vst2q_lane_f16(float16_t *ptr, float16x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_f16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_f32",
        "intrinsic": "void vst2_lane_f32(float32_t *ptr, float32x2x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_f32",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_lane_f32",
        "intrinsic": "void vst2q_lane_f32(float32_t *ptr, float32x4x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_f32",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST2 {Vt.s - Vt2.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2_lane_p16",
        "intrinsic": "void vst2_lane_p16(poly16_t *ptr, poly16x4x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_p16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_lane_p16",
        "intrinsic": "void vst2q_lane_p16(poly16_t *ptr, poly16x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_p16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst2q_lane_s8",
        "intrinsic": "void vst2q_lane_s8(int8_t *ptr, int8x16x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_s8",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_lane_u8",
        "intrinsic": "void vst2q_lane_u8(uint8_t *ptr, uint8x16x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_u8",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_lane_p8",
        "intrinsic": "void vst2q_lane_p8(poly8_t *ptr, poly8x16x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_p8",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_lane_mf8",
        "intrinsic": "void vst2q_lane_mf8(mfloat8_t *ptr, mfloat8x16x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_mf8",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST2 {Vt.b - Vt2.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_lane_s64",
        "intrinsic": "void vst2_lane_s64(int64_t *ptr, int64x1x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_s64",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_lane_s64",
        "intrinsic": "void vst2q_lane_s64(int64_t *ptr, int64x2x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_s64",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_lane_u64",
        "intrinsic": "void vst2_lane_u64(uint64_t *ptr, uint64x1x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_u64",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_lane_u64",
        "intrinsic": "void vst2q_lane_u64(uint64_t *ptr, uint64x2x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_u64",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_lane_p64",
        "intrinsic": "void vst2_lane_p64(poly64_t *ptr, poly64x1x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_p64",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_lane_p64",
        "intrinsic": "void vst2q_lane_p64(poly64_t *ptr, poly64x2x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_p64",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2_lane_f64",
        "intrinsic": "void vst2_lane_f64(float64_t *ptr, float64x1x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_f64",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst2q_lane_f64",
        "intrinsic": "void vst2q_lane_f64(float64_t *ptr, float64x2x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_f64",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST2 {Vt.d - Vt2.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3_lane_s16",
        "intrinsic": "void vst3_lane_s16(int16_t *ptr, int16x4x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_s16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_s16",
        "intrinsic": "void vst3q_lane_s16(int16_t *ptr, int16x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_s16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_s32",
        "intrinsic": "void vst3_lane_s32(int32_t *ptr, int32x2x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_s32",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_s32",
        "intrinsic": "void vst3q_lane_s32(int32_t *ptr, int32x4x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_s32",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_u16",
        "intrinsic": "void vst3_lane_u16(uint16_t *ptr, uint16x4x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_u16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_u16",
        "intrinsic": "void vst3q_lane_u16(uint16_t *ptr, uint16x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_u16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_u32",
        "intrinsic": "void vst3_lane_u32(uint32_t *ptr, uint32x2x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_u32",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_u32",
        "intrinsic": "void vst3q_lane_u32(uint32_t *ptr, uint32x4x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_u32",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_f16",
        "intrinsic": "void vst3_lane_f16(float16_t *ptr, float16x4x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_f16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_f16",
        "intrinsic": "void vst3q_lane_f16(float16_t *ptr, float16x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_f16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_f32",
        "intrinsic": "void vst3_lane_f32(float32_t *ptr, float32x2x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_f32",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_f32",
        "intrinsic": "void vst3q_lane_f32(float32_t *ptr, float32x4x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_f32",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST3 {Vt.s - Vt3.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_p16",
        "intrinsic": "void vst3_lane_p16(poly16_t *ptr, poly16x4x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_p16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_p16",
        "intrinsic": "void vst3q_lane_p16(poly16_t *ptr, poly16x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_p16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_s8",
        "intrinsic": "void vst3q_lane_s8(int8_t *ptr, int8x16x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_s8",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_u8",
        "intrinsic": "void vst3q_lane_u8(uint8_t *ptr, uint8x16x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_u8",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3q_lane_p8",
        "intrinsic": "void vst3q_lane_p8(poly8_t *ptr, poly8x16x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_p8",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst3_lane_s64",
        "intrinsic": "void vst3_lane_s64(int64_t *ptr, int64x1x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_s64",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_lane_s64",
        "intrinsic": "void vst3q_lane_s64(int64_t *ptr, int64x2x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_s64",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3_lane_u64",
        "intrinsic": "void vst3_lane_u64(uint64_t *ptr, uint64x1x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_u64",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_lane_u64",
        "intrinsic": "void vst3q_lane_u64(uint64_t *ptr, uint64x2x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_u64",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3_lane_p64",
        "intrinsic": "void vst3_lane_p64(poly64_t *ptr, poly64x1x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_p64",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_lane_p64",
        "intrinsic": "void vst3q_lane_p64(poly64_t *ptr, poly64x2x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_p64",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3_lane_f64",
        "intrinsic": "void vst3_lane_f64(float64_t *ptr, float64x1x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_f64",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_lane_f64",
        "intrinsic": "void vst3q_lane_f64(float64_t *ptr, float64x2x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_f64",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST3 {Vt.d - Vt3.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst3q_lane_mf8",
        "intrinsic": "void vst3q_lane_mf8(mfloat8_t *ptr, mfloat8x16x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_mf8",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST3 {Vt.b - Vt3.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_lane_s16",
        "intrinsic": "void vst4_lane_s16(int16_t *ptr, int16x4x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_s16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_lane_s16",
        "intrinsic": "void vst4q_lane_s16(int16_t *ptr, int16x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_s16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_s32",
        "intrinsic": "void vst4_lane_s32(int32_t *ptr, int32x2x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_s32",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_lane_s32",
        "intrinsic": "void vst4q_lane_s32(int32_t *ptr, int32x4x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_s32",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_u16",
        "intrinsic": "void vst4_lane_u16(uint16_t *ptr, uint16x4x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_u16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_lane_u16",
        "intrinsic": "void vst4q_lane_u16(uint16_t *ptr, uint16x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_u16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_u32",
        "intrinsic": "void vst4_lane_u32(uint32_t *ptr, uint32x2x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_u32",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_lane_u32",
        "intrinsic": "void vst4q_lane_u32(uint32_t *ptr, uint32x4x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_u32",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_f16",
        "intrinsic": "void vst4_lane_f16(float16_t *ptr, float16x4x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_f16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_lane_f16",
        "intrinsic": "void vst4q_lane_f16(float16_t *ptr, float16x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_f16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_f32",
        "intrinsic": "void vst4_lane_f32(float32_t *ptr, float32x2x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_f32",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_lane_f32",
        "intrinsic": "void vst4q_lane_f32(float32_t *ptr, float32x4x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_f32",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST4 {Vt.s - Vt4.s}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4_lane_p16",
        "intrinsic": "void vst4_lane_p16(poly16_t *ptr, poly16x4x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_p16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_lane_p16",
        "intrinsic": "void vst4q_lane_p16(poly16_t *ptr, poly16x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_p16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst4q_lane_s8",
        "intrinsic": "void vst4q_lane_s8(int8_t *ptr, int8x16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_s8",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_lane_u8",
        "intrinsic": "void vst4q_lane_u8(uint8_t *ptr, uint8x16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_u8",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_lane_p8",
        "intrinsic": "void vst4q_lane_p8(poly8_t *ptr, poly8x16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_p8",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_lane_s64",
        "intrinsic": "void vst4_lane_s64(int64_t *ptr, int64x1x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_s64",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_lane_s64",
        "intrinsic": "void vst4q_lane_s64(int64_t *ptr, int64x2x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_s64",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_lane_u64",
        "intrinsic": "void vst4_lane_u64(uint64_t *ptr, uint64x1x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_u64",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_lane_u64",
        "intrinsic": "void vst4q_lane_u64(uint64_t *ptr, uint64x2x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_u64",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_lane_p64",
        "intrinsic": "void vst4_lane_p64(poly64_t *ptr, poly64x1x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_p64",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_lane_p64",
        "intrinsic": "void vst4q_lane_p64(poly64_t *ptr, poly64x2x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_p64",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4_lane_f64",
        "intrinsic": "void vst4_lane_f64(float64_t *ptr, float64x1x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_f64",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn; 0 <= lane <= 0",
        "aarch64_instruction": "ST4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_lane_f64",
        "intrinsic": "void vst4q_lane_f64(float64_t *ptr, float64x2x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_f64",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn; 0 <= lane <= 1",
        "aarch64_instruction": "ST4 {Vt.d - Vt4.d}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst4q_lane_mf8",
        "intrinsic": "void vst4q_lane_mf8(mfloat8_t *ptr, mfloat8x16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_mf8",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn; 0 <= lane <= 15",
        "aarch64_instruction": "ST4 {Vt.b - Vt4.b}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_s8_x2",
        "intrinsic": "void vst1_s8_x2(int8_t *ptr, int8x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s8_x2",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt2.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s8_x2",
        "intrinsic": "void vst1q_s8_x2(int8_t *ptr, int8x16x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s8_x2",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt2.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s16_x2",
        "intrinsic": "void vst1_s16_x2(int16_t *ptr, int16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s16_x2",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s16_x2",
        "intrinsic": "void vst1q_s16_x2(int16_t *ptr, int16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s16_x2",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s32_x2",
        "intrinsic": "void vst1_s32_x2(int32_t *ptr, int32x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s32_x2",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt2.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s32_x2",
        "intrinsic": "void vst1q_s32_x2(int32_t *ptr, int32x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s32_x2",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt2.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u8_x2",
        "intrinsic": "void vst1_u8_x2(uint8_t *ptr, uint8x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u8_x2",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt2.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u8_x2",
        "intrinsic": "void vst1q_u8_x2(uint8_t *ptr, uint8x16x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u8_x2",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt2.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u16_x2",
        "intrinsic": "void vst1_u16_x2(uint16_t *ptr, uint16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u16_x2",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u16_x2",
        "intrinsic": "void vst1q_u16_x2(uint16_t *ptr, uint16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u16_x2",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u32_x2",
        "intrinsic": "void vst1_u32_x2(uint32_t *ptr, uint32x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u32_x2",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt2.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u32_x2",
        "intrinsic": "void vst1q_u32_x2(uint32_t *ptr, uint32x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u32_x2",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt2.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f16_x2",
        "intrinsic": "void vst1_f16_x2(float16_t *ptr, float16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f16_x2",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_f16_x2",
        "intrinsic": "void vst1q_f16_x2(float16_t *ptr, float16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f16_x2",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f32_x2",
        "intrinsic": "void vst1_f32_x2(float32_t *ptr, float32x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f32_x2",
        "argument_preparation": "val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt2.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_f32_x2",
        "intrinsic": "void vst1q_f32_x2(float32_t *ptr, float32x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f32_x2",
        "argument_preparation": "val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt2.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p8_x2",
        "intrinsic": "void vst1_p8_x2(poly8_t *ptr, poly8x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p8_x2",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt2.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p8_x2",
        "intrinsic": "void vst1q_p8_x2(poly8_t *ptr, poly8x16x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p8_x2",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt2.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p16_x2",
        "intrinsic": "void vst1_p16_x2(poly16_t *ptr, poly16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p16_x2",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p16_x2",
        "intrinsic": "void vst1q_p16_x2(poly16_t *ptr, poly16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p16_x2",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s64_x2",
        "intrinsic": "void vst1_s64_x2(int64_t *ptr, int64x1x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s64_x2",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u64_x2",
        "intrinsic": "void vst1_u64_x2(uint64_t *ptr, uint64x1x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u64_x2",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p64_x2",
        "intrinsic": "void vst1_p64_x2(poly64_t *ptr, poly64x1x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p64_x2",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_s64_x2",
        "intrinsic": "void vst1q_s64_x2(int64_t *ptr, int64x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s64_x2",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt2.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u64_x2",
        "intrinsic": "void vst1q_u64_x2(uint64_t *ptr, uint64x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u64_x2",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt2.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p64_x2",
        "intrinsic": "void vst1q_p64_x2(poly64_t *ptr, poly64x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p64_x2",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt2.2D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1_f64_x2",
        "intrinsic": "void vst1_f64_x2(float64_t *ptr, float64x1x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f64_x2",
        "argument_preparation": "val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt2.1D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_f64_x2",
        "intrinsic": "void vst1q_f64_x2(float64_t *ptr, float64x2x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f64_x2",
        "argument_preparation": "val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt2.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_mf8_x2",
        "intrinsic": "void vst1_mf8_x2(mfloat8_t *ptr, mfloat8x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_mf8_x2",
        "argument_preparation": "val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt2.8B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_mf8_x2",
        "intrinsic": "void vst1q_mf8_x2(mfloat8_t *ptr, mfloat8x16x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_mf8_x2",
        "argument_preparation": "val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt2.16B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_s8_x3",
        "intrinsic": "void vst1_s8_x3(int8_t *ptr, int8x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s8_x3",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt3.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s8_x3",
        "intrinsic": "void vst1q_s8_x3(int8_t *ptr, int8x16x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s8_x3",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt3.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s16_x3",
        "intrinsic": "void vst1_s16_x3(int16_t *ptr, int16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s16_x3",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s16_x3",
        "intrinsic": "void vst1q_s16_x3(int16_t *ptr, int16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s16_x3",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s32_x3",
        "intrinsic": "void vst1_s32_x3(int32_t *ptr, int32x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s32_x3",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt3.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s32_x3",
        "intrinsic": "void vst1q_s32_x3(int32_t *ptr, int32x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s32_x3",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt3.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u8_x3",
        "intrinsic": "void vst1_u8_x3(uint8_t *ptr, uint8x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u8_x3",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt3.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u8_x3",
        "intrinsic": "void vst1q_u8_x3(uint8_t *ptr, uint8x16x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u8_x3",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt3.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u16_x3",
        "intrinsic": "void vst1_u16_x3(uint16_t *ptr, uint16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u16_x3",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u16_x3",
        "intrinsic": "void vst1q_u16_x3(uint16_t *ptr, uint16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u16_x3",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u32_x3",
        "intrinsic": "void vst1_u32_x3(uint32_t *ptr, uint32x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u32_x3",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt3.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u32_x3",
        "intrinsic": "void vst1q_u32_x3(uint32_t *ptr, uint32x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u32_x3",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt3.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f16_x3",
        "intrinsic": "void vst1_f16_x3(float16_t *ptr, float16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f16_x3",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_f16_x3",
        "intrinsic": "void vst1q_f16_x3(float16_t *ptr, float16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f16_x3",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f32_x3",
        "intrinsic": "void vst1_f32_x3(float32_t *ptr, float32x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f32_x3",
        "argument_preparation": "val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt3.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_f32_x3",
        "intrinsic": "void vst1q_f32_x3(float32_t *ptr, float32x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f32_x3",
        "argument_preparation": "val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt3.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p8_x3",
        "intrinsic": "void vst1_p8_x3(poly8_t *ptr, poly8x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p8_x3",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt3.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p8_x3",
        "intrinsic": "void vst1q_p8_x3(poly8_t *ptr, poly8x16x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p8_x3",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt3.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p16_x3",
        "intrinsic": "void vst1_p16_x3(poly16_t *ptr, poly16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p16_x3",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p16_x3",
        "intrinsic": "void vst1q_p16_x3(poly16_t *ptr, poly16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p16_x3",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s64_x3",
        "intrinsic": "void vst1_s64_x3(int64_t *ptr, int64x1x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s64_x3",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u64_x3",
        "intrinsic": "void vst1_u64_x3(uint64_t *ptr, uint64x1x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u64_x3",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p64_x3",
        "intrinsic": "void vst1_p64_x3(poly64_t *ptr, poly64x1x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p64_x3",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_s64_x3",
        "intrinsic": "void vst1q_s64_x3(int64_t *ptr, int64x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s64_x3",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt3.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u64_x3",
        "intrinsic": "void vst1q_u64_x3(uint64_t *ptr, uint64x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u64_x3",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt3.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p64_x3",
        "intrinsic": "void vst1q_p64_x3(poly64_t *ptr, poly64x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p64_x3",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt3.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f64_x3",
        "intrinsic": "void vst1_f64_x3(float64_t *ptr, float64x1x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f64_x3",
        "argument_preparation": "val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt3.1D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_f64_x3",
        "intrinsic": "void vst1q_f64_x3(float64_t *ptr, float64x2x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f64_x3",
        "argument_preparation": "val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt3.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_mf8_x3",
        "intrinsic": "void vst1_mf8_x3(mfloat8_t *ptr, mfloat8x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_mf8_x3",
        "argument_preparation": "val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt3.8B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_mf8_x3",
        "intrinsic": "void vst1q_mf8_x3(mfloat8_t *ptr, mfloat8x16x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_mf8_x3",
        "argument_preparation": "val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt3.16B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_s8_x4",
        "intrinsic": "void vst1_s8_x4(int8_t *ptr, int8x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s8_x4",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt4.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s8_x4",
        "intrinsic": "void vst1q_s8_x4(int8_t *ptr, int8x16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s8_x4",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt4.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s16_x4",
        "intrinsic": "void vst1_s16_x4(int16_t *ptr, int16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s16_x4",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s16_x4",
        "intrinsic": "void vst1q_s16_x4(int16_t *ptr, int16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s16_x4",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s32_x4",
        "intrinsic": "void vst1_s32_x4(int32_t *ptr, int32x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s32_x4",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt4.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_s32_x4",
        "intrinsic": "void vst1q_s32_x4(int32_t *ptr, int32x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s32_x4",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt4.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u8_x4",
        "intrinsic": "void vst1_u8_x4(uint8_t *ptr, uint8x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u8_x4",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt4.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u8_x4",
        "intrinsic": "void vst1q_u8_x4(uint8_t *ptr, uint8x16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u8_x4",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt4.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u16_x4",
        "intrinsic": "void vst1_u16_x4(uint16_t *ptr, uint16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u16_x4",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u16_x4",
        "intrinsic": "void vst1q_u16_x4(uint16_t *ptr, uint16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u16_x4",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u32_x4",
        "intrinsic": "void vst1_u32_x4(uint32_t *ptr, uint32x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u32_x4",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt4.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u32_x4",
        "intrinsic": "void vst1q_u32_x4(uint32_t *ptr, uint32x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u32_x4",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt4.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f16_x4",
        "intrinsic": "void vst1_f16_x4(float16_t *ptr, float16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f16_x4",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_f16_x4",
        "intrinsic": "void vst1q_f16_x4(float16_t *ptr, float16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f16_x4",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_f32_x4",
        "intrinsic": "void vst1_f32_x4(float32_t *ptr, float32x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f32_x4",
        "argument_preparation": "val.val[3] -> Vt4.2S; val.val[2] -> Vt3.2S; val.val[1] -> Vt2.2S; val.val[0] -> Vt.2S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2S - Vt4.2S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_f32_x4",
        "intrinsic": "void vst1q_f32_x4(float32_t *ptr, float32x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f32_x4",
        "argument_preparation": "val.val[3] -> Vt4.4S; val.val[2] -> Vt3.4S; val.val[1] -> Vt2.4S; val.val[0] -> Vt.4S; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4S - Vt4.4S},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p8_x4",
        "intrinsic": "void vst1_p8_x4(poly8_t *ptr, poly8x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p8_x4",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt4.8B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p8_x4",
        "intrinsic": "void vst1q_p8_x4(poly8_t *ptr, poly8x16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p8_x4",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt4.16B},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p16_x4",
        "intrinsic": "void vst1_p16_x4(poly16_t *ptr, poly16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p16_x4",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p16_x4",
        "intrinsic": "void vst1q_p16_x4(poly16_t *ptr, poly16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p16_x4",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_s64_x4",
        "intrinsic": "void vst1_s64_x4(int64_t *ptr, int64x1x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_s64_x4",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_u64_x4",
        "intrinsic": "void vst1_u64_x4(uint64_t *ptr, uint64x1x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_u64_x4",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1_p64_x4",
        "intrinsic": "void vst1_p64_x4(poly64_t *ptr, poly64x1x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_p64_x4",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_s64_x4",
        "intrinsic": "void vst1q_s64_x4(int64_t *ptr, int64x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_s64_x4",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt4.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_u64_x4",
        "intrinsic": "void vst1q_u64_x4(uint64_t *ptr, uint64x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_u64_x4",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt4.2D},[Xn]",
        "result": "",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vst1q_p64_x4",
        "intrinsic": "void vst1q_p64_x4(poly64_t *ptr, poly64x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_p64_x4",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt4.2D},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1_f64_x4",
        "intrinsic": "void vst1_f64_x4(float64_t *ptr, float64x1x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_f64_x4",
        "argument_preparation": "val.val[3] -> Vt4.1D; val.val[2] -> Vt3.1D; val.val[1] -> Vt2.1D; val.val[0] -> Vt.1D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.1D - Vt4.1D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_f64_x4",
        "intrinsic": "void vst1q_f64_x4(float64_t *ptr, float64x2x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_f64_x4",
        "argument_preparation": "val.val[3] -> Vt4.2D; val.val[2] -> Vt3.2D; val.val[1] -> Vt2.2D; val.val[0] -> Vt.2D; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.2D - Vt4.2D},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1_mf8_x4",
        "intrinsic": "void vst1_mf8_x4(int8_t *ptr, int8x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_mf8_x4",
        "argument_preparation": "val.val[3] -> Vt4.8B; val.val[2] -> Vt3.8B; val.val[1] -> Vt2.8B; val.val[0] -> Vt.8B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8B - Vt4.8B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vst1q_mf8_x4",
        "intrinsic": "void vst1q_mf8_x4(int8_t *ptr, int8x16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_mf8_x4",
        "argument_preparation": "val.val[3] -> Vt4.16B; val.val[2] -> Vt3.16B; val.val[1] -> Vt2.16B; val.val[0] -> Vt.16B; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.16B - Vt4.16B},[Xn]",
        "result": "",
        "supported_architectures": "A64"
      },
      {
        "name": "vstrq_p128",
        "intrinsic": "void vstrq_p128(poly128_t *ptr, poly128_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vstrq_p128",
        "argument_preparation": "val -> Qt; ptr -> Xn",
        "aarch64_instruction": "STR Qt,[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      }
    ],
    "Table lookup": [
      {
        "name": "vtbl1_s8",
        "intrinsic": "int8x8_t vtbl1_s8(int8x8_t a, int8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl1_s8",
        "argument_preparation": "Zeros(64):a -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl1_u8",
        "intrinsic": "uint8x8_t vtbl1_u8(uint8x8_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl1_u8",
        "argument_preparation": "Zeros(64):a -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl1_p8",
        "intrinsic": "poly8x8_t vtbl1_p8(poly8x8_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl1_p8",
        "argument_preparation": "Zeros(64):a -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl1_mf8",
        "intrinsic": "mfloat8x8_t vtbl1_mf8(mfloat8x8_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl1_mf8",
        "argument_preparation": "Zeros(64):a -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtbx1_s8",
        "intrinsic": "int8x8_t vtbx1_s8(int8x8_t a, int8x8_t b, int8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx1_s8",
        "argument_preparation": "Zeros(64):b -> Vn.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "MOVI Vtmp.8B,#8; CMHS Vtmp.8B,Vm.8B,Vtmp.8B; TBL Vtmp1.8B,{Vn.16B},Vm.8B; BIF Vd.8B,Vtmp1.8B,Vtmp.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx1_u8",
        "intrinsic": "uint8x8_t vtbx1_u8(uint8x8_t a, uint8x8_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx1_u8",
        "argument_preparation": "Zeros(64):b -> Vn.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "MOVI Vtmp.8B,#8; CMHS Vtmp.8B,Vm.8B,Vtmp.8B; TBL Vtmp1.8B,{Vn.16B},Vm.8B; BIF Vd.8B,Vtmp1.8B,Vtmp.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx1_p8",
        "intrinsic": "poly8x8_t vtbx1_p8(poly8x8_t a, poly8x8_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx1_p8",
        "argument_preparation": "Zeros(64):b -> Vn.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "MOVI Vtmp.8B,#8; CMHS Vtmp.8B,Vm.8B,Vtmp.8B; TBL Vtmp1.8B,{Vn.16B},Vm.8B; BIF Vd.8B,Vtmp1.8B, Vtmp.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx1_mf8",
        "intrinsic": "mfloat8x8_t vtbx1_mf8(mfloat8x8_t a, mfloat8x8_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx1_mf8",
        "argument_preparation": "Zeros(64):b -> Vn.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "MOVI Vtmp.8B,#8; CMHS Vtmp.8B,Vm.8B,Vtmp.8B; TBL Vtmp1.8B,{Vn.16B},Vm.8B; BIF Vd.8B,Vtmp1.8B, Vtmp.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtbl2_s8",
        "intrinsic": "int8x8_t vtbl2_s8(int8x8x2_t a, int8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl2_s8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl2_u8",
        "intrinsic": "uint8x8_t vtbl2_u8(uint8x8x2_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl2_u8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl2_p8",
        "intrinsic": "poly8x8_t vtbl2_p8(poly8x8x2_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl2_p8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl2_mf8",
        "intrinsic": "mfloat8x8_t vtbl2_mf8(mfloat8x8x2_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl2_mf8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtbl3_s8",
        "intrinsic": "int8x8_t vtbl3_s8(int8x8x3_t a, int8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl3_s8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; Zeros(64):a.val[2] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl3_u8",
        "intrinsic": "uint8x8_t vtbl3_u8(uint8x8x3_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl3_u8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; Zeros(64):a.val[2] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl3_p8",
        "intrinsic": "poly8x8_t vtbl3_p8(poly8x8x3_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl3_p8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; Zeros(64):a.val[2] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl3_mf8",
        "intrinsic": "mfloat8x8_t vtbl3_mf8(mfloat8x8x3_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl3_mf8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; Zeros(64):a.val[2] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtbl4_s8",
        "intrinsic": "int8x8_t vtbl4_s8(int8x8x4_t a, int8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl4_s8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; a.val[3]:a.val[2] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl4_u8",
        "intrinsic": "uint8x8_t vtbl4_u8(uint8x8x4_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl4_u8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; a.val[3]:a.val[2] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl4_p8",
        "intrinsic": "poly8x8_t vtbl4_p8(poly8x8x4_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl4_p8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; a.val[3]:a.val[2] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbl4_mf8",
        "intrinsic": "mfloat8x8_t vtbl4_mf8(mfloat8x8x4_t a, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbl4_mf8",
        "argument_preparation": "a.val[1]:a.val[0] -> Vn.16B; a.val[3]:a.val[2] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl1_s8",
        "intrinsic": "int8x8_t vqtbl1_s8(int8x16_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl1_s8",
        "argument_preparation": "t -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl1q_s8",
        "intrinsic": "int8x16_t vqtbl1q_s8(int8x16_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl1q_s8",
        "argument_preparation": "t -> Vn.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl1_u8",
        "intrinsic": "uint8x8_t vqtbl1_u8(uint8x16_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl1_u8",
        "argument_preparation": "t -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl1q_u8",
        "intrinsic": "uint8x16_t vqtbl1q_u8(uint8x16_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl1q_u8",
        "argument_preparation": "t -> Vn.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl1_p8",
        "intrinsic": "poly8x8_t vqtbl1_p8(poly8x16_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl1_p8",
        "argument_preparation": "t -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl1q_p8",
        "intrinsic": "poly8x16_t vqtbl1q_p8(poly8x16_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl1q_p8",
        "argument_preparation": "t -> Vn.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl1_mf8",
        "intrinsic": "mfloat8x8_t vqtbl1_mf8(mfloat8x16_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl1_mf8",
        "argument_preparation": "t -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl1q_mf8",
        "intrinsic": "mfloat8x16_t vqtbl1q_mf8(mfloat8x16_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl1q_mf8",
        "argument_preparation": "t -> Vn.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl2_s8",
        "intrinsic": "int8x8_t vqtbl2_s8(int8x16x2_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl2_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl2q_s8",
        "intrinsic": "int8x16_t vqtbl2q_s8(int8x16x2_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl2q_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+1.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl2_u8",
        "intrinsic": "uint8x8_t vqtbl2_u8(uint8x16x2_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl2_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl2q_u8",
        "intrinsic": "uint8x16_t vqtbl2q_u8(uint8x16x2_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl2q_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+1.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl2_p8",
        "intrinsic": "poly8x8_t vqtbl2_p8(poly8x16x2_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl2_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl2q_p8",
        "intrinsic": "poly8x16_t vqtbl2q_p8(poly8x16x2_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl2q_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+1.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl2_mf8",
        "intrinsic": "mfloat8x8_t vqtbl2_mf8(mfloat8x16x2_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl2_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl2q_mf8",
        "intrinsic": "mfloat8x16_t vqtbl2q_mf8(mfloat8x16x2_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl2q_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+1.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl3_s8",
        "intrinsic": "int8x8_t vqtbl3_s8(int8x16x3_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl3_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+2.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl3q_s8",
        "intrinsic": "int8x16_t vqtbl3q_s8(int8x16x3_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl3q_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+2.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl3_u8",
        "intrinsic": "uint8x8_t vqtbl3_u8(uint8x16x3_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl3_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+2.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl3q_u8",
        "intrinsic": "uint8x16_t vqtbl3q_u8(uint8x16x3_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl3q_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+2.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl3_p8",
        "intrinsic": "poly8x8_t vqtbl3_p8(poly8x16x3_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl3_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+2.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl3q_p8",
        "intrinsic": "poly8x16_t vqtbl3q_p8(poly8x16x3_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl3q_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+2.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl3_mf8",
        "intrinsic": "mfloat8x8_t vqtbl3_mf8(mfloat8x16x3_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl3_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+2.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl3q_mf8",
        "intrinsic": "mfloat8x16_t vqtbl3q_mf8(mfloat8x16x3_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl3q_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+2.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl4_s8",
        "intrinsic": "int8x8_t vqtbl4_s8(int8x16x4_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl4_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+3.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl4q_s8",
        "intrinsic": "int8x16_t vqtbl4q_s8(int8x16x4_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl4q_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+3.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl4_u8",
        "intrinsic": "uint8x8_t vqtbl4_u8(uint8x16x4_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl4_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+3.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl4q_u8",
        "intrinsic": "uint8x16_t vqtbl4q_u8(uint8x16x4_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl4q_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+3.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl4_p8",
        "intrinsic": "poly8x8_t vqtbl4_p8(poly8x16x4_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl4_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+3.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl4q_p8",
        "intrinsic": "poly8x16_t vqtbl4q_p8(poly8x16x4_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl4q_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+3.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl4_mf8",
        "intrinsic": "mfloat8x8_t vqtbl4_mf8(mfloat8x16x4_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl4_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBL Vd.8B,{Vn.16B - Vn+3.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbl4q_mf8",
        "intrinsic": "mfloat8x16_t vqtbl4q_mf8(mfloat8x16x4_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbl4q_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBL Vd.16B,{Vn.16B - Vn+3.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtbx2_s8",
        "intrinsic": "int8x8_t vtbx2_s8(int8x8_t a, int8x8x2_t b, int8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx2_s8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx2_u8",
        "intrinsic": "uint8x8_t vtbx2_u8(uint8x8_t a, uint8x8x2_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx2_u8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx2_p8",
        "intrinsic": "poly8x8_t vtbx2_p8(poly8x8_t a, poly8x8x2_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx2_p8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx2_mf8",
        "intrinsic": "mfloat8x8_t vtbx2_mf8(mfloat8x8_t a, mfloat8x8x2_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx2_mf8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtbx3_s8",
        "intrinsic": "int8x8_t vtbx3_s8(int8x8_t a, int8x8x3_t b, int8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx3_s8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; Zeros(64):b.val[2] -> Vn+1.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "MOVI Vtmp.8B,#24; CMHS Vtmp.8B,Vm.8B,Vtmp.8B; TBL Vtmp1.8B,{Vn.16B,Vn+1.16B},Vm.8; BIF Vd.8B,Vtmp1.8B,Vtmp.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx3_u8",
        "intrinsic": "uint8x8_t vtbx3_u8(uint8x8_t a, uint8x8x3_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx3_u8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; Zeros(64):b.val[2] -> Vn+1.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "MOVI Vtmp.8B,#24; CMHS Vtmp.8B,Vm.8B,Vtmp.8B; TBL Vtmp1.8B,{Vn.16B,Vn+1.16B},Vm.8B; BIF Vd.8B,Vtmp1.8B,Vtmp.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx3_p8",
        "intrinsic": "poly8x8_t vtbx3_p8(poly8x8_t a, poly8x8x3_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx3_p8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; Zeros(64):b.val[2] -> Vn+1.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "MOVI Vtmp.8B,#24; CMHS Vtmp.8B,Vm.8B,Vtmp.8B; TBL Vtmp1.8B,{Vn.16B,Vn+1.16B},Vm.8B; BIF Vd.8B,Vtmp1.8B,Vtmp.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx3_mf8",
        "intrinsic": "mfloat8x8_t vtbx3_mf8(mfloat8x8_t a, mfloat8x8x3_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx3_mf8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; Zeros(64):b.val[2] -> Vn+1.16B; a -> Vd.8B; idx -> Vm.8B",
        "aarch64_instruction": "MOVI Vtmp.8B,#24; CMHS Vtmp.8B,Vm.8B,Vtmp.8B; TBL Vtmp1.8B,{Vn.16B,Vn+1.16B},Vm.8B; BIF Vd.8B,Vtmp1.8B,Vtmp.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtbx4_s8",
        "intrinsic": "int8x8_t vtbx4_s8(int8x8_t a, int8x8x4_t b, int8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx4_s8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; b.val[3]:b.val[2] -> Vn+1.16B; a -> Vd.8B; c-> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx4_u8",
        "intrinsic": "uint8x8_t vtbx4_u8(uint8x8_t a, uint8x8x4_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx4_u8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; b.val[3]:b.val[2] -> Vn+1.16B; a -> Vd.8B; c-> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx4_p8",
        "intrinsic": "poly8x8_t vtbx4_p8(poly8x8_t a, poly8x8x4_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx4_p8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; b.val[3]:b.val[2] -> Vn+1.16B; a -> Vd.8B; c-> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtbx4_mf8",
        "intrinsic": "mfloat8x8_t vtbx4_mf8(mfloat8x8_t a, mfloat8x8x4_t b, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtbx4_mf8",
        "argument_preparation": "b.val[1]:b.val[0] -> Vn.16B; b.val[3]:b.val[2] -> Vn+1.16B; a -> Vd.8B; c-> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B,Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx1_s8",
        "intrinsic": "int8x8_t vqtbx1_s8(int8x8_t a, int8x16_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx1_s8",
        "argument_preparation": "a -> Vd.8B; t -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx1q_s8",
        "intrinsic": "int8x16_t vqtbx1q_s8(int8x16_t a, int8x16_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx1q_s8",
        "argument_preparation": "a -> Vd.16B; t -> Vn.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx1_u8",
        "intrinsic": "uint8x8_t vqtbx1_u8(uint8x8_t a, uint8x16_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx1_u8",
        "argument_preparation": "a -> Vd.8B; t -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx1q_u8",
        "intrinsic": "uint8x16_t vqtbx1q_u8(uint8x16_t a, uint8x16_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx1q_u8",
        "argument_preparation": "a -> Vd.16B; t -> Vn.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx1_p8",
        "intrinsic": "poly8x8_t vqtbx1_p8(poly8x8_t a, poly8x16_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx1_p8",
        "argument_preparation": "a -> Vd.8B; t -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx1q_p8",
        "intrinsic": "poly8x16_t vqtbx1q_p8(poly8x16_t a, poly8x16_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx1q_p8",
        "argument_preparation": "a -> Vd.16B; t -> Vn.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx1_mf8",
        "intrinsic": "mfloat8x8_t vqtbx1_mf8(mfloat8x8_t a, mfloat8x16_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx1_mf8",
        "argument_preparation": "a -> Vd.8B; t -> Vn.16B; idx -> Vm.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx1q_mf8",
        "intrinsic": "mfloat8x16_t vqtbx1q_mf8(mfloat8x16_t a, mfloat8x16_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx1q_mf8",
        "argument_preparation": "a -> Vd.16B; t -> Vn.16B; idx -> Vm.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx2_s8",
        "intrinsic": "int8x8_t vqtbx2_s8(int8x8_t a, int8x16x2_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx2_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx2q_s8",
        "intrinsic": "int8x16_t vqtbx2q_s8(int8x16_t a, int8x16x2_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx2q_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+1.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx2_u8",
        "intrinsic": "uint8x8_t vqtbx2_u8(uint8x8_t a, uint8x16x2_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx2_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx2q_u8",
        "intrinsic": "uint8x16_t vqtbx2q_u8(uint8x16_t a, uint8x16x2_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx2q_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+1.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx2_p8",
        "intrinsic": "poly8x8_t vqtbx2_p8(poly8x8_t a, poly8x16x2_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx2_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx2q_p8",
        "intrinsic": "poly8x16_t vqtbx2q_p8(poly8x16_t a, poly8x16x2_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx2q_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+1.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx2_mf8",
        "intrinsic": "mfloat8x8_t vqtbx2_mf8(mfloat8x8_t a, mfloat8x16x2_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx2_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+1.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx2q_mf8",
        "intrinsic": "mfloat8x16_t vqtbx2q_mf8(mfloat8x16_t a, mfloat8x16x2_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx2q_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+1.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx3_s8",
        "intrinsic": "int8x8_t vqtbx3_s8(int8x8_t a, int8x16x3_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx3_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+2.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx3q_s8",
        "intrinsic": "int8x16_t vqtbx3q_s8(int8x16_t a, int8x16x3_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx3q_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+2.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx3_u8",
        "intrinsic": "uint8x8_t vqtbx3_u8(uint8x8_t a, uint8x16x3_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx3_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+2.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx3q_u8",
        "intrinsic": "uint8x16_t vqtbx3q_u8(uint8x16_t a, uint8x16x3_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx3q_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+2.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx3_p8",
        "intrinsic": "poly8x8_t vqtbx3_p8(poly8x8_t a, poly8x16x3_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx3_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+2.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx3q_p8",
        "intrinsic": "poly8x16_t vqtbx3q_p8(poly8x16_t a, poly8x16x3_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx3q_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+2.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx3_mf8",
        "intrinsic": "mfloat8x8_t vqtbx3_mf8(mfloat8x8_t a, mfloat8x16x3_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx3_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+2.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx3q_mf8",
        "intrinsic": "mfloat8x16_t vqtbx3q_mf8(mfloat8x16_t a, mfloat8x16x3_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx3q_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+2.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx4_s8",
        "intrinsic": "int8x8_t vqtbx4_s8(int8x8_t a, int8x16x4_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx4_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+3.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx4q_s8",
        "intrinsic": "int8x16_t vqtbx4q_s8(int8x16_t a, int8x16x4_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx4q_s8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+3.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx4_u8",
        "intrinsic": "uint8x8_t vqtbx4_u8(uint8x8_t a, uint8x16x4_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx4_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+3.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx4q_u8",
        "intrinsic": "uint8x16_t vqtbx4q_u8(uint8x16_t a, uint8x16x4_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx4q_u8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+3.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx4_p8",
        "intrinsic": "poly8x8_t vqtbx4_p8(poly8x8_t a, poly8x16x4_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx4_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+3.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx4q_p8",
        "intrinsic": "poly8x16_t vqtbx4q_p8(poly8x16_t a, poly8x16x4_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx4q_p8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+3.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx4_mf8",
        "intrinsic": "mfloat8x8_t vqtbx4_mf8(mfloat8x8_t a, mfloat8x16x4_t t, uint8x8_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx4_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.8B; a -> Vd.8B",
        "aarch64_instruction": "TBX Vd.8B,{Vn.16B - Vn+3.16B},Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqtbx4q_mf8",
        "intrinsic": "mfloat8x16_t vqtbx4q_mf8(mfloat8x16_t a, mfloat8x16x4_t t, uint8x16_t idx)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqtbx4q_mf8",
        "argument_preparation": "t.val[0] -> Vn.16B; t.val[1] -> Vn+1.16B; t.val[2] -> Vn+2.16B; t.val[3] -> Vn+3.16B; idx -> Vm.16B; a -> Vd.16B",
        "aarch64_instruction": "TBX Vd.16B,{Vn.16B - Vn+3.16B},Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_u8",
        "intrinsic": "uint8x16_t vluti2_lane_u8(uint8x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_u8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_u8",
        "intrinsic": "uint8x16_t vluti2_laneq_u8(uint8x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_u8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_u8",
        "intrinsic": "uint8x16_t vluti2q_lane_u8(uint8x16_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_u8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_u8",
        "intrinsic": "uint8x16_t vluti2q_laneq_u8(uint8x16_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_u8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_s8",
        "intrinsic": "int8x16_t vluti2_lane_s8(int8x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_s8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_s8",
        "intrinsic": "int8x16_t vluti2_laneq_s8(int8x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_s8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_s8",
        "intrinsic": "int8x16_t vluti2q_lane_s8(int8x16_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_s8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_s8",
        "intrinsic": "int8x16_t vluti2q_laneq_s8(int8x16_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_s8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_p8",
        "intrinsic": "poly8x16_t vluti2_lane_p8(poly8x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_p8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_p8",
        "intrinsic": "poly8x16_t vluti2_laneq_p8(poly8x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_p8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_p8",
        "intrinsic": "poly8x16_t vluti2q_lane_p8(poly8x16_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_p8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_p8",
        "intrinsic": "poly8x16_t vluti2q_laneq_p8(poly8x16_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_p8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_mf8",
        "intrinsic": "mfloat8x16_t vluti2_lane_mf8(mfloat8x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_mf8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_mf8",
        "intrinsic": "mfloat8x16_t vluti2_laneq_mf8(mfloat8x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_mf8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_mf8",
        "intrinsic": "mfloat8x16_t vluti2q_lane_mf8(mfloat8x16_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_mf8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_mf8",
        "intrinsic": "mfloat8x16_t vluti2q_laneq_mf8(mfloat8x16_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_mf8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_u16",
        "intrinsic": "uint16x8_t vluti2_lane_u16(uint16x4_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_u16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_u16",
        "intrinsic": "uint16x8_t vluti2_laneq_u16(uint16x4_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_u16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_u16",
        "intrinsic": "uint16x8_t vluti2q_lane_u16(uint16x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_u16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_u16",
        "intrinsic": "uint16x8_t vluti2q_laneq_u16(uint16x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_u16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_s16",
        "intrinsic": "int16x8_t vluti2_lane_s16(int16x4_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_s16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_s16",
        "intrinsic": "int16x8_t vluti2_laneq_s16(int16x4_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_s16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_s16",
        "intrinsic": "int16x8_t vluti2q_lane_s16(int16x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_s16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_s16",
        "intrinsic": "int16x8_t vluti2q_laneq_s16(int16x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_s16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_f16",
        "intrinsic": "float16x8_t vluti2_lane_f16(float16x4_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_f16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_f16",
        "intrinsic": "float16x8_t vluti2_laneq_f16(float16x4_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_f16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_f16",
        "intrinsic": "float16x8_t vluti2q_lane_f16(float16x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_f16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_f16",
        "intrinsic": "float16x8_t vluti2q_laneq_f16(float16x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_f16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_bf16",
        "intrinsic": "bfloat16x8_t vluti2_lane_bf16(bfloat16x4_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_bf16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_bf16",
        "intrinsic": "bfloat16x8_t vluti2_laneq_bf16(bfloat16x4_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_bf16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_bf16",
        "intrinsic": "bfloat16x8_t vluti2q_lane_bf16(bfloat16x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_bf16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_bf16",
        "intrinsic": "bfloat16x8_t vluti2q_laneq_bf16(bfloat16x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_bf16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_lane_p16",
        "intrinsic": "poly16x8_t vluti2_lane_p16(poly16x4_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_lane_p16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2_laneq_p16",
        "intrinsic": "poly16x8_t vluti2_laneq_p16(poly16x4_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2_laneq_p16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_lane_p16",
        "intrinsic": "poly16x8_t vluti2q_lane_p16(poly16x8_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_lane_p16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti2q_laneq_p16",
        "intrinsic": "poly16x8_t vluti2q_laneq_p16(poly16x8_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti2q_laneq_p16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm; 0 <= index <= 7",
        "aarch64_instruction": "LUTI2 Vd.8H, {Vn.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_u8",
        "intrinsic": "uint8x16_t vluti4q_lane_u8(uint8x16_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_u8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 0",
        "aarch64_instruction": "LUTI4 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_u8",
        "intrinsic": "uint8x16_t vluti4q_laneq_u8(uint8x16_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_u8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_s8",
        "intrinsic": "int8x16_t vluti4q_lane_s8(int8x16_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_s8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 0",
        "aarch64_instruction": "LUTI4 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_s8",
        "intrinsic": "int8x16_t vluti4q_laneq_s8(int8x16_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_s8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_p8",
        "intrinsic": "poly8x16_t vluti4q_lane_p8(poly8x16_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_p8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 0",
        "aarch64_instruction": "LUTI4 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_p8",
        "intrinsic": "poly8x16_t vluti4q_laneq_p8(poly8x16_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_p8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_mf8",
        "intrinsic": "mfloat8x16_t vluti4q_lane_mf8(mfloat8x16_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_mf8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 0",
        "aarch64_instruction": "LUTI4 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_mf8",
        "intrinsic": "mfloat8x16_t vluti4q_laneq_mf8(mfloat8x16_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_mf8",
        "argument_preparation": "vn -> Vn.16B; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.16B, {Vn.16B}, Vm[index]",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_u16_x2",
        "intrinsic": "uint16x8_t vluti4q_lane_u16_x2(uint16x8x2_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_u16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_u16_x2",
        "intrinsic": "uint16x8_t vluti4q_laneq_u16_x2(uint16x8x2_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_u16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_s16_x2",
        "intrinsic": "int16x8_t vluti4q_lane_s16_x2(int16x8x2_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_s16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_s16_x2",
        "intrinsic": "int16x8_t vluti4q_laneq_s16_x2(int16x8x2_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_s16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_f16_x2",
        "intrinsic": "float16x8_t vluti4q_lane_f16_x2(float16x8x2_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_f16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_f16_x2",
        "intrinsic": "float16x8_t vluti4q_laneq_f16_x2(float16x8x2_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_f16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_bf16_x2",
        "intrinsic": "bfloat16x8_t vluti4q_lane_bf16_x2(bfloat16x8x2_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_bf16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_bf16_x2",
        "intrinsic": "bfloat16x8_t vluti4q_laneq_bf16_x2(bfloat16x8x2_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_bf16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_lane_p16_x2",
        "intrinsic": "poly16x8_t vluti4q_lane_p16_x2(poly16x8x2_t vn, uint8x8_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_lane_p16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 1",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vluti4q_laneq_p16_x2",
        "intrinsic": "poly16x8_t vluti4q_laneq_p16_x2(poly16x8x2_t vn, uint8x16_t vm, const int index)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vluti4q_laneq_p16_x2",
        "argument_preparation": "vn.val[0] -> Vn1.8H; vn.val[1] -> Vn2.8H; vm -> Vm; 0 <= index <= 3",
        "aarch64_instruction": "LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      }
    ]
  },
  "Crypto": {
    "Cryptography": [
      {
        "name": "vaeseq_u8",
        "intrinsic": "uint8x16_t vaeseq_u8(uint8x16_t data, uint8x16_t key)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaeseq_u8",
        "argument_preparation": "data -> Vd.16B; key -> Vn.16B",
        "aarch64_instruction": "AESE Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vaesdq_u8",
        "intrinsic": "uint8x16_t vaesdq_u8(uint8x16_t data, uint8x16_t key)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaesdq_u8",
        "argument_preparation": "data -> Vd.16B; key -> Vn.16B",
        "aarch64_instruction": "AESD Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vaesmcq_u8",
        "intrinsic": "uint8x16_t vaesmcq_u8(uint8x16_t data)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaesmcq_u8",
        "argument_preparation": "data -> Vn.16B",
        "aarch64_instruction": "AESMC Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vaesimcq_u8",
        "intrinsic": "uint8x16_t vaesimcq_u8(uint8x16_t data)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaesimcq_u8",
        "argument_preparation": "data -> Vn.16B",
        "aarch64_instruction": "AESIMC Vd.16B,Vn.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha1cq_u32",
        "intrinsic": "uint32x4_t vsha1cq_u32(uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha1cq_u32",
        "argument_preparation": "hash_abcd -> Qd; hash_e -> Sn; wk -> Vm.4S",
        "aarch64_instruction": "SHA1C Qd,Sn,Vm.4S",
        "result": "Qd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha1pq_u32",
        "intrinsic": "uint32x4_t vsha1pq_u32(uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha1pq_u32",
        "argument_preparation": "hash_abcd -> Qd; hash_e -> Sn; wk -> Vm.4S",
        "aarch64_instruction": "SHA1P Qd,Sn,Vm.4S",
        "result": "Qd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha1mq_u32",
        "intrinsic": "uint32x4_t vsha1mq_u32(uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha1mq_u32",
        "argument_preparation": "hash_abcd -> Qd; hash_e -> Sn; wk -> Vm.4S",
        "aarch64_instruction": "SHA1M Qd,Sn,Vm.4S",
        "result": "Qd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha1h_u32",
        "intrinsic": "uint32_t vsha1h_u32(uint32_t hash_e)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha1h_u32",
        "argument_preparation": "hash_e -> Sn",
        "aarch64_instruction": "SHA1H Sd,Sn",
        "result": "Sd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha1su0q_u32",
        "intrinsic": "uint32x4_t vsha1su0q_u32(uint32x4_t w0_3, uint32x4_t w4_7, uint32x4_t w8_11)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha1su0q_u32",
        "argument_preparation": "w0_3 -> Vd.4S; w4_7 -> Vn.4S; w8_11 -> Vm.4S",
        "aarch64_instruction": "SHA1SU0 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha1su1q_u32",
        "intrinsic": "uint32x4_t vsha1su1q_u32(uint32x4_t tw0_3, uint32x4_t w12_15)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha1su1q_u32",
        "argument_preparation": "tw0_3 -> Vd.4S; w12_15 -> Vn.4S",
        "aarch64_instruction": "SHA1SU1 Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha256hq_u32",
        "intrinsic": "uint32x4_t vsha256hq_u32(uint32x4_t hash_abcd, uint32x4_t hash_efgh, uint32x4_t wk)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha256hq_u32",
        "argument_preparation": "hash_abcd -> Qd; hash_efgh -> Qn; wk -> Vm.4S",
        "aarch64_instruction": "SHA256H Qd,Qn,Vm.4S",
        "result": "Qd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha256h2q_u32",
        "intrinsic": "uint32x4_t vsha256h2q_u32(uint32x4_t hash_efgh, uint32x4_t hash_abcd, uint32x4_t wk)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha256h2q_u32",
        "argument_preparation": "hash_efgh -> Qd; hash_abcd -> Qn; wk -> Vm.4S",
        "aarch64_instruction": "SHA256H2 Qd,Qn,Vm.4S",
        "result": "Qd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha256su0q_u32",
        "intrinsic": "uint32x4_t vsha256su0q_u32(uint32x4_t w0_3, uint32x4_t w4_7)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha256su0q_u32",
        "argument_preparation": "w0_3 -> Vd.4S; w4_7 -> Vn.4S",
        "aarch64_instruction": "SHA256SU0 Vd.4S,Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsha256su1q_u32",
        "intrinsic": "uint32x4_t vsha256su1q_u32(uint32x4_t tw0_3, uint32x4_t w8_11, uint32x4_t w12_15)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha256su1q_u32",
        "argument_preparation": "tw0_3 -> Vd.4S; w8_11 -> Vn.4S; w12_15 -> Vm.4S",
        "aarch64_instruction": "SHA256SU1 Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      }
    ],
    "Vector arithmetic": [
      {
        "name": "vmull_p64",
        "intrinsic": "poly128_t vmull_p64(poly64_t a, poly64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_p64",
        "argument_preparation": "a -> Vn.1D; b -> Vm.1D",
        "aarch64_instruction": "PMULL Vd.1Q,Vn.1D,Vm.1D",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmull_high_p64",
        "intrinsic": "poly128_t vmull_high_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmull_high_p64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "PMULL2 Vd.1Q,Vn.2D,Vm.2D",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vadd_p8",
        "intrinsic": "poly8x8_t vadd_p8(poly8x8_t a, poly8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_p8",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_p16",
        "intrinsic": "poly16x4_t vadd_p16(poly16x4_t a, poly16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_p16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vadd_p64",
        "intrinsic": "poly64x1_t vadd_p64(poly64x1_t a, poly64x1_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_p64",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "EOR Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_p8",
        "intrinsic": "poly8x16_t vaddq_p8(poly8x16_t a, poly8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_p8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_p16",
        "intrinsic": "poly16x8_t vaddq_p16(poly16x8_t a, poly16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_p16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_p64",
        "intrinsic": "poly64x2_t vaddq_p64(poly64x2_t a, poly64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_p64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vaddq_p128",
        "intrinsic": "poly128_t vaddq_p128(poly128_t a, poly128_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_p128",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "EOR Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      }
    ]
  },
  "CRC32": {
    "Cryptography": [
      {
        "name": "__crc32b",
        "intrinsic": "uint32_t __crc32b(uint32_t a, uint8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/__crc32b",
        "argument_preparation": "a -> Wn; b -> Wm",
        "aarch64_instruction": "CRC32B Wd,Wn,Wm",
        "result": "Wd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "__crc32h",
        "intrinsic": "uint32_t __crc32h(uint32_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/__crc32h",
        "argument_preparation": "a -> Wn; b -> Wm",
        "aarch64_instruction": "CRC32H Wd,Wn,Wm",
        "result": "Wd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "__crc32w",
        "intrinsic": "uint32_t __crc32w(uint32_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/__crc32w",
        "argument_preparation": "a -> Wn; b -> Wm",
        "aarch64_instruction": "CRC32W Wd,Wn,Wm",
        "result": "Wd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "__crc32d",
        "intrinsic": "uint32_t __crc32d(uint32_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/__crc32d",
        "argument_preparation": "a -> Wn; b -> Xm",
        "aarch64_instruction": "CRC32X Wd,Wn,Xm",
        "result": "Wd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "__crc32cb",
        "intrinsic": "uint32_t __crc32cb(uint32_t a, uint8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/__crc32cb",
        "argument_preparation": "a -> Wn; b -> Wm",
        "aarch64_instruction": "CRC32CB Wd,Wn,Wm",
        "result": "Wd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "__crc32ch",
        "intrinsic": "uint32_t __crc32ch(uint32_t a, uint16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/__crc32ch",
        "argument_preparation": "a -> Wn; b -> Wm",
        "aarch64_instruction": "CRC32CH Wd,Wn,Wm",
        "result": "Wd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "__crc32cw",
        "intrinsic": "uint32_t __crc32cw(uint32_t a, uint32_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/__crc32cw",
        "argument_preparation": "a -> Wn; b -> Wm",
        "aarch64_instruction": "CRC32CW Wd,Wn,Wm",
        "result": "Wd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "__crc32cd",
        "intrinsic": "uint32_t __crc32cd(uint32_t a, uint64_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/__crc32cd",
        "argument_preparation": "a -> Wn; b -> Xm",
        "aarch64_instruction": "CRC32CX Wd,Wn,Xm",
        "result": "Wd -> result",
        "supported_architectures": "A32/A64"
      }
    ]
  },
  "sqrdmlah intrinsics (From ARMv8.1-A)": {
    "Vector arithmetic": [
      {
        "name": "vqrdmlah_s16",
        "intrinsic": "int16x4_t vqrdmlah_s16(int16x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlah_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "SQRDMLAH Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlah_s32",
        "intrinsic": "int32x2_t vqrdmlah_s32(int32x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlah_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "SQRDMLAH Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahq_s16",
        "intrinsic": "int16x8_t vqrdmlahq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahq_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "SQRDMLAH Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahq_s32",
        "intrinsic": "int32x4_t vqrdmlahq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahq_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SQRDMLAH Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlsh_s16",
        "intrinsic": "int16x4_t vqrdmlsh_s16(int16x4_t a, int16x4_t b, int16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlsh_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "SQRDMLSH Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlsh_s32",
        "intrinsic": "int32x2_t vqrdmlsh_s32(int32x2_t a, int32x2_t b, int32x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlsh_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; c -> Vm.2S",
        "aarch64_instruction": "SQRDMLSH Vd.2S,Vn.2S,Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshq_s16",
        "intrinsic": "int16x8_t vqrdmlshq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshq_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "SQRDMLSH Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshq_s32",
        "intrinsic": "int32x4_t vqrdmlshq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshq_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SQRDMLSH Vd.4S,Vn.4S,Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahh_s16",
        "intrinsic": "int16_t vqrdmlahh_s16(int16_t a, int16_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahh_s16",
        "argument_preparation": "a -> Hd; b -> Hn; c -> Hm",
        "aarch64_instruction": "SQRDMLSH Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahs_s32",
        "intrinsic": "int32_t vqrdmlahs_s32(int32_t a, int32_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahs_s32",
        "argument_preparation": "a -> Sd; b -> Sn; c -> Sm",
        "aarch64_instruction": "SQRDMLSH Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshh_s16",
        "intrinsic": "int16_t vqrdmlshh_s16(int16_t a, int16_t b, int16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshh_s16",
        "argument_preparation": "a -> Hd; b -> Hn; c -> Hm",
        "aarch64_instruction": "SQRDMLSH Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshs_s32",
        "intrinsic": "int32_t vqrdmlshs_s32(int32_t a, int32_t b, int32_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshs_s32",
        "argument_preparation": "a -> Sd; b -> Sn; c -> Sm",
        "aarch64_instruction": "SQRDMLSH Sd,Sn,Sm",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlah_lane_s16",
        "intrinsic": "int16x4_t vqrdmlah_lane_s16(int16x4_t a, int16x4_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlah_lane_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLAH Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahq_lane_s16",
        "intrinsic": "int16x8_t vqrdmlahq_lane_s16(int16x8_t a, int16x8_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahq_lane_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLAH Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlah_laneq_s16",
        "intrinsic": "int16x4_t vqrdmlah_laneq_s16(int16x4_t a, int16x4_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlah_laneq_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMLAH Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahq_laneq_s16",
        "intrinsic": "int16x8_t vqrdmlahq_laneq_s16(int16x8_t a, int16x8_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahq_laneq_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMLAH Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlah_lane_s32",
        "intrinsic": "int32x2_t vqrdmlah_lane_s32(int32x2_t a, int32x2_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlah_lane_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMLAH Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahq_lane_s32",
        "intrinsic": "int32x4_t vqrdmlahq_lane_s32(int32x4_t a, int32x4_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahq_lane_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMLAH Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlah_laneq_s32",
        "intrinsic": "int32x2_t vqrdmlah_laneq_s32(int32x2_t a, int32x2_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlah_laneq_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLAH Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahq_laneq_s32",
        "intrinsic": "int32x4_t vqrdmlahq_laneq_s32(int32x4_t a, int32x4_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahq_laneq_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLAH Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlsh_lane_s16",
        "intrinsic": "int16x4_t vqrdmlsh_lane_s16(int16x4_t a, int16x4_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlsh_lane_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLSH Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshq_lane_s16",
        "intrinsic": "int16x8_t vqrdmlshq_lane_s16(int16x8_t a, int16x8_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshq_lane_s16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLSH Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlsh_laneq_s16",
        "intrinsic": "int16x4_t vqrdmlsh_laneq_s16(int16x4_t a, int16x4_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlsh_laneq_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMLSH Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshq_laneq_s16",
        "intrinsic": "int16x8_t vqrdmlshq_laneq_s16(int16x8_t a, int16x8_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshq_laneq_s16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMLSH Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlsh_lane_s32",
        "intrinsic": "int32x2_t vqrdmlsh_lane_s32(int32x2_t a, int32x2_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlsh_lane_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMLSH Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshq_lane_s32",
        "intrinsic": "int32x4_t vqrdmlshq_lane_s32(int32x4_t a, int32x4_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshq_lane_s32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMLSH Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlsh_laneq_s32",
        "intrinsic": "int32x2_t vqrdmlsh_laneq_s32(int32x2_t a, int32x2_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlsh_laneq_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLSH Vd.2S,Vn.2S,Vm.S[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshq_laneq_s32",
        "intrinsic": "int32x4_t vqrdmlshq_laneq_s32(int32x4_t a, int32x4_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshq_laneq_s32",
        "argument_preparation": "a -> Vd.2S; b -> Vn.2S; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLSH Vd.4S,Vn.4S,Vm.S[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahh_lane_s16",
        "intrinsic": "int16_t vqrdmlahh_lane_s16(int16_t a, int16_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahh_lane_s16",
        "argument_preparation": "a -> Hd; b -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLAH Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahh_laneq_s16",
        "intrinsic": "int16_t vqrdmlahh_laneq_s16(int16_t a, int16_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahh_laneq_s16",
        "argument_preparation": "a -> Hd; b -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMLAH Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahs_lane_s32",
        "intrinsic": "int32_t vqrdmlahs_lane_s32(int32_t a, int32_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahs_lane_s32",
        "argument_preparation": "a -> Sd; b -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMLAH Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlahs_laneq_s32",
        "intrinsic": "int32_t vqrdmlahs_laneq_s32(int32_t a, int32_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlahs_laneq_s32",
        "argument_preparation": "a -> Sd; b -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLAH Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshh_lane_s16",
        "intrinsic": "int16_t vqrdmlshh_lane_s16(int16_t a, int16_t b, int16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshh_lane_s16",
        "argument_preparation": "a -> Hd; b -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLSH Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshh_laneq_s16",
        "intrinsic": "int16_t vqrdmlshh_laneq_s16(int16_t a, int16_t b, int16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshh_laneq_s16",
        "argument_preparation": "a -> Hd; b -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "SQRDMLSH Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshs_lane_s32",
        "intrinsic": "int32_t vqrdmlshs_lane_s32(int32_t a, int32_t b, int32x2_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshs_lane_s32",
        "argument_preparation": "a -> Sd; b -> Sn; v -> Vm.2S; 0 <= lane <= 1",
        "aarch64_instruction": "SQRDMLSH Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vqrdmlshs_laneq_s32",
        "intrinsic": "int32_t vqrdmlshs_laneq_s32(int32_t a, int32_t b, int32x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmlshs_laneq_s32",
        "argument_preparation": "a -> Sd; b -> Sn; v -> Vm.4S; 0 <= lane <= 3",
        "aarch64_instruction": "SQRDMLSH Sd,Sn,Vm.S[lane]",
        "result": "Sd -> result",
        "supported_architectures": "A64"
      }
    ]
  },
  "fp16 scalar intrinsics (available through <arm_fp16.h> from ARMv8.2-A)": {
    "Vector arithmetic": [
      {
        "name": "vabsh_f16",
        "intrinsic": "float16_t vabsh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FABS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vabdh_f16",
        "intrinsic": "float16_t vabdh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FABD (scalar) Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpeh_f16",
        "intrinsic": "float16_t vrecpeh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpeh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRECPE Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpxh_f16",
        "intrinsic": "float16_t vrecpxh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpxh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRECPX Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrteh_f16",
        "intrinsic": "float16_t vrsqrteh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrteh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRSQRTE Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrsqrtsh_f16",
        "intrinsic": "float16_t vrsqrtsh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrtsh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FRSQRTS Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrecpsh_f16",
        "intrinsic": "float16_t vrecpsh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpsh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FRECPS Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndh_f16",
        "intrinsic": "float16_t vrndh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRINTZ Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndah_f16",
        "intrinsic": "float16_t vrndah_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndah_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRINTA Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndih_f16",
        "intrinsic": "float16_t vrndih_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndih_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRINTI Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndmh_f16",
        "intrinsic": "float16_t vrndmh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndmh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRINTM Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndnh_f16",
        "intrinsic": "float16_t vrndnh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndnh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRINTN Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndph_f16",
        "intrinsic": "float16_t vrndph_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndph_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRINTP Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndxh_f16",
        "intrinsic": "float16_t vrndxh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndxh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FRINTX Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsqrth_f16",
        "intrinsic": "float16_t vsqrth_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqrth_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FSQRT Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vaddh_f16",
        "intrinsic": "float16_t vaddh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FADD Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdivh_f16",
        "intrinsic": "float16_t vdivh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdivh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FDIV Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmaxh_f16",
        "intrinsic": "float16_t vmaxh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FMAX Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxnmh_f16",
        "intrinsic": "float16_t vmaxnmh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FMAXNM Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vminh_f16",
        "intrinsic": "float16_t vminh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FMIN Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminnmh_f16",
        "intrinsic": "float16_t vminnmh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FMINNM Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmulh_f16",
        "intrinsic": "float16_t vmulh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FMUL Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmulxh_f16",
        "intrinsic": "float16_t vmulxh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FMULX Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmah_f16",
        "intrinsic": "float16_t vfmah_f16(float16_t a, float16_t b, float16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmah_f16",
        "argument_preparation": "b -> Hn; c -> Hm; a -> Ha",
        "aarch64_instruction": "FMADD Hd,Hn,Hm,Ha",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmsh_f16",
        "intrinsic": "float16_t vfmsh_f16(float16_t a, float16_t b, float16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsh_f16",
        "argument_preparation": "b -> Hn; c -> Hm; a -> Ha",
        "aarch64_instruction": "FMSUB Hd,Hn,Hm,Ha",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsubh_f16",
        "intrinsic": "float16_t vsubh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FSUB Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      }
    ],
    "Compare": [
      {
        "name": "vceqzh_f16",
        "intrinsic": "uint16_t vceqzh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCMEQ Hd,Hn,#0",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgezh_f16",
        "intrinsic": "uint16_t vcgezh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCMGE Hd,Hn,#0",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgtzh_f16",
        "intrinsic": "uint16_t vcgtzh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCMGT Hd,Hn,#0",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclezh_f16",
        "intrinsic": "uint16_t vclezh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCMLE Hd,Hn,#0",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcltzh_f16",
        "intrinsic": "uint16_t vcltzh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCMLT Hd,Hn,#0",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcageh_f16",
        "intrinsic": "uint16_t vcageh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcageh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FACGE Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcagth_f16",
        "intrinsic": "uint16_t vcagth_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagth_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FACGT Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcaleh_f16",
        "intrinsic": "uint16_t vcaleh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaleh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FACGE Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcalth_f16",
        "intrinsic": "uint16_t vcalth_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcalth_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FACGT Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vceqh_f16",
        "intrinsic": "uint16_t vceqh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FCMEQ Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgeh_f16",
        "intrinsic": "uint16_t vcgeh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FCMGE Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcgth_f16",
        "intrinsic": "uint16_t vcgth_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgth_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FCMGT Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcleh_f16",
        "intrinsic": "uint16_t vcleh_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleh_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FCMGE Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vclth_f16",
        "intrinsic": "uint16_t vclth_f16(float16_t a, float16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclth_f16",
        "argument_preparation": "a -> Hn; b -> Hm",
        "aarch64_instruction": "FCMGT Hd,Hn,Hm",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      }
    ],
    "Data type conversion": [
      {
        "name": "vcvth_f16_s16",
        "intrinsic": "float16_t vcvth_f16_s16(int16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_f16_s16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "SCVTF Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_f16_s32",
        "intrinsic": "float16_t vcvth_f16_s32(int32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_f16_s32",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "SCVTF Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_f16_s64",
        "intrinsic": "float16_t vcvth_f16_s64(int64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_f16_s64",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "SCVTF Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_f16_u16",
        "intrinsic": "float16_t vcvth_f16_u16(uint16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_f16_u16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "UCVTF Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_f16_u32",
        "intrinsic": "float16_t vcvth_f16_u32(uint32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_f16_u32",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "UCVTF Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_f16_u64",
        "intrinsic": "float16_t vcvth_f16_u64(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_f16_u64",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "UCVTF Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_s16_f16",
        "intrinsic": "int16_t vcvth_s16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_s16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTZS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_s32_f16",
        "intrinsic": "int32_t vcvth_s32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_s32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTZS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_s64_f16",
        "intrinsic": "int64_t vcvth_s64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_s64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTZS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_u16_f16",
        "intrinsic": "uint16_t vcvth_u16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_u16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTZU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_u32_f16",
        "intrinsic": "uint32_t vcvth_u32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_u32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTZU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_u64_f16",
        "intrinsic": "uint64_t vcvth_u64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_u64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTZU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtah_s16_f16",
        "intrinsic": "int16_t vcvtah_s16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtah_s16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTAS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtah_s32_f16",
        "intrinsic": "int32_t vcvtah_s32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtah_s32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTAS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtah_s64_f16",
        "intrinsic": "int64_t vcvtah_s64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtah_s64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTAS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtah_u16_f16",
        "intrinsic": "uint16_t vcvtah_u16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtah_u16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTAU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtah_u32_f16",
        "intrinsic": "uint32_t vcvtah_u32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtah_u32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTAU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtah_u64_f16",
        "intrinsic": "uint64_t vcvtah_u64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtah_u64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTAU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtmh_s16_f16",
        "intrinsic": "int16_t vcvtmh_s16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmh_s16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTMS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtmh_s32_f16",
        "intrinsic": "int32_t vcvtmh_s32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmh_s32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTMS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtmh_s64_f16",
        "intrinsic": "int64_t vcvtmh_s64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmh_s64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTMS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtmh_u16_f16",
        "intrinsic": "uint16_t vcvtmh_u16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmh_u16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTMU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtmh_u32_f16",
        "intrinsic": "uint32_t vcvtmh_u32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmh_u32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTMU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtmh_u64_f16",
        "intrinsic": "uint64_t vcvtmh_u64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmh_u64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTMU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtnh_s16_f16",
        "intrinsic": "int16_t vcvtnh_s16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnh_s16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTNS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtnh_s32_f16",
        "intrinsic": "int32_t vcvtnh_s32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnh_s32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTNS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtnh_s64_f16",
        "intrinsic": "int64_t vcvtnh_s64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnh_s64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTNS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtnh_u16_f16",
        "intrinsic": "uint16_t vcvtnh_u16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnh_u16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTNU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtnh_u32_f16",
        "intrinsic": "uint32_t vcvtnh_u32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnh_u32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTNU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtnh_u64_f16",
        "intrinsic": "uint64_t vcvtnh_u64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnh_u64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTNU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtph_s16_f16",
        "intrinsic": "int16_t vcvtph_s16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtph_s16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTPS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtph_s32_f16",
        "intrinsic": "int32_t vcvtph_s32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtph_s32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTPS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtph_s64_f16",
        "intrinsic": "int64_t vcvtph_s64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtph_s64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTPS Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtph_u16_f16",
        "intrinsic": "uint16_t vcvtph_u16_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtph_u16_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTPU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtph_u32_f16",
        "intrinsic": "uint32_t vcvtph_u32_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtph_u32_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTPU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtph_u64_f16",
        "intrinsic": "uint64_t vcvtph_u64_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtph_u64_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FCVTPU Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_n_f16_s16",
        "intrinsic": "float16_t vcvth_n_f16_s16(int16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_f16_s16",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "SCVTF Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_n_f16_s32",
        "intrinsic": "float16_t vcvth_n_f16_s32(int32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_f16_s32",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "SCVTF Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_n_f16_s64",
        "intrinsic": "float16_t vcvth_n_f16_s64(int64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_f16_s64",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "SCVTF Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_n_f16_u16",
        "intrinsic": "float16_t vcvth_n_f16_u16(uint16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_f16_u16",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "UCVTF Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_n_f16_u32",
        "intrinsic": "float16_t vcvth_n_f16_u32(uint32_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_f16_u32",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "UCVTF Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_n_f16_u64",
        "intrinsic": "float16_t vcvth_n_f16_u64(uint64_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_f16_u64",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "UCVTF Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_n_s16_f16",
        "intrinsic": "int16_t vcvth_n_s16_f16(float16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_s16_f16",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZS Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_n_s32_f16",
        "intrinsic": "int32_t vcvth_n_s32_f16(float16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_s32_f16",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZS Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_n_s64_f16",
        "intrinsic": "int64_t vcvth_n_s64_f16(float16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_s64_f16",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZS Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_n_u16_f16",
        "intrinsic": "uint16_t vcvth_n_u16_f16(float16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_u16_f16",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZU Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvth_n_u32_f16",
        "intrinsic": "uint32_t vcvth_n_u32_f16(float16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_u32_f16",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZU Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_n_u64_f16",
        "intrinsic": "uint64_t vcvth_n_u64_f16(float16_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_n_u64_f16",
        "argument_preparation": "a -> Hn; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZU Hd,Hn,#n",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      }
    ],
    "Logical": [
      {
        "name": "vnegh_f16",
        "intrinsic": "float16_t vnegh_f16(float16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegh_f16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "FNEG Hd,Hn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      }
    ]
  },
  "fp16 vector intrinsics (from ARMv8.2-A)": {
    "Vector arithmetic": [
      {
        "name": "vabs_f16",
        "intrinsic": "float16x4_t vabs_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabs_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FABS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vabsq_f16",
        "intrinsic": "float16x8_t vabsq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabsq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FABS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vabd_f16",
        "intrinsic": "float16x4_t vabd_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabd_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FABD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vabdq_f16",
        "intrinsic": "float16x8_t vabdq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vabdq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FABD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrecpe_f16",
        "intrinsic": "float16x4_t vrecpe_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpe_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRECPE Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrecpeq_f16",
        "intrinsic": "float16x8_t vrecpeq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpeq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRECPE Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrsqrte_f16",
        "intrinsic": "float16x4_t vrsqrte_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrte_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRSQRTE Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrsqrteq_f16",
        "intrinsic": "float16x8_t vrsqrteq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrteq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRSQRTE Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrsqrts_f16",
        "intrinsic": "float16x4_t vrsqrts_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrts_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FRSQRTS Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrsqrtsq_f16",
        "intrinsic": "float16x8_t vrsqrtsq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrsqrtsq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FRSQRTS Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrecps_f16",
        "intrinsic": "float16x4_t vrecps_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecps_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FRECPS Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrecpsq_f16",
        "intrinsic": "float16x8_t vrecpsq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrecpsq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FRECPS Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrnd_f16",
        "intrinsic": "float16x4_t vrnd_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRINTZ Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndq_f16",
        "intrinsic": "float16x8_t vrndq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRINTZ Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrnda_f16",
        "intrinsic": "float16x4_t vrnda_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnda_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRINTA Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndaq_f16",
        "intrinsic": "float16x8_t vrndaq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndaq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRINTA Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndi_f16",
        "intrinsic": "float16x4_t vrndi_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndi_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRINTI Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndiq_f16",
        "intrinsic": "float16x8_t vrndiq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndiq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRINTI Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrndm_f16",
        "intrinsic": "float16x4_t vrndm_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndm_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRINTM Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndmq_f16",
        "intrinsic": "float16x8_t vrndmq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndmq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRINTM Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndn_f16",
        "intrinsic": "float16x4_t vrndn_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndn_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRINTN Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndnq_f16",
        "intrinsic": "float16x8_t vrndnq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndnq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRINTN Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndp_f16",
        "intrinsic": "float16x4_t vrndp_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndp_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRINTP Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndpq_f16",
        "intrinsic": "float16x8_t vrndpq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndpq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRINTP Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndx_f16",
        "intrinsic": "float16x4_t vrndx_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndx_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FRINTX Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vrndxq_f16",
        "intrinsic": "float16x8_t vrndxq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrndxq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FRINTX Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsqrt_f16",
        "intrinsic": "float16x4_t vsqrt_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqrt_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FSQRT Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsqrtq_f16",
        "intrinsic": "float16x8_t vsqrtq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsqrtq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FSQRT Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vadd_f16",
        "intrinsic": "float16x4_t vadd_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vadd_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FADD Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vaddq_f16",
        "intrinsic": "float16x8_t vaddq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vaddq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FADD Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdiv_f16",
        "intrinsic": "float16x4_t vdiv_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdiv_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FDIV Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdivq_f16",
        "intrinsic": "float16x8_t vdivq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdivq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FDIV Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmax_f16",
        "intrinsic": "float16x4_t vmax_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmax_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMAX Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmaxq_f16",
        "intrinsic": "float16x8_t vmaxq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMAX Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmaxnm_f16",
        "intrinsic": "float16x4_t vmaxnm_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnm_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMAXNM Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmaxnmq_f16",
        "intrinsic": "float16x8_t vmaxnmq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMAXNM Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmaxv_f16",
        "intrinsic": "float16_t vmaxv_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxv_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FMAXP Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxvq_f16",
        "intrinsic": "float16_t vmaxvq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxvq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FMAXP Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxnmv_f16",
        "intrinsic": "float16_t vmaxnmv_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmv_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FMAXNMP Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmaxnmvq_f16",
        "intrinsic": "float16_t vmaxnmvq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmaxnmvq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FMAXNMP Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmin_f16",
        "intrinsic": "float16x4_t vmin_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmin_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMIN Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vminq_f16",
        "intrinsic": "float16x8_t vminq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMIN Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vminnm_f16",
        "intrinsic": "float16x4_t vminnm_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnm_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMINNM Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vminnmq_f16",
        "intrinsic": "float16x8_t vminnmq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMINNM Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vminv_f16",
        "intrinsic": "float16_t vminv_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminv_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FMINP Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminvq_f16",
        "intrinsic": "float16_t vminvq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminvq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FMINP Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminnmv_f16",
        "intrinsic": "float16_t vminnmv_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmv_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FMINNMP Hd,Vn.4H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vminnmvq_f16",
        "intrinsic": "float16_t vminnmvq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vminnmvq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FMINNMP Hd,Vn.8H",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_f16",
        "intrinsic": "float16x4_t vmul_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMUL Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmulq_f16",
        "intrinsic": "float16x8_t vmulq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMUL Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmul_lane_f16",
        "intrinsic": "float16x4_t vmul_lane_f16(float16x4_t a, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_lane_f16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMUL Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmulq_lane_f16",
        "intrinsic": "float16x8_t vmulq_lane_f16(float16x8_t a, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_lane_f16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMUL Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmul_laneq_f16",
        "intrinsic": "float16x4_t vmul_laneq_f16(float16x4_t a, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_laneq_f16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMUL Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulq_laneq_f16",
        "intrinsic": "float16x8_t vmulq_laneq_f16(float16x8_t a, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_laneq_f16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMUL Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmul_n_f16",
        "intrinsic": "float16x4_t vmul_n_f16(float16x4_t a, float16_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmul_n_f16",
        "argument_preparation": "n -> Vm.H[0]; a -> Vn.4H",
        "aarch64_instruction": "FMUL Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmulq_n_f16",
        "intrinsic": "float16x8_t vmulq_n_f16(float16x8_t a, float16_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulq_n_f16",
        "argument_preparation": "n -> Vm.H[0]; a -> Vn.8H",
        "aarch64_instruction": "FMUL Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmulh_lane_f16",
        "intrinsic": "float16_t vmulh_lane_f16(float16_t a, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulh_lane_f16",
        "argument_preparation": "a -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMUL Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulh_laneq_f16",
        "intrinsic": "float16_t vmulh_laneq_f16(float16_t a, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulh_laneq_f16",
        "argument_preparation": "a -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMUL Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_f16",
        "intrinsic": "float16x4_t vmulx_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMULX Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_f16",
        "intrinsic": "float16x8_t vmulxq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMULX Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_lane_f16",
        "intrinsic": "float16x4_t vmulx_lane_f16(float16x4_t a, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_lane_f16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMULX Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_lane_f16",
        "intrinsic": "float16x8_t vmulxq_lane_f16(float16x8_t a, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_lane_f16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMULX Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_laneq_f16",
        "intrinsic": "float16x4_t vmulx_laneq_f16(float16x4_t a, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_laneq_f16",
        "argument_preparation": "a -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMULX Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_laneq_f16",
        "intrinsic": "float16x8_t vmulxq_laneq_f16(float16x8_t a, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_laneq_f16",
        "argument_preparation": "a -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMULX Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulx_n_f16",
        "intrinsic": "float16x4_t vmulx_n_f16(float16x4_t a, float16_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulx_n_f16",
        "argument_preparation": "n -> Vm.H[0]; a -> Vn.4H",
        "aarch64_instruction": "FMULX Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxq_n_f16",
        "intrinsic": "float16x8_t vmulxq_n_f16(float16x8_t a, float16_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxq_n_f16",
        "argument_preparation": "n -> Vm.H[0]; a -> Vn.8H",
        "aarch64_instruction": "FMULX Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxh_lane_f16",
        "intrinsic": "float16_t vmulxh_lane_f16(float16_t a, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxh_lane_f16",
        "argument_preparation": "a -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMULX Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmulxh_laneq_f16",
        "intrinsic": "float16_t vmulxh_laneq_f16(float16_t a, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmulxh_laneq_f16",
        "argument_preparation": "a -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMULX Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_f16",
        "intrinsic": "float16x4_t vfma_f16(float16x4_t a, float16x4_t b, float16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_f16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "FMLA Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmaq_f16",
        "intrinsic": "float16x8_t vfmaq_f16(float16x8_t a, float16x8_t b, float16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_f16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "FMLA Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfms_f16",
        "intrinsic": "float16x4_t vfms_f16(float16x4_t a, float16x4_t b, float16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_f16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; c -> Vm.4H",
        "aarch64_instruction": "FMLS Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmsq_f16",
        "intrinsic": "float16x8_t vfmsq_f16(float16x8_t a, float16x8_t b, float16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_f16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; c -> Vm.8H",
        "aarch64_instruction": "FMLS Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfma_lane_f16",
        "intrinsic": "float16x4_t vfma_lane_f16(float16x4_t a, float16x4_t b, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_lane_f16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLA Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_lane_f16",
        "intrinsic": "float16x8_t vfmaq_lane_f16(float16x8_t a, float16x8_t b, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_lane_f16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLA Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_laneq_f16",
        "intrinsic": "float16x4_t vfma_laneq_f16(float16x4_t a, float16x4_t b, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_laneq_f16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLA Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_laneq_f16",
        "intrinsic": "float16x8_t vfmaq_laneq_f16(float16x8_t a, float16x8_t b, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_laneq_f16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLA Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfma_n_f16",
        "intrinsic": "float16x4_t vfma_n_f16(float16x4_t a, float16x4_t b, float16_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfma_n_f16",
        "argument_preparation": "n -> Vm.H[0]; b -> Vn.4H; a -> Vd.4H",
        "aarch64_instruction": "FMLA Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmaq_n_f16",
        "intrinsic": "float16x8_t vfmaq_n_f16(float16x8_t a, float16x8_t b, float16_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmaq_n_f16",
        "argument_preparation": "n -> Vm.H[0]; b -> Vn.8H; a -> Vd.8H",
        "aarch64_instruction": "FMLA Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmah_lane_f16",
        "intrinsic": "float16_t vfmah_lane_f16(float16_t a, float16_t b, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmah_lane_f16",
        "argument_preparation": "a -> Hd; b -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLA Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmah_laneq_f16",
        "intrinsic": "float16_t vfmah_laneq_f16(float16_t a, float16_t b, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmah_laneq_f16",
        "argument_preparation": "a -> Hd; b -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLA Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_lane_f16",
        "intrinsic": "float16x4_t vfms_lane_f16(float16x4_t a, float16x4_t b, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_lane_f16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLS Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_lane_f16",
        "intrinsic": "float16x8_t vfmsq_lane_f16(float16x8_t a, float16x8_t b, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_lane_f16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLS Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_laneq_f16",
        "intrinsic": "float16x4_t vfms_laneq_f16(float16x4_t a, float16x4_t b, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_laneq_f16",
        "argument_preparation": "a -> Vd.4H; b -> Vn.4H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLS Vd.4H,Vn.4H,Vm.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_laneq_f16",
        "intrinsic": "float16x8_t vfmsq_laneq_f16(float16x8_t a, float16x8_t b, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_laneq_f16",
        "argument_preparation": "a -> Vd.8H; b -> Vn.8H; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLS Vd.8H,Vn.8H,Vm.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfms_n_f16",
        "intrinsic": "float16x4_t vfms_n_f16(float16x4_t a, float16x4_t b, float16_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfms_n_f16",
        "argument_preparation": "n -> Vm.H[0]; b -> Vn.4H; a -> Vd.4H",
        "aarch64_instruction": "FMLS Vd.4H,Vn.4H,Vm.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsq_n_f16",
        "intrinsic": "float16x8_t vfmsq_n_f16(float16x8_t a, float16x8_t b, float16_t n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsq_n_f16",
        "argument_preparation": "n -> Vm.H[0]; b -> Vn.8H; a -> Vd.8H",
        "aarch64_instruction": "FMLS Vd.8H,Vn.8H,Vm.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsh_lane_f16",
        "intrinsic": "float16_t vfmsh_lane_f16(float16_t a, float16_t b, float16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsh_lane_f16",
        "argument_preparation": "a -> Hd; b -> Hn; v -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLS Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vfmsh_laneq_f16",
        "intrinsic": "float16_t vfmsh_laneq_f16(float16_t a, float16_t b, float16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmsh_laneq_f16",
        "argument_preparation": "a -> Hd; b -> Hn; v -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLS Hd,Hn,Vm.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpadd_f16",
        "intrinsic": "float16x4_t vpadd_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpadd_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FADDP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vpaddq_f16",
        "intrinsic": "float16x8_t vpaddq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpaddq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FADDP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmax_f16",
        "intrinsic": "float16x4_t vpmax_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmax_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMAXP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vpmaxq_f16",
        "intrinsic": "float16x8_t vpmaxq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMAXP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxnm_f16",
        "intrinsic": "float16x4_t vpmaxnm_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxnm_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMAXNMP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmaxnmq_f16",
        "intrinsic": "float16x8_t vpmaxnmq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmaxnmq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMAXNMP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpmin_f16",
        "intrinsic": "float16x4_t vpmin_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpmin_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMINP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vpminq_f16",
        "intrinsic": "float16x8_t vpminq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMINP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminnm_f16",
        "intrinsic": "float16x4_t vpminnm_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminnm_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FMINNMP Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vpminnmq_f16",
        "intrinsic": "float16x8_t vpminnmq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vpminnmq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FMINNMP Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsub_f16",
        "intrinsic": "float16x4_t vsub_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsub_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FSUB Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsubq_f16",
        "intrinsic": "float16x8_t vsubq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsubq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FSUB Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      }
    ],
    "Compare": [
      {
        "name": "vceqz_f16",
        "intrinsic": "uint16x4_t vceqz_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqz_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCMEQ Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vceqzq_f16",
        "intrinsic": "uint16x8_t vceqzq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqzq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCMEQ Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcgez_f16",
        "intrinsic": "uint16x4_t vcgez_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgez_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCMGE Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcgezq_f16",
        "intrinsic": "uint16x8_t vcgezq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgezq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCMGE Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcgtz_f16",
        "intrinsic": "uint16x4_t vcgtz_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtz_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCMGT Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcgtzq_f16",
        "intrinsic": "uint16x8_t vcgtzq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtzq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCMGT Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vclez_f16",
        "intrinsic": "uint16x4_t vclez_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclez_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCMLE Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vclezq_f16",
        "intrinsic": "uint16x8_t vclezq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclezq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCMLE Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcltz_f16",
        "intrinsic": "uint16x4_t vcltz_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltz_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCMLT Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcltzq_f16",
        "intrinsic": "uint16x8_t vcltzq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCMLT Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcage_f16",
        "intrinsic": "uint16x4_t vcage_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcage_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FACGE Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcageq_f16",
        "intrinsic": "uint16x8_t vcageq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcageq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FACGE Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcagt_f16",
        "intrinsic": "uint16x4_t vcagt_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagt_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FACGT Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcagtq_f16",
        "intrinsic": "uint16x8_t vcagtq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcagtq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FACGT Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcale_f16",
        "intrinsic": "uint16x4_t vcale_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcale_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FACGE Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcaleq_f16",
        "intrinsic": "uint16x8_t vcaleq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaleq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FACGE Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcalt_f16",
        "intrinsic": "uint16x4_t vcalt_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcalt_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FACGT Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcaltq_f16",
        "intrinsic": "uint16x8_t vcaltq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaltq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FACGT Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vceq_f16",
        "intrinsic": "uint16x4_t vceq_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceq_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMEQ Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vceqq_f16",
        "intrinsic": "uint16x8_t vceqq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vceqq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMEQ Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcge_f16",
        "intrinsic": "uint16x4_t vcge_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcge_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMGE Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcgeq_f16",
        "intrinsic": "uint16x8_t vcgeq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgeq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMGE Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcgt_f16",
        "intrinsic": "uint16x4_t vcgt_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgt_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMGT Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcgtq_f16",
        "intrinsic": "uint16x8_t vcgtq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcgtq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMGT Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcle_f16",
        "intrinsic": "uint16x4_t vcle_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcle_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMGE Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcleq_f16",
        "intrinsic": "uint16x8_t vcleq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcleq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMGE Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vclt_f16",
        "intrinsic": "uint16x4_t vclt_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vclt_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMGT Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcltq_f16",
        "intrinsic": "uint16x8_t vcltq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMGT Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      }
    ],
    "Data type conversion": [
      {
        "name": "vcvt_f16_s16",
        "intrinsic": "float16x4_t vcvt_f16_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f16_s16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "SCVTF Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_f16_s16",
        "intrinsic": "float16x8_t vcvtq_f16_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_f16_s16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SCVTF Vd.8H,Vn.8H,#0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_f16_u16",
        "intrinsic": "float16x4_t vcvt_f16_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f16_u16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "UCVTF Vd.4H,Vn.4H,#0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_f16_u16",
        "intrinsic": "float16x8_t vcvtq_f16_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_f16_u16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "UCVTF Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_s16_f16",
        "intrinsic": "int16x4_t vcvt_s16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_s16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTZS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_s16_f16",
        "intrinsic": "int16x8_t vcvtq_s16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_s16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTZS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_u16_f16",
        "intrinsic": "uint16x4_t vcvt_u16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_u16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTZS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_u16_f16",
        "intrinsic": "uint16x8_t vcvtq_u16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_u16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTZS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvta_s16_f16",
        "intrinsic": "int16x4_t vcvta_s16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvta_s16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTAS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtaq_s16_f16",
        "intrinsic": "int16x8_t vcvtaq_s16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtaq_s16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTAS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvta_u16_f16",
        "intrinsic": "uint16x4_t vcvta_u16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvta_u16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTAU Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtaq_u16_f16",
        "intrinsic": "uint16x8_t vcvtaq_u16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtaq_u16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTAU Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtm_s16_f16",
        "intrinsic": "int16x4_t vcvtm_s16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtm_s16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTMS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtmq_s16_f16",
        "intrinsic": "int16x8_t vcvtmq_s16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmq_s16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTMS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtm_u16_f16",
        "intrinsic": "uint16x4_t vcvtm_u16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtm_u16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTMU Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtmq_u16_f16",
        "intrinsic": "uint16x8_t vcvtmq_u16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtmq_u16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTMU Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtn_s16_f16",
        "intrinsic": "int16x4_t vcvtn_s16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtn_s16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTNS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtnq_s16_f16",
        "intrinsic": "int16x8_t vcvtnq_s16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnq_s16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTNS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtn_u16_f16",
        "intrinsic": "uint16x4_t vcvtn_u16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtn_u16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTNU Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtnq_u16_f16",
        "intrinsic": "uint16x8_t vcvtnq_u16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtnq_u16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTNU Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtp_s16_f16",
        "intrinsic": "int16x4_t vcvtp_s16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtp_s16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTPS Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtpq_s16_f16",
        "intrinsic": "int16x8_t vcvtpq_s16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtpq_s16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTPS Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtp_u16_f16",
        "intrinsic": "uint16x4_t vcvtp_u16_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtp_u16_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FCVTPU Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtpq_u16_f16",
        "intrinsic": "uint16x8_t vcvtpq_u16_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtpq_u16_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FCVTPU Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_n_f16_s16",
        "intrinsic": "float16x4_t vcvt_n_f16_s16(int16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_f16_s16",
        "argument_preparation": "a -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "SCVTF Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_n_f16_s16",
        "intrinsic": "float16x8_t vcvtq_n_f16_s16(int16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_f16_s16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "SCVTF Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_n_f16_u16",
        "intrinsic": "float16x4_t vcvt_n_f16_u16(uint16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_f16_u16",
        "argument_preparation": "a -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "UCVTF Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_n_f16_u16",
        "intrinsic": "float16x8_t vcvtq_n_f16_u16(uint16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_f16_u16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "UCVTF Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_n_s16_f16",
        "intrinsic": "int16x4_t vcvt_n_s16_f16(float16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_s16_f16",
        "argument_preparation": "a -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZS Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_n_s16_f16",
        "intrinsic": "int16x8_t vcvtq_n_s16_f16(float16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_s16_f16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZS Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_n_u16_f16",
        "intrinsic": "uint16x4_t vcvt_n_u16_f16(float16x4_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_n_u16_f16",
        "argument_preparation": "a -> Vn.4H; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZU Vd.4H,Vn.4H,#n",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_n_u16_f16",
        "intrinsic": "uint16x8_t vcvtq_n_u16_f16(float16x8_t a, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_n_u16_f16",
        "argument_preparation": "a -> Vn.8H; 1 <= n <= 16",
        "aarch64_instruction": "FCVTZU Vd.8H,Vn.8H,#n",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      }
    ],
    "Logical": [
      {
        "name": "vneg_f16",
        "intrinsic": "float16x4_t vneg_f16(float16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vneg_f16",
        "argument_preparation": "a -> Vn.4H",
        "aarch64_instruction": "FNEG Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vnegq_f16",
        "intrinsic": "float16x8_t vnegq_f16(float16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vnegq_f16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "FNEG Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      }
    ]
  },
  "Additional intrinsics added in ACLE 3.0 for data processing (Always available)": {
    "Bit manipulation": [
      {
        "name": "vbsl_f16",
        "intrinsic": "float16x4_t vbsl_f16(uint16x4_t a, float16x4_t b, float16x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbsl_f16",
        "argument_preparation": "a -> Vd.8B; b -> Vn.8B; c -> Vm.8B",
        "aarch64_instruction": "BSL Vd.8B,Vn.8B,Vm.8B",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vbslq_f16",
        "intrinsic": "float16x8_t vbslq_f16(uint16x8_t a, float16x8_t b, float16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbslq_f16",
        "argument_preparation": "a -> Vd.16B; b -> Vn.16B; c -> Vm.16B",
        "aarch64_instruction": "BSL Vd.16B,Vn.16B,Vm.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      }
    ],
    "Vector manipulation": [
      {
        "name": "vzip_f16",
        "intrinsic": "float16x4x2_t vzip_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP1 Vd1.4H,Vn.4H,Vm.4H; ZIP2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzipq_f16",
        "intrinsic": "float16x8x2_t vzipq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzipq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP1 Vd1.8H,Vn.8H,Vm.8H; ZIP2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vzip1_f16",
        "intrinsic": "float16x4_t vzip1_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip1q_f16",
        "intrinsic": "float16x8_t vzip1q_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip1q_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2_f16",
        "intrinsic": "float16x4_t vzip2_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "ZIP2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vzip2q_f16",
        "intrinsic": "float16x8_t vzip2q_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vzip2q_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "ZIP2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp_f16",
        "intrinsic": "float16x4x2_t vuzp_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP1 Vd1.4H,Vn.4H,Vm.4H; UZP2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzpq_f16",
        "intrinsic": "float16x8x2_t vuzpq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzpq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP1 Vd1.8H,Vn.8H,Vm.8H; UZP2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vuzp1_f16",
        "intrinsic": "float16x4_t vuzp1_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp1q_f16",
        "intrinsic": "float16x8_t vuzp1q_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp1q_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2_f16",
        "intrinsic": "float16x4_t vuzp2_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "UZP2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vuzp2q_f16",
        "intrinsic": "float16x8_t vuzp2q_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vuzp2q_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "UZP2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn_f16",
        "intrinsic": "float16x4x2_t vtrn_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN1 Vd1.4H,Vn.4H,Vm.4H; TRN2 Vd2.4H,Vn.4H,Vm.4H",
        "result": "Vd1.4H -> result.val[0]; Vd2.4H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrnq_f16",
        "intrinsic": "float16x8x2_t vtrnq_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrnq_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN1 Vd1.8H,Vn.8H,Vm.8H; TRN2 Vd2.8H,Vn.8H,Vm.8H",
        "result": "Vd1.8H -> result.val[0]; Vd2.8H -> result.val[1]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vtrn1_f16",
        "intrinsic": "float16x4_t vtrn1_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN1 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn1q_f16",
        "intrinsic": "float16x8_t vtrn1q_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn1q_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN1 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2_f16",
        "intrinsic": "float16x4_t vtrn2_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "TRN2 Vd.4H,Vn.4H,Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vtrn2q_f16",
        "intrinsic": "float16x8_t vtrn2q_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vtrn2q_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "TRN2 Vd.8H,Vn.8H,Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdup_n_f16",
        "intrinsic": "float16x4_t vdup_n_f16(float16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_f16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_n_f16",
        "intrinsic": "float16x8_t vdupq_n_f16(float16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_f16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_lane_f16",
        "intrinsic": "float16x4_t vdup_lane_f16(float16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_f16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdupq_lane_f16",
        "intrinsic": "float16x8_t vdupq_lane_f16(float16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_f16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vdup_laneq_f16",
        "intrinsic": "float16x4_t vdup_laneq_f16(float16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_f16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdupq_laneq_f16",
        "intrinsic": "float16x8_t vdupq_laneq_f16(float16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_f16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vduph_lane_f16",
        "intrinsic": "float16_t vduph_lane_f16(float16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_lane_f16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vduph_laneq_f16",
        "intrinsic": "float16_t vduph_laneq_f16(float16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_laneq_f16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vext_f16",
        "intrinsic": "float16x4_t vext_f16(float16x4_t a, float16x4_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vext_f16",
        "argument_preparation": "a -> Vn.8B; b -> Vm.8B; 0 <= n <= 3",
        "aarch64_instruction": "EXT Vd.8B,Vn.8B,Vm.8B,#(n<<1)",
        "result": "Vd.8B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vextq_f16",
        "intrinsic": "float16x8_t vextq_f16(float16x8_t a, float16x8_t b, const int n)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vextq_f16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; 0 <= n <= 7",
        "aarch64_instruction": "EXT Vd.16B,Vn.16B,Vm.16B,#(n<<1)",
        "result": "Vd.16B -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64_f16",
        "intrinsic": "float16x4_t vrev64_f16(float16x4_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64_f16",
        "argument_preparation": "vec -> Vn.4H",
        "aarch64_instruction": "REV64 Vd.4H,Vn.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vrev64q_f16",
        "intrinsic": "float16x8_t vrev64q_f16(float16x8_t vec)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrev64q_f16",
        "argument_preparation": "vec -> Vn.8H",
        "aarch64_instruction": "REV64 Vd.8H,Vn.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      }
    ],
    "Move": [
      {
        "name": "vmov_n_f16",
        "intrinsic": "float16x4_t vmov_n_f16(float16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmov_n_f16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vmovq_n_f16",
        "intrinsic": "float16x8_t vmovq_n_f16(float16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmovq_n_f16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "v7/A32/A64"
      }
    ]
  },
  "Dot Product intrinsics added for ARMv8.2-a and newer. Requires the +dotprod architecture extension.": {
    "Vector arithmetic": [
      {
        "name": "vdot_u32",
        "intrinsic": "uint32x2_t vdot_u32(uint32x2_t r, uint8x8_t a, uint8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_u32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "UDOT Vd.2S,Vn.8B,Vm.8B",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdot_s32",
        "intrinsic": "int32x2_t vdot_s32(int32x2_t r, int8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_s32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "SDOT Vd.2S,Vn.8B,Vm.8B",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdotq_u32",
        "intrinsic": "uint32x4_t vdotq_u32(uint32x4_t r, uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_u32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UDOT Vd.4S,Vn.16B,Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdotq_s32",
        "intrinsic": "int32x4_t vdotq_s32(int32x4_t r, int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SDOT Vd.4S,Vn.16B,Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdot_lane_u32",
        "intrinsic": "uint32x2_t vdot_lane_u32(uint32x2_t r, uint8x8_t a, uint8x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_lane_u32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "UDOT Vd.2S,Vn.8B,Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdot_lane_s32",
        "intrinsic": "int32x2_t vdot_lane_s32(int32x2_t r, int8x8_t a, int8x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_lane_s32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "SDOT Vd.2S,Vn.8B,Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdotq_laneq_u32",
        "intrinsic": "uint32x4_t vdotq_laneq_u32(uint32x4_t r, uint8x16_t a, uint8x16_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_laneq_u32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "UDOT Vd.4S,Vn.16B,Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdotq_laneq_s32",
        "intrinsic": "int32x4_t vdotq_laneq_s32(int32x4_t r, int8x16_t a, int8x16_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_laneq_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "SDOT Vd.4S,Vn.16B,Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdot_laneq_u32",
        "intrinsic": "uint32x2_t vdot_laneq_u32(uint32x2_t r, uint8x8_t a, uint8x16_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_laneq_u32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "UDOT Vd.2S,Vn.8B,Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdot_laneq_s32",
        "intrinsic": "int32x2_t vdot_laneq_s32(int32x2_t r, int8x8_t a, int8x16_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_laneq_s32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "SDOT Vd.2S,Vn.8B,Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdotq_lane_u32",
        "intrinsic": "uint32x4_t vdotq_lane_u32(uint32x4_t r, uint8x16_t a, uint8x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_lane_u32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "UDOT Vd.4S,Vn.16B,Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdotq_lane_s32",
        "intrinsic": "int32x4_t vdotq_lane_s32(int32x4_t r, int8x16_t a, int8x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_lane_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "SDOT Vd.4S,Vn.16B,Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      }
    ]
  },
  "Armv8.4-a intrinsics.": {
    "Cryptography": [
      {
        "name": "vsha512hq_u64",
        "intrinsic": "uint64x2_t vsha512hq_u64(uint64x2_t hash_ed, uint64x2_t hash_gf, uint64x2_t kwh_kwh2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha512hq_u64",
        "argument_preparation": "hash_ed -> Qd; hash_gf -> Qn; kwh_kwh2 -> Vm.2D",
        "aarch64_instruction": "SHA512H Qd, Qn, Vm.2D",
        "result": "Qd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsha512h2q_u64",
        "intrinsic": "uint64x2_t vsha512h2q_u64(uint64x2_t sum_ab, uint64x2_t hash_c_, uint64x2_t hash_ab)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha512h2q_u64",
        "argument_preparation": "sum_ab -> Qd; hash_c_ -> Qn; hash_ab -> Vm.2D",
        "aarch64_instruction": "SHA512H2 Qd, Qn, Vm.2D",
        "result": "Qd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsha512su0q_u64",
        "intrinsic": "uint64x2_t vsha512su0q_u64(uint64x2_t w0_1, uint64x2_t w2_)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha512su0q_u64",
        "argument_preparation": "w0_1 -> Vd.2D; w2_ -> Vn.2D",
        "aarch64_instruction": "SHA512SU0 Vd.2D, Vn.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsha512su1q_u64",
        "intrinsic": "uint64x2_t vsha512su1q_u64(uint64x2_t s01_s02, uint64x2_t w14_15, uint64x2_t w9_10)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsha512su1q_u64",
        "argument_preparation": "s01_s02 -> Vd.2D; w14_15 -> Vn.2D; w9_10 -> Vm.2D",
        "aarch64_instruction": "SHA512SU1 Vd.2D, Vn.2D, Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm3ss1q_u32",
        "intrinsic": "uint32x4_t vsm3ss1q_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm3ss1q_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S; c -> Va.4S",
        "aarch64_instruction": "SM3SS1 Vd.4S, Vn.4S, Vm.4S, Va.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm3tt1aq_u32",
        "intrinsic": "uint32x4_t vsm3tt1aq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c, __builtin_constant_p (imm2))",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm3tt1aq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S; 0 <= imm2 <= 3",
        "aarch64_instruction": "SM3TT1A Vd.4S, Vn.4S, Vm.4S[imm2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm3tt1bq_u32",
        "intrinsic": "uint32x4_t vsm3tt1bq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c, __builtin_constant_p (imm2))",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm3tt1bq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S; 0 <= imm2 <= 3",
        "aarch64_instruction": "SM3TT1B Vd.4S, Vn.4S, Vm.4S[imm2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm3tt2aq_u32",
        "intrinsic": "uint32x4_t vsm3tt2aq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c, __builtin_constant_p (imm2))",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm3tt2aq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S; 0 <= imm2 <= 3",
        "aarch64_instruction": "SM3TT2A Vd.4S, Vn.4S, Vm.4S[imm2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm3tt2bq_u32",
        "intrinsic": "uint32x4_t vsm3tt2bq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c, __builtin_constant_p (imm2))",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm3tt2bq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S; 0 <= imm2 <= 3",
        "aarch64_instruction": "SM3TT2B Vd.4S, Vn.4S, Vm.4S[imm2]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm3partw1q_u32",
        "intrinsic": "uint32x4_t vsm3partw1q_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm3partw1q_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SM3PARTW1 Vd.4S, Vn.4S, Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm3partw2q_u32",
        "intrinsic": "uint32x4_t vsm3partw2q_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm3partw2q_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S; c -> Vm.4S",
        "aarch64_instruction": "SM3PARTW2 Vd.4S, Vn.4S, Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm4eq_u32",
        "intrinsic": "uint32x4_t vsm4eq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm4eq_u32",
        "argument_preparation": "a -> Vd.4S; b -> Vn.4S",
        "aarch64_instruction": "SM4E Vd.4S, Vn.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vsm4ekeyq_u32",
        "intrinsic": "uint32x4_t vsm4ekeyq_u32(uint32x4_t a, uint32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsm4ekeyq_u32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S;",
        "aarch64_instruction": "SM4EKEY Vd.4S, Vn.4S, Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      }
    ],
    "Logical": [
      {
        "name": "veor3q_u8",
        "intrinsic": "uint8x16_t veor3q_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor3q_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "veor3q_u16",
        "intrinsic": "uint16x8_t veor3q_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor3q_u16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "veor3q_u32",
        "intrinsic": "uint32x4_t veor3q_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor3q_u32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "veor3q_u64",
        "intrinsic": "uint64x2_t veor3q_u64(uint64x2_t a, uint64x2_t b, uint64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor3q_u64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "veor3q_s8",
        "intrinsic": "int8x16_t veor3q_s8(int8x16_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor3q_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "veor3q_s16",
        "intrinsic": "int16x8_t veor3q_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor3q_s16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "veor3q_s32",
        "intrinsic": "int32x4_t veor3q_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor3q_s32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "veor3q_s64",
        "intrinsic": "int64x2_t veor3q_s64(int64x2_t a, int64x2_t b, int64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/veor3q_s64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrax1q_u64",
        "intrinsic": "uint64x2_t vrax1q_u64(uint64x2_t a, uint64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrax1q_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "RAX1 Vd.2D, Vn.2D, Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vxarq_u64",
        "intrinsic": "uint64x2_t vxarq_u64(uint64x2_t a, uint64x2_t b, __builtin_constant_p (imm6))",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vxarq_u64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D; 0 <= imm6 <= 63",
        "aarch64_instruction": "XAR Vd.2D, Vn.2D, Vm.2D, imm6",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbcaxq_u8",
        "intrinsic": "uint8x16_t vbcaxq_u8(uint8x16_t a, uint8x16_t b, uint8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbcaxq_u8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbcaxq_u16",
        "intrinsic": "uint16x8_t vbcaxq_u16(uint16x8_t a, uint16x8_t b, uint16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbcaxq_u16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbcaxq_u32",
        "intrinsic": "uint32x4_t vbcaxq_u32(uint32x4_t a, uint32x4_t b, uint32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbcaxq_u32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbcaxq_u64",
        "intrinsic": "uint64x2_t vbcaxq_u64(uint64x2_t a, uint64x2_t b, uint64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbcaxq_u64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbcaxq_s8",
        "intrinsic": "int8x16_t vbcaxq_s8(int8x16_t a, int8x16_t b, int8x16_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbcaxq_s8",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbcaxq_s16",
        "intrinsic": "int16x8_t vbcaxq_s16(int16x8_t a, int16x8_t b, int16x8_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbcaxq_s16",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbcaxq_s32",
        "intrinsic": "int32x4_t vbcaxq_s32(int32x4_t a, int32x4_t b, int32x4_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbcaxq_s32",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vbcaxq_s64",
        "intrinsic": "int64x2_t vbcaxq_s64(int64x2_t a, int64x2_t b, int64x2_t c)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbcaxq_s64",
        "argument_preparation": "a -> Vn.16B; b -> Vm.16B; c -> Va.16B",
        "aarch64_instruction": "BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      }
    ]
  },
  "FP16 Armv8.4-a": {
    "Vector arithmetic": [
      {
        "name": "vfmlal_low_f16",
        "intrinsic": "float32x2_t vfmlal_low_f16(float32x2_t r, float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlal_low_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vd.2H",
        "aarch64_instruction": "FMLAL Vd.2S, Vn.2H, Vm.2H",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlsl_low_f16",
        "intrinsic": "float32x2_t vfmlsl_low_f16(float32x2_t r, float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlsl_low_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vd.2H",
        "aarch64_instruction": "FMLSL Vd.2S, Vn.2H, Vm.2H",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlalq_low_f16",
        "intrinsic": "float32x4_t vfmlalq_low_f16(float32x4_t r, float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlalq_low_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vd.4H",
        "aarch64_instruction": "FMLAL Vd.4S, Vn.4H, Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlslq_low_f16",
        "intrinsic": "float32x4_t vfmlslq_low_f16(float32x4_t r, float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlslq_low_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vd.4H",
        "aarch64_instruction": "FMLSL Vd.4S, Vn.4H, Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlal_high_f16",
        "intrinsic": "float32x2_t vfmlal_high_f16(float32x2_t r, float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlal_high_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vd.2H",
        "aarch64_instruction": "FMLAL2 Vd.2S, Vn.2H, Vm.2H",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlsl_high_f16",
        "intrinsic": "float32x2_t vfmlsl_high_f16(float32x2_t r, float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlsl_high_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vd.2H",
        "aarch64_instruction": "FMLSL2 Vd.2S, Vn.2H, Vm.2H",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlalq_high_f16",
        "intrinsic": "float32x4_t vfmlalq_high_f16(float32x4_t r, float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlalq_high_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vd.4H",
        "aarch64_instruction": "FMLAL2 Vd.4S, Vn.4H, Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlslq_high_f16",
        "intrinsic": "float32x4_t vfmlslq_high_f16(float32x4_t r, float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlslq_high_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vd.4H",
        "aarch64_instruction": "FMLSL2 Vd.4S, Vn.4H, Vm.4H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlal_lane_low_f16",
        "intrinsic": "float32x2_t vfmlal_lane_low_f16(float32x2_t r, float16x4_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlal_lane_low_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLAL Vd.2S, Vn.2H, Vm.H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlal_laneq_low_f16",
        "intrinsic": "float32x2_t vfmlal_laneq_low_f16(float32x2_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlal_laneq_low_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vm.H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLAL Vd.2S, Vn.2H, Vm.H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlalq_lane_low_f16",
        "intrinsic": "float32x4_t vfmlalq_lane_low_f16(float32x4_t r, float16x8_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlalq_lane_low_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLAL Vd.4S, Vn.4H, Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlalq_laneq_low_f16",
        "intrinsic": "float32x4_t vfmlalq_laneq_low_f16(float32x4_t r, float16x8_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlalq_laneq_low_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vm.H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLAL Vd.4S, Vn.4H, Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlsl_lane_low_f16",
        "intrinsic": "float32x2_t vfmlsl_lane_low_f16(float32x2_t r, float16x4_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlsl_lane_low_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLSL Vd.2S, Vn.2H, Vm.H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlsl_laneq_low_f16",
        "intrinsic": "float32x2_t vfmlsl_laneq_low_f16(float32x2_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlsl_laneq_low_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vm.H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLSL Vd.2S, Vn.2H, Vm.H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlslq_lane_low_f16",
        "intrinsic": "float32x4_t vfmlslq_lane_low_f16(float32x4_t r, float16x8_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlslq_lane_low_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLSL Vd.4S, Vn.4H, Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlslq_laneq_low_f16",
        "intrinsic": "float32x4_t vfmlslq_laneq_low_f16(float32x4_t r, float16x8_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlslq_laneq_low_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vm.H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLSL Vd.4S, Vn.4H, Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlal_lane_high_f16",
        "intrinsic": "float32x2_t vfmlal_lane_high_f16(float32x2_t r, float16x4_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlal_lane_high_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLAL2 Vd.2S, Vn.2H, Vm.H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlsl_lane_high_f16",
        "intrinsic": "float32x2_t vfmlsl_lane_high_f16(float32x2_t r, float16x4_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlsl_lane_high_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLSL2 Vd.2S, Vn.2H, Vm.H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlalq_lane_high_f16",
        "intrinsic": "float32x4_t vfmlalq_lane_high_f16(float32x4_t r, float16x8_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlalq_lane_high_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLAL2 Vd.4S, Vn.4H, Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlslq_lane_high_f16",
        "intrinsic": "float32x4_t vfmlslq_lane_high_f16(float32x4_t r, float16x8_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlslq_lane_high_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FMLSL2 Vd.4S, Vn.4H, Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlal_laneq_high_f16",
        "intrinsic": "float32x2_t vfmlal_laneq_high_f16(float32x2_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlal_laneq_high_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vm.H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLAL2 Vd.2S, Vn.2H, Vm.H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlsl_laneq_high_f16",
        "intrinsic": "float32x2_t vfmlsl_laneq_high_f16(float32x2_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlsl_laneq_high_f16",
        "argument_preparation": "r -> Vd.2S; a -> Vd.2H; b -> Vm.H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLSL2 Vd.2S, Vn.2H, Vm.H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlalq_laneq_high_f16",
        "intrinsic": "float32x4_t vfmlalq_laneq_high_f16(float32x4_t r, float16x8_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlalq_laneq_high_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vm.H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLAL2 Vd.4S, Vn.4H, Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vfmlslq_laneq_high_f16",
        "intrinsic": "float32x4_t vfmlslq_laneq_high_f16(float32x4_t r, float16x8_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vfmlslq_laneq_high_f16",
        "argument_preparation": "r -> Vd.4S; a -> Vd.4H; b -> Vm.H; 0 <= lane <= 7",
        "aarch64_instruction": "FMLSL2 Vd.4S, Vn.4H, Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      }
    ]
  },
  "Complex operations from Armv8.3-a": {
    "Complex arithmetic": [
      {
        "name": "vcadd_rot90_f16",
        "intrinsic": "float16x4_t vcadd_rot90_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcadd_rot90_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCADD Vd.4H, Vn.4H, Vm.4H, #90",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcadd_rot90_f32",
        "intrinsic": "float32x2_t vcadd_rot90_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcadd_rot90_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCADD Vd.2S, Vn.2S, Vm.2S, #90",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcaddq_rot90_f16",
        "intrinsic": "float16x8_t vcaddq_rot90_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaddq_rot90_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCADD Vd.8H, Vn.8H, Vm.8H, #90",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcaddq_rot90_f32",
        "intrinsic": "float32x4_t vcaddq_rot90_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaddq_rot90_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCADD Vd.4S, Vn.4S, Vm.4S, #90",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcaddq_rot90_f64",
        "intrinsic": "float64x2_t vcaddq_rot90_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaddq_rot90_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCADD Vd.2D, Vn.2D, Vm.2D, #90",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcadd_rot270_f16",
        "intrinsic": "float16x4_t vcadd_rot270_f16(float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcadd_rot270_f16",
        "argument_preparation": "a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCADD Vd.4H, Vn.4H, Vm.4H, #270",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcadd_rot270_f32",
        "intrinsic": "float32x2_t vcadd_rot270_f32(float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcadd_rot270_f32",
        "argument_preparation": "a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCADD Vd.2S, Vn.2S, Vm.2S, #270",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcaddq_rot270_f16",
        "intrinsic": "float16x8_t vcaddq_rot270_f16(float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaddq_rot270_f16",
        "argument_preparation": "a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCADD Vd.8H, Vn.8H, Vm.8H, #270",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcaddq_rot270_f32",
        "intrinsic": "float32x4_t vcaddq_rot270_f32(float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaddq_rot270_f32",
        "argument_preparation": "a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCADD Vd.4S, Vn.4S, Vm.4S, #270",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcaddq_rot270_f64",
        "intrinsic": "float64x2_t vcaddq_rot270_f64(float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcaddq_rot270_f64",
        "argument_preparation": "a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCADD Vd.2D, Vn.2D, Vm.2D, #270",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcmla_f16",
        "intrinsic": "float16x4_t vcmla_f16(float16x4_t r, float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.4H, #0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_f32",
        "intrinsic": "float32x2_t vcmla_f32(float32x2_t r, float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMLA Vd.2S, Vn.2S, Vm.2S, #0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_f16",
        "intrinsic": "float16x8_t vcmlaq_f16(float16x8_t r, float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.8H, #0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_f32",
        "intrinsic": "float32x4_t vcmlaq_f32(float32x4_t r, float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.4S, #0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_f64",
        "intrinsic": "float64x2_t vcmlaq_f64(float64x2_t r, float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_f64",
        "argument_preparation": "r -> Vd.2D; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMLA Vd.2D, Vn.2D, Vm.2D, #0",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcmla_rot90_f16",
        "intrinsic": "float16x4_t vcmla_rot90_f16(float16x4_t r, float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot90_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.4H, #90",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot90_f32",
        "intrinsic": "float32x2_t vcmla_rot90_f32(float32x2_t r, float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot90_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMLA Vd.2S, Vn.2S, Vm.2S, #90",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot90_f16",
        "intrinsic": "float16x8_t vcmlaq_rot90_f16(float16x8_t r, float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot90_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.8H, #90",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot90_f32",
        "intrinsic": "float32x4_t vcmlaq_rot90_f32(float32x4_t r, float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot90_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.4S, #90",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot90_f64",
        "intrinsic": "float64x2_t vcmlaq_rot90_f64(float64x2_t r, float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot90_f64",
        "argument_preparation": "r -> Vd.2D; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMLA Vd.2D, Vn.2D, Vm.2D, #90",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcmla_rot180_f16",
        "intrinsic": "float16x4_t vcmla_rot180_f16(float16x4_t r, float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot180_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.4H, #180",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot180_f32",
        "intrinsic": "float32x2_t vcmla_rot180_f32(float32x2_t r, float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot180_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMLA Vd.2S, Vn.2S, Vm.2S, #180",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot180_f16",
        "intrinsic": "float16x8_t vcmlaq_rot180_f16(float16x8_t r, float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot180_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.8H, #180",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot180_f32",
        "intrinsic": "float32x4_t vcmlaq_rot180_f32(float32x4_t r, float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot180_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.4S, #180",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot180_f64",
        "intrinsic": "float64x2_t vcmlaq_rot180_f64(float64x2_t r, float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot180_f64",
        "argument_preparation": "r -> Vd.2D; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMLA Vd.2D, Vn.2D, Vm.2D, #180",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcmla_rot270_f16",
        "intrinsic": "float16x4_t vcmla_rot270_f16(float16x4_t r, float16x4_t a, float16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot270_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.4H, #270",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot270_f32",
        "intrinsic": "float32x2_t vcmla_rot270_f32(float32x2_t r, float32x2_t a, float32x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot270_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.2S",
        "aarch64_instruction": "FCMLA Vd.2S, Vn.2S, Vm.2S, #270",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot270_f16",
        "intrinsic": "float16x8_t vcmlaq_rot270_f16(float16x8_t r, float16x8_t a, float16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot270_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.8H, #270",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot270_f32",
        "intrinsic": "float32x4_t vcmlaq_rot270_f32(float32x4_t r, float32x4_t a, float32x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot270_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.4S",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.4S, #270",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot270_f64",
        "intrinsic": "float64x2_t vcmlaq_rot270_f64(float64x2_t r, float64x2_t a, float64x2_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot270_f64",
        "argument_preparation": "r -> Vd.2D; a -> Vn.2D; b -> Vm.2D",
        "aarch64_instruction": "FCMLA Vd.2D, Vn.2D, Vm.2D, #270",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcmla_lane_f16",
        "intrinsic": "float16x4_t vcmla_lane_f16(float16x4_t r, float16x4_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_lane_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.H[lane], #0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_lane_f32",
        "intrinsic": "float32x2_t vcmla_lane_f32(float32x2_t r, float32x2_t a, float32x2_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_lane_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.S; 0 <= lane <= 0",
        "aarch64_instruction": "FCMLA Vd.2S, Vn.2S, Vm.2S, #0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_laneq_f16",
        "intrinsic": "float16x4_t vcmla_laneq_f16(float16x4_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_laneq_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.H[lane], #0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_laneq_f16",
        "intrinsic": "float16x4_t vcmla_laneq_f16(float16x4_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_laneq_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 2 <= lane <= 3",
        "aarch64_instruction": "DUP Dm, Vm.D[1]; FCMLA Vd.4H, Vn.4H, Vm.H[lane % 2], #0",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_laneq_f32",
        "intrinsic": "float32x2_t vcmla_laneq_f32(float32x2_t r, float32x2_t a, float32x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_laneq_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dm, Vm.D[1]; FCMLA Vd.2S, Vn.2S, Vm.2S, #0",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_lane_f16",
        "intrinsic": "float16x8_t vcmlaq_lane_f16(float16x8_t r, float16x8_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_lane_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.H[lane], #0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_lane_f32",
        "intrinsic": "float32x4_t vcmlaq_lane_f32(float32x4_t r, float32x4_t a, float32x2_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_lane_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.S; 0 <= lane <= 0",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.S[lane], #0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_laneq_f16",
        "intrinsic": "float16x8_t vcmlaq_laneq_f16(float16x8_t r, float16x8_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_laneq_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.H[lane], #0",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_laneq_f32",
        "intrinsic": "float32x4_t vcmlaq_laneq_f32(float32x4_t r, float32x4_t a, float32x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_laneq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.S; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.S[lane], #0",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot90_lane_f16",
        "intrinsic": "float16x4_t vcmla_rot90_lane_f16(float16x4_t r, float16x4_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot90_lane_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.H[lane], #90",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot90_lane_f32",
        "intrinsic": "float32x2_t vcmla_rot90_lane_f32(float32x2_t r, float32x2_t a, float32x2_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot90_lane_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.S; 0 <= lane <= 0",
        "aarch64_instruction": "FCMLA Vd.2S, Vn.2S, Vm.2S, #90",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot90_laneq_f16",
        "intrinsic": "float16x4_t vcmla_rot90_laneq_f16(float16x4_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot90_laneq_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.H[lane], #90",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot90_laneq_f16",
        "intrinsic": "float16x4_t vcmla_rot90_laneq_f16(float16x4_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot90_laneq_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 2 <= lane <= 3",
        "aarch64_instruction": "DUP Dm, Vm.D[1]; FCMLA Vd.4H, Vn.4H, Vm.H[lane % 2], #90",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot90_laneq_f32",
        "intrinsic": "float32x2_t vcmla_rot90_laneq_f32(float32x2_t r, float32x2_t a, float32x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot90_laneq_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dm, Vm.D[1]; FCMLA Vd.2S, Vn.2S, Vm.2S, #90",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot90_lane_f16",
        "intrinsic": "float16x8_t vcmlaq_rot90_lane_f16(float16x8_t r, float16x8_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot90_lane_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.H[lane], #90",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot90_lane_f32",
        "intrinsic": "float32x4_t vcmlaq_rot90_lane_f32(float32x4_t r, float32x4_t a, float32x2_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot90_lane_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.S; 0 <= lane <= 0",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.S[lane], #90",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot90_laneq_f16",
        "intrinsic": "float16x8_t vcmlaq_rot90_laneq_f16(float16x8_t r, float16x8_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot90_laneq_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.H[lane], #90",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot90_laneq_f32",
        "intrinsic": "float32x4_t vcmlaq_rot90_laneq_f32(float32x4_t r, float32x4_t a, float32x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot90_laneq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.S; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.S[lane], #90",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot180_lane_f16",
        "intrinsic": "float16x4_t vcmla_rot180_lane_f16(float16x4_t r, float16x4_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot180_lane_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.H[lane], #180",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot180_lane_f32",
        "intrinsic": "float32x2_t vcmla_rot180_lane_f32(float32x2_t r, float32x2_t a, float32x2_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot180_lane_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.S; 0 <= lane <= 0",
        "aarch64_instruction": "FCMLA Vd.2S, Vn.2S, Vm.2S, #180",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot180_laneq_f16",
        "intrinsic": "float16x4_t vcmla_rot180_laneq_f16(float16x4_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot180_laneq_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.H[lane], #180",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot180_laneq_f16",
        "intrinsic": "float16x4_t vcmla_rot180_laneq_f16(float16x4_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot180_laneq_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 2 <= lane <= 3",
        "aarch64_instruction": "DUP Dm, Vm.D[1]; FCMLA Vd.4H, Vn.4H, Vm.H[lane % 2], #180",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot180_laneq_f32",
        "intrinsic": "float32x2_t vcmla_rot180_laneq_f32(float32x2_t r, float32x2_t a, float32x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot180_laneq_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dm, Vm.D[1]; FCMLA Vd.2S, Vn.2S, Vm.2S, #180",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot180_lane_f16",
        "intrinsic": "float16x8_t vcmlaq_rot180_lane_f16(float16x8_t r, float16x8_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot180_lane_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.H[lane], #180",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot180_lane_f32",
        "intrinsic": "float32x4_t vcmlaq_rot180_lane_f32(float32x4_t r, float32x4_t a, float32x2_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot180_lane_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.S; 0 <= lane <= 0",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.S[lane], #180",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot180_laneq_f16",
        "intrinsic": "float16x8_t vcmlaq_rot180_laneq_f16(float16x8_t r, float16x8_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot180_laneq_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.H[lane], #180",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot180_laneq_f32",
        "intrinsic": "float32x4_t vcmlaq_rot180_laneq_f32(float32x4_t r, float32x4_t a, float32x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot180_laneq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.S; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.S[lane], #180",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot270_lane_f16",
        "intrinsic": "float16x4_t vcmla_rot270_lane_f16(float16x4_t r, float16x4_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot270_lane_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.H[lane], #270",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot270_lane_f32",
        "intrinsic": "float32x2_t vcmla_rot270_lane_f32(float32x2_t r, float32x2_t a, float32x2_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot270_lane_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.S; 0 <= lane <= 0",
        "aarch64_instruction": "FCMLA Vd.2S, Vn.2S, Vm.2S, #270",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot270_laneq_f16",
        "intrinsic": "float16x4_t vcmla_rot270_laneq_f16(float16x4_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot270_laneq_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4H, Vn.4H, Vm.H[lane], #270",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot270_laneq_f16",
        "intrinsic": "float16x4_t vcmla_rot270_laneq_f16(float16x4_t r, float16x4_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot270_laneq_f16",
        "argument_preparation": "r -> Vd.4H; a -> Vn.4H; b -> Vm.H; 2 <= lane <= 3",
        "aarch64_instruction": "DUP Dm, Vm.D[1]; FCMLA Vd.4H, Vn.4H, Vm.H[lane % 2], #270",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmla_rot270_laneq_f32",
        "intrinsic": "float32x2_t vcmla_rot270_laneq_f32(float32x2_t r, float32x2_t a, float32x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmla_rot270_laneq_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.2S; b -> Vm.S; 0 <= lane <= 1",
        "aarch64_instruction": "DUP Dm, Vm.D[1]; FCMLA Vd.2S, Vn.2S, Vm.2S, #270",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot270_lane_f16",
        "intrinsic": "float16x8_t vcmlaq_rot270_lane_f16(float16x8_t r, float16x8_t a, float16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot270_lane_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.H; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.H[lane], #270",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot270_lane_f32",
        "intrinsic": "float32x4_t vcmlaq_rot270_lane_f32(float32x4_t r, float32x4_t a, float32x2_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot270_lane_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.S; 0 <= lane <= 0",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.S[lane], #270",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot270_laneq_f16",
        "intrinsic": "float16x8_t vcmlaq_rot270_laneq_f16(float16x8_t r, float16x8_t a, float16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot270_laneq_f16",
        "argument_preparation": "r -> Vd.8H; a -> Vn.8H; b -> Vm.H; 0 <= lane <= 3",
        "aarch64_instruction": "FCMLA Vd.8H, Vn.8H, Vm.H[lane], #270",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcmlaq_rot270_laneq_f32",
        "intrinsic": "float32x4_t vcmlaq_rot270_laneq_f32(float32x4_t r, float32x4_t a, float32x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcmlaq_rot270_laneq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.4S; b -> Vm.S; 0 <= lane <= 1",
        "aarch64_instruction": "FCMLA Vd.4S, Vn.4S, Vm.S[lane], #270",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      }
    ]
  },
  "Floating-point rounding intrinsics from Armv8.5-A": {
    "Vector arithmetic": [
      {
        "name": "vrnd32z_f32",
        "intrinsic": "float32x2_t vrnd32z_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd32z_f32",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT32Z Vd.2S,Vn.2S",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd32zq_f32",
        "intrinsic": "float32x4_t vrnd32zq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd32zq_f32",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT32Z Vd.4S,Vn.4S",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd32z_f64",
        "intrinsic": "float64x1_t vrnd32z_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd32z_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINT32Z Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd32zq_f64",
        "intrinsic": "float64x2_t vrnd32zq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd32zq_f64",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT32Z Vd.2D,Vn.2D",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd64z_f32",
        "intrinsic": "float32x2_t vrnd64z_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd64z_f32",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT64Z Vd.2S,Vn.2S",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd64zq_f32",
        "intrinsic": "float32x4_t vrnd64zq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd64zq_f32",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT64Z Vd.4S,Vn.4S",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd64z_f64",
        "intrinsic": "float64x1_t vrnd64z_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd64z_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINT64Z Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd64zq_f64",
        "intrinsic": "float64x2_t vrnd64zq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd64zq_f64",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT64Z Vd.2D,Vn.2D",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd32x_f32",
        "intrinsic": "float32x2_t vrnd32x_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd32x_f32",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT32X Vd.2S,Vn.2S",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd32xq_f32",
        "intrinsic": "float32x4_t vrnd32xq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd32xq_f32",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT32X Vd.4S,Vn.4S",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd32x_f64",
        "intrinsic": "float64x1_t vrnd32x_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd32x_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINT32X Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd32xq_f64",
        "intrinsic": "float64x2_t vrnd32xq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd32xq_f64",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT32X Vd.2D,Vn.2D",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd64x_f32",
        "intrinsic": "float32x2_t vrnd64x_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd64x_f32",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT64X Vd.2S,Vn.2S",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd64xq_f32",
        "intrinsic": "float32x4_t vrnd64xq_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd64xq_f32",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT64X Vd.4S,Vn.4S",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd64x_f64",
        "intrinsic": "float64x1_t vrnd64x_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd64x_f64",
        "argument_preparation": "a -> Dn",
        "aarch64_instruction": "FRINT64X Dd,Dn",
        "result": "Dd -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vrnd64xq_f64",
        "intrinsic": "float64x2_t vrnd64xq_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vrnd64xq_f64",
        "argument_preparation": "a -> Vn",
        "aarch64_instruction": "FRINT64X Vd.2D,Vn.2D",
        "result": "Vd -> result",
        "supported_architectures": "A64"
      }
    ]
  },
  "Matrix multiplication intrinsics from Armv8.6-A": {
    "Vector arithmetic": [
      {
        "name": "vmmlaq_s32",
        "intrinsic": "int32x4_t vmmlaq_s32(int32x4_t r, int8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmmlaq_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "SMMLA Vd.4S,Vn.16B,Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vmmlaq_u32",
        "intrinsic": "uint32x4_t vmmlaq_u32(uint32x4_t r, uint8x16_t a, uint8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmmlaq_u32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "UMMLA Vd.4S,Vn.16B,Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vusmmlaq_s32",
        "intrinsic": "int32x4_t vusmmlaq_s32(int32x4_t r, uint8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vusmmlaq_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "USMMLA Vd.4S,Vn.16B,Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vusdot_s32",
        "intrinsic": "int32x2_t vusdot_s32(int32x2_t r, uint8x8_t a, int8x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vusdot_s32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.8B",
        "aarch64_instruction": "USDOT Vd.2S,Vn.8B,Vm.8B",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vusdot_lane_s32",
        "intrinsic": "int32x2_t vusdot_lane_s32(int32x2_t r, uint8x8_t a, int8x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vusdot_lane_s32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "USDOT Vd.2S,Vn.8B,Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsudot_lane_s32",
        "intrinsic": "int32x2_t vsudot_lane_s32(int32x2_t r, int8x8_t a, uint8x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsudot_lane_s32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "SUDOT Vd.2S,Vn.8B,Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vusdot_laneq_s32",
        "intrinsic": "int32x2_t vusdot_laneq_s32(int32x2_t r, uint8x8_t a, int8x16_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vusdot_laneq_s32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "USDOT Vd.2S,Vn.8B,Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsudot_laneq_s32",
        "intrinsic": "int32x2_t vsudot_laneq_s32(int32x2_t r, int8x8_t a, uint8x16_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsudot_laneq_s32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "SUDOT Vd.2S,Vn.8B,Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vusdotq_s32",
        "intrinsic": "int32x4_t vusdotq_s32(int32x4_t r, uint8x16_t a, int8x16_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vusdotq_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.16B",
        "aarch64_instruction": "USDOT Vd.4S,Vn.16B,Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vusdotq_lane_s32",
        "intrinsic": "int32x4_t vusdotq_lane_s32(int32x4_t r, uint8x16_t a, int8x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vusdotq_lane_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "USDOT Vd.4S,Vn.16B,Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsudotq_lane_s32",
        "intrinsic": "int32x4_t vsudotq_lane_s32(int32x4_t r, int8x16_t a, uint8x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsudotq_lane_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "SUDOT Vd.4S,Vn.16B,Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vusdotq_laneq_s32",
        "intrinsic": "int32x4_t vusdotq_laneq_s32(int32x4_t r, uint8x16_t a, int8x16_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vusdotq_laneq_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.16B; b -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "USDOT Vd.4S,Vn.16B,Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsudotq_laneq_s32",
        "intrinsic": "int32x4_t vsudotq_laneq_s32(int32x4_t r, int8x16_t a, uint8x16_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsudotq_laneq_s32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8B; b -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "SUDOT Vd.4S,Vn.16B,Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      }
    ]
  },
  "Bfloat16 intrinsics Requires the +bf16 architecture extension.": {
    "Vector manipulation": [
      {
        "name": "vcreate_bf16",
        "intrinsic": "bfloat16x4_t vcreate_bf16(uint64_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcreate_bf16",
        "argument_preparation": "a -> Xn",
        "aarch64_instruction": "INS Vd.D[0],Xn",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdup_n_bf16",
        "intrinsic": "bfloat16x4_t vdup_n_bf16(bfloat16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_n_bf16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.4H,rn",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdupq_n_bf16",
        "intrinsic": "bfloat16x8_t vdupq_n_bf16(bfloat16_t value)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_n_bf16",
        "argument_preparation": "value -> rn",
        "aarch64_instruction": "DUP Vd.8H,rn",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdup_lane_bf16",
        "intrinsic": "bfloat16x4_t vdup_lane_bf16(bfloat16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_lane_bf16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdupq_lane_bf16",
        "intrinsic": "bfloat16x8_t vdupq_lane_bf16(bfloat16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_lane_bf16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdup_laneq_bf16",
        "intrinsic": "bfloat16x4_t vdup_laneq_bf16(bfloat16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdup_laneq_bf16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.4H,Vn.H[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vdupq_laneq_bf16",
        "intrinsic": "bfloat16x8_t vdupq_laneq_bf16(bfloat16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdupq_laneq_bf16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Vd.8H,Vn.H[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vduph_lane_bf16",
        "intrinsic": "bfloat16_t vduph_lane_bf16(bfloat16x4_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_lane_bf16",
        "argument_preparation": "vec -> Vn.4H; 0 <= lane <= 3",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vduph_laneq_bf16",
        "intrinsic": "bfloat16_t vduph_laneq_bf16(bfloat16x8_t vec, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vduph_laneq_bf16",
        "argument_preparation": "vec -> Vn.8H; 0 <= lane <= 7",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcombine_bf16",
        "intrinsic": "bfloat16x8_t vcombine_bf16(bfloat16x4_t low, bfloat16x4_t high)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcombine_bf16",
        "argument_preparation": "low -> Vn.4H; high -> Vm.4H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]; INS Vd.D[1],Vm.D[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vget_high_bf16",
        "intrinsic": "bfloat16x4_t vget_high_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_high_bf16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[1]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vget_low_bf16",
        "intrinsic": "bfloat16x4_t vget_low_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_low_bf16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "DUP Vd.1D,Vn.D[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vget_lane_bf16",
        "intrinsic": "bfloat16_t vget_lane_bf16(bfloat16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vget_lane_bf16",
        "argument_preparation": "0<=lane<=3; v -> Vn.4H",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vgetq_lane_bf16",
        "intrinsic": "bfloat16_t vgetq_lane_bf16(bfloat16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vgetq_lane_bf16",
        "argument_preparation": "0<=lane<=7; v -> Vn.8H",
        "aarch64_instruction": "DUP Hd,Vn.H[lane]",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vset_lane_bf16",
        "intrinsic": "bfloat16x4_t vset_lane_bf16(bfloat16_t a, bfloat16x4_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vset_lane_bf16",
        "argument_preparation": "0<=lane<=3; a -> VnH; v -> Vd.4H",
        "aarch64_instruction": "INS Vd.H[lane],Vn.H[0]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vsetq_lane_bf16",
        "intrinsic": "bfloat16x8_t vsetq_lane_bf16(bfloat16_t a, bfloat16x8_t v, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vsetq_lane_bf16",
        "argument_preparation": "0<=lane<=7; a -> VnH; v -> Vd.8H",
        "aarch64_instruction": "INS Vd.H[lane],Vn.H[0]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcopy_lane_bf16",
        "intrinsic": "bfloat16x4_t vcopy_lane_bf16(bfloat16x4_t a, const int lane1, bfloat16x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_lane_bf16",
        "argument_preparation": "a -> Vd.4H; 0 <= lane1 <= 3; b -> Vn.4H; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_lane_bf16",
        "intrinsic": "bfloat16x8_t vcopyq_lane_bf16(bfloat16x8_t a, const int lane1, bfloat16x4_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_lane_bf16",
        "argument_preparation": "a -> Vd.8H; 0 <= lane1 <= 7; b -> Vn.4H; 0 <= lane2 <= 3",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopy_laneq_bf16",
        "intrinsic": "bfloat16x4_t vcopy_laneq_bf16(bfloat16x4_t a, const int lane1, bfloat16x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopy_laneq_bf16",
        "argument_preparation": "a -> Vd.4H; 0 <= lane1 <= 3; b -> Vn.8H; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcopyq_laneq_bf16",
        "intrinsic": "bfloat16x8_t vcopyq_laneq_bf16(bfloat16x8_t a, const int lane1, bfloat16x8_t b, const int lane2)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcopyq_laneq_bf16",
        "argument_preparation": "a -> Vd.8H; 0 <= lane1 <= 7; b -> Vn.8H; 0 <= lane2 <= 7",
        "aarch64_instruction": "INS Vd.H[lane1],Vn.H[lane2]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      }
    ],
    "Load": [
      {
        "name": "vld1_bf16",
        "intrinsic": "bfloat16x4_t vld1_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_bf16",
        "intrinsic": "bfloat16x8_t vld1q_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_lane_bf16",
        "intrinsic": "bfloat16x4_t vld1_lane_bf16(bfloat16_t const *ptr, bfloat16x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_lane_bf16",
        "argument_preparation": "ptr -> Xn; src -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_lane_bf16",
        "intrinsic": "bfloat16x8_t vld1q_lane_bf16(bfloat16_t const *ptr, bfloat16x8_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_lane_bf16",
        "argument_preparation": "ptr -> Xn; src -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD1 {Vt.H}[lane],[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_dup_bf16",
        "intrinsic": "bfloat16x4_t vld1_dup_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_dup_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.4H},[Xn]",
        "result": "Vt.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_dup_bf16",
        "intrinsic": "bfloat16x8_t vld1q_dup_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_dup_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1R {Vt.8H},[Xn]",
        "result": "Vt.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld2_bf16",
        "intrinsic": "bfloat16x4x2_t vld2_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld2q_bf16",
        "intrinsic": "bfloat16x8x2_t vld2q_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld3_bf16",
        "intrinsic": "bfloat16x4x3_t vld3_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld3q_bf16",
        "intrinsic": "bfloat16x8x3_t vld3q_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld4_bf16",
        "intrinsic": "bfloat16x4x4_t vld4_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld4q_bf16",
        "intrinsic": "bfloat16x8x4_t vld4q_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld2_dup_bf16",
        "intrinsic": "bfloat16x4x2_t vld2_dup_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_dup_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld2q_dup_bf16",
        "intrinsic": "bfloat16x8x2_t vld2q_dup_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_dup_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD2R {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld3_dup_bf16",
        "intrinsic": "bfloat16x4x3_t vld3_dup_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_dup_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld3q_dup_bf16",
        "intrinsic": "bfloat16x8x3_t vld3q_dup_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_dup_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD3R {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld4_dup_bf16",
        "intrinsic": "bfloat16x4x4_t vld4_dup_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_dup_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld4q_dup_bf16",
        "intrinsic": "bfloat16x8x4_t vld4q_dup_bf16(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_dup_bf16",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD4R {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld2_lane_bf16",
        "intrinsic": "bfloat16x4x2_t vld2_lane_bf16(bfloat16_t const *ptr, bfloat16x4x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2_lane_bf16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld2q_lane_bf16",
        "intrinsic": "bfloat16x8x2_t vld2q_lane_bf16(bfloat16_t const *ptr, bfloat16x8x2_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld2q_lane_bf16",
        "argument_preparation": "ptr -> Xn; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld3_lane_bf16",
        "intrinsic": "bfloat16x4x3_t vld3_lane_bf16(bfloat16_t const *ptr, bfloat16x4x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3_lane_bf16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld3q_lane_bf16",
        "intrinsic": "bfloat16x8x3_t vld3q_lane_bf16(bfloat16_t const *ptr, bfloat16x8x3_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld3q_lane_bf16",
        "argument_preparation": "ptr -> Xn; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld4_lane_bf16",
        "intrinsic": "bfloat16x4x4_t vld4_lane_bf16(bfloat16_t const *ptr, bfloat16x4x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4_lane_bf16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.4H; src.val[2] -> Vt3.4H; src.val[1] -> Vt2.4H; src.val[0] -> Vt.4H; 0 <= lane <= 3",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld4q_lane_bf16",
        "intrinsic": "bfloat16x8x4_t vld4q_lane_bf16(bfloat16_t const *ptr, bfloat16x8x4_t src, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld4q_lane_bf16",
        "argument_preparation": "ptr -> Xn; src.val[3] -> Vt4.8H; src.val[2] -> Vt3.8H; src.val[1] -> Vt2.8H; src.val[0] -> Vt.8H; 0 <= lane <= 7",
        "aarch64_instruction": "LD4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_bf16_x2",
        "intrinsic": "bfloat16x4x2_t vld1_bf16_x2(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_bf16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_bf16_x2",
        "intrinsic": "bfloat16x8x2_t vld1q_bf16_x2(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_bf16_x2",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1_bf16_x3",
        "intrinsic": "bfloat16x4x3_t vld1_bf16_x3(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_bf16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1q_bf16_x3",
        "intrinsic": "bfloat16x8x3_t vld1q_bf16_x3(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_bf16_x3",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "v7/A32/A64"
      },
      {
        "name": "vld1_bf16_x4",
        "intrinsic": "bfloat16x4x4_t vld1_bf16_x4(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1_bf16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "Vt4.4H -> result.val[3]; Vt3.4H -> result.val[2]; Vt2.4H -> result.val[1]; Vt.4H -> result.val[0]",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vld1q_bf16_x4",
        "intrinsic": "bfloat16x8x4_t vld1q_bf16_x4(bfloat16_t const *ptr)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vld1q_bf16_x4",
        "argument_preparation": "ptr -> Xn",
        "aarch64_instruction": "LD1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "Vt4.8H -> result.val[3]; Vt3.8H -> result.val[2]; Vt2.8H -> result.val[1]; Vt.8H -> result.val[0]",
        "supported_architectures": "A32/A64"
      }
    ],
    "Store": [
      {
        "name": "vst1_bf16",
        "intrinsic": "void vst1_bf16(bfloat16_t *ptr, bfloat16x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_bf16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_bf16",
        "intrinsic": "void vst1q_bf16(bfloat16_t *ptr, bfloat16x8_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_bf16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1_lane_bf16",
        "intrinsic": "void vst1_lane_bf16(bfloat16_t *ptr, bfloat16x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_lane_bf16",
        "argument_preparation": "val -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_lane_bf16",
        "intrinsic": "void vst1q_lane_bf16(bfloat16_t *ptr, bfloat16x8_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_lane_bf16",
        "argument_preparation": "val -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST1 {Vt.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst2_bf16",
        "intrinsic": "void vst2_bf16(bfloat16_t *ptr, bfloat16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_bf16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst2q_bf16",
        "intrinsic": "void vst2q_bf16(bfloat16_t *ptr, bfloat16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_bf16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST2 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst3_bf16",
        "intrinsic": "void vst3_bf16(bfloat16_t *ptr, bfloat16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_bf16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst3q_bf16",
        "intrinsic": "void vst3q_bf16(bfloat16_t *ptr, bfloat16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_bf16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST3 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst4_bf16",
        "intrinsic": "void vst4_bf16(bfloat16_t *ptr, bfloat16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_bf16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst4q_bf16",
        "intrinsic": "void vst4q_bf16(bfloat16_t *ptr, bfloat16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_bf16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST4 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst2_lane_bf16",
        "intrinsic": "void vst2_lane_bf16(bfloat16_t *ptr, bfloat16x4x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2_lane_bf16",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst2q_lane_bf16",
        "intrinsic": "void vst2q_lane_bf16(bfloat16_t *ptr, bfloat16x8x2_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst2q_lane_bf16",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST2 {Vt.h - Vt2.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst3_lane_bf16",
        "intrinsic": "void vst3_lane_bf16(bfloat16_t *ptr, bfloat16x4x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3_lane_bf16",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst3q_lane_bf16",
        "intrinsic": "void vst3q_lane_bf16(bfloat16_t *ptr, bfloat16x8x3_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst3q_lane_bf16",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST3 {Vt.h - Vt3.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst4_lane_bf16",
        "intrinsic": "void vst4_lane_bf16(bfloat16_t *ptr, bfloat16x4x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4_lane_bf16",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn; 0 <= lane <= 3",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst4q_lane_bf16",
        "intrinsic": "void vst4q_lane_bf16(bfloat16_t *ptr, bfloat16x8x4_t val, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst4q_lane_bf16",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn; 0 <= lane <= 7",
        "aarch64_instruction": "ST4 {Vt.h - Vt4.h}[lane],[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1_bf16_x2",
        "intrinsic": "void vst1_bf16_x2(bfloat16_t *ptr, bfloat16x4x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_bf16_x2",
        "argument_preparation": "val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt2.4H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_bf16_x2",
        "intrinsic": "void vst1q_bf16_x2(bfloat16_t *ptr, bfloat16x8x2_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_bf16_x2",
        "argument_preparation": "val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt2.8H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1_bf16_x3",
        "intrinsic": "void vst1_bf16_x3(bfloat16_t *ptr, bfloat16x4x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_bf16_x3",
        "argument_preparation": "val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt3.4H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_bf16_x3",
        "intrinsic": "void vst1q_bf16_x3(bfloat16_t *ptr, bfloat16x8x3_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_bf16_x3",
        "argument_preparation": "val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt3.8H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1_bf16_x4",
        "intrinsic": "void vst1_bf16_x4(bfloat16_t *ptr, bfloat16x4x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1_bf16_x4",
        "argument_preparation": "val.val[3] -> Vt4.4H; val.val[2] -> Vt3.4H; val.val[1] -> Vt2.4H; val.val[0] -> Vt.4H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.4H - Vt4.4H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vst1q_bf16_x4",
        "intrinsic": "void vst1q_bf16_x4(bfloat16_t *ptr, bfloat16x8x4_t val)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vst1q_bf16_x4",
        "argument_preparation": "val.val[3] -> Vt4.8H; val.val[2] -> Vt3.8H; val.val[1] -> Vt2.8H; val.val[0] -> Vt.8H; ptr -> Xn",
        "aarch64_instruction": "ST1 {Vt.8H - Vt4.8H},[Xn]",
        "result": "",
        "supported_architectures": "A32/A64"
      }
    ],
    "Data type conversion": [
      {
        "name": "vreinterpret_bf16_s8",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_s8(int8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_s8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_s16",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_s16(int16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_s16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_s32",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_s32(int32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_s32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_f32",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_f32(float32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_f32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_u8",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_u8(uint8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_u8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_u16",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_u16(uint16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_u16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_u32",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_u32(uint32x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_u32",
        "argument_preparation": "a -> Vd.2S",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_p8",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_p8(poly8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_p8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_p16",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_p16(poly16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_p16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_mf8",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_mf8(mfloat8x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_mf8",
        "argument_preparation": "a -> Vd.8B",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_bf16_u64",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_u64(uint64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_u64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_s64",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_s64(int64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_s64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_s8",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_s8(int8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_s8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_s16",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_s16(int16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_s16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_s32",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_s32(int32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_s32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_f32",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_f32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_u8",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_u8(uint8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_u8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_u16",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_u16(uint16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_u16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_u32",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_u32(uint32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_u32",
        "argument_preparation": "a -> Vd.4S",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_p8",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_p8(poly8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_p8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_p16",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_p16(poly16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_p16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_mf8",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_mf8(mfloat8x16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_mf8",
        "argument_preparation": "a -> Vd.16B",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_bf16_u64",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_u64(uint64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_u64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_s64",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_s64(int64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_s64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_bf16_f64",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_f64(float64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_f64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_bf16_f64",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_f64(float64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_f64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_bf16_p64",
        "intrinsic": "bfloat16x4_t vreinterpret_bf16_p64(poly64x1_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_bf16_p64",
        "argument_preparation": "a -> Vd.1D",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_p64",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_p64(poly64x2_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_p64",
        "argument_preparation": "a -> Vd.2D",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_bf16_p128",
        "intrinsic": "bfloat16x8_t vreinterpretq_bf16_p128(poly128_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_bf16_p128",
        "argument_preparation": "a -> Vd.1Q",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_s8_bf16",
        "intrinsic": "int8x8_t vreinterpret_s8_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s8_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_s16_bf16",
        "intrinsic": "int16x4_t vreinterpret_s16_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s16_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_s32_bf16",
        "intrinsic": "int32x2_t vreinterpret_s32_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s32_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f32_bf16",
        "intrinsic": "float32x2_t vreinterpret_f32_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f32_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_u8_bf16",
        "intrinsic": "uint8x8_t vreinterpret_u8_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u8_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_u16_bf16",
        "intrinsic": "uint16x4_t vreinterpret_u16_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u16_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_u32_bf16",
        "intrinsic": "uint32x2_t vreinterpret_u32_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u32_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_p8_bf16",
        "intrinsic": "poly8x8_t vreinterpret_p8_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p8_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_p16_bf16",
        "intrinsic": "poly16x4_t vreinterpret_p16_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p16_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_mf8_bf16",
        "intrinsic": "mfloat8x8_t vreinterpret_mf8_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_mf8_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_u64_bf16",
        "intrinsic": "uint64x1_t vreinterpret_u64_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_u64_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_s64_bf16",
        "intrinsic": "int64x1_t vreinterpret_s64_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_s64_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpret_f64_bf16",
        "intrinsic": "float64x1_t vreinterpret_f64_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_f64_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpret_p64_bf16",
        "intrinsic": "poly64x1_t vreinterpret_p64_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpret_p64_bf16",
        "argument_preparation": "a -> Vd.4H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s8_bf16",
        "intrinsic": "int8x16_t vreinterpretq_s8_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s8_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s16_bf16",
        "intrinsic": "int16x8_t vreinterpretq_s16_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s16_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s32_bf16",
        "intrinsic": "int32x4_t vreinterpretq_s32_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s32_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f32_bf16",
        "intrinsic": "float32x4_t vreinterpretq_f32_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f32_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u8_bf16",
        "intrinsic": "uint8x16_t vreinterpretq_u8_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u8_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u16_bf16",
        "intrinsic": "uint16x8_t vreinterpretq_u16_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u16_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_u32_bf16",
        "intrinsic": "uint32x4_t vreinterpretq_u32_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u32_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p8_bf16",
        "intrinsic": "poly8x16_t vreinterpretq_p8_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p8_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p16_bf16",
        "intrinsic": "poly16x8_t vreinterpretq_p16_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p16_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_mf8_bf16",
        "intrinsic": "mfloat8x16_t vreinterpretq_mf8_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_mf8_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_u64_bf16",
        "intrinsic": "uint64x2_t vreinterpretq_u64_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_u64_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_s64_bf16",
        "intrinsic": "int64x2_t vreinterpretq_s64_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_s64_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_f64_bf16",
        "intrinsic": "float64x2_t vreinterpretq_f64_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_f64_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vreinterpretq_p64_bf16",
        "intrinsic": "poly64x2_t vreinterpretq_p64_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p64_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.2D -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vreinterpretq_p128_bf16",
        "intrinsic": "poly128_t vreinterpretq_p128_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vreinterpretq_p128_bf16",
        "argument_preparation": "a -> Vd.8H",
        "aarch64_instruction": "NOP",
        "result": "Vd.1Q -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_f32_bf16",
        "intrinsic": "float32x4_t vcvt_f32_bf16(bfloat16x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_f32_bf16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SHLL Vd.4S,Vn.8H, #16",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_low_f32_bf16",
        "intrinsic": "float32x4_t vcvtq_low_f32_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_low_f32_bf16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SHLL Vd.4S,Vn.8H, #16",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_high_f32_bf16",
        "intrinsic": "float32x4_t vcvtq_high_f32_bf16(bfloat16x8_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_high_f32_bf16",
        "argument_preparation": "a -> Vn.8H",
        "aarch64_instruction": "SHLL2 Vd.4S,Vn.8H, #16",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvt_bf16_f32",
        "intrinsic": "bfloat16x4_t vcvt_bf16_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_bf16_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "BFCVTN Vd.4H,Vn.4S",
        "result": "Vd.4H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_low_bf16_f32",
        "intrinsic": "bfloat16x8_t vcvtq_low_bf16_f32(float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_low_bf16_f32",
        "argument_preparation": "a -> Vn.4S",
        "aarch64_instruction": "BFCVTN Vd.4H,Vn.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtq_high_bf16_f32",
        "intrinsic": "bfloat16x8_t vcvtq_high_bf16_f32(bfloat16x8_t inactive, float32x4_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_high_bf16_f32",
        "argument_preparation": "inactive -> Vd.8H; a -> Vn.4S;",
        "aarch64_instruction": "BFCVTN2 Vd.8H,Vn.4S",
        "result": "Vd.8H -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvth_bf16_f32",
        "intrinsic": "bfloat16_t vcvth_bf16_f32(float32_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvth_bf16_f32",
        "argument_preparation": "a -> Sn",
        "aarch64_instruction": "BFCVT Hd,Sn",
        "result": "Hd -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vcvtah_f32_bf16",
        "intrinsic": "float32_t vcvtah_f32_bf16(bfloat16_t a)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtah_f32_bf16",
        "argument_preparation": "a -> Hn",
        "aarch64_instruction": "SHL Dd,Dn, #16",
        "result": "Sd -> result",
        "supported_architectures": "A32/A64"
      }
    ],
    "Vector arithmetic": [
      {
        "name": "vbfdot_f32",
        "intrinsic": "float32x2_t vbfdot_f32(float32x2_t r, bfloat16x4_t a, bfloat16x4_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfdot_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.4H; b -> Vm.4H",
        "aarch64_instruction": "BFDOT Vd.2S,Vn.4H,Vm.4H",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfdotq_f32",
        "intrinsic": "float32x4_t vbfdotq_f32(float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfdotq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "BFDOT Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfdot_lane_f32",
        "intrinsic": "float32x2_t vbfdot_lane_f32(float32x2_t r, bfloat16x4_t a, bfloat16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfdot_lane_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.4H; b -> Vm.4H; 0 <= lane <= 1",
        "aarch64_instruction": "BFDOT Vd.2S,Vn.4H,Vm.2H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfdotq_laneq_f32",
        "intrinsic": "float32x4_t vbfdotq_laneq_f32(float32x4_t r, bfloat16x8_t a, bfloat16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfdotq_laneq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.8H; 0 <= lane <= 3",
        "aarch64_instruction": "BFDOT Vd.4S,Vn.8H,Vm.2H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfdot_laneq_f32",
        "intrinsic": "float32x2_t vbfdot_laneq_f32(float32x2_t r, bfloat16x4_t a, bfloat16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfdot_laneq_f32",
        "argument_preparation": "r -> Vd.2S; a -> Vn.4H; b -> Vm.8H; 0 <= lane <= 3",
        "aarch64_instruction": "BFDOT Vd.2S,Vn.4H,Vm.2H[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfdotq_lane_f32",
        "intrinsic": "float32x4_t vbfdotq_lane_f32(float32x4_t r, bfloat16x8_t a, bfloat16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfdotq_lane_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.4H; 0 <= lane <= 1",
        "aarch64_instruction": "BFDOT Vd.4S,Vn.8H,Vm.2H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfmmlaq_f32",
        "intrinsic": "float32x4_t vbfmmlaq_f32(float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfmmlaq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "BFMMLA Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfmlalbq_f32",
        "intrinsic": "float32x4_t vbfmlalbq_f32(float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfmlalbq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "BFMLALB Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfmlaltq_f32",
        "intrinsic": "float32x4_t vbfmlaltq_f32(float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfmlaltq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.8H",
        "aarch64_instruction": "BFMLALT Vd.4S,Vn.8H,Vm.8H",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      }
    ],
    "Scalar arithmetic": [
      {
        "name": "vbfmlalbq_lane_f32",
        "intrinsic": "float32x4_t vbfmlalbq_lane_f32(float32x4_t r, bfloat16x8_t a, bfloat16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfmlalbq_lane_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "BFMLALB Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfmlalbq_laneq_f32",
        "intrinsic": "float32x4_t vbfmlalbq_laneq_f32(float32x4_t r, bfloat16x8_t a, bfloat16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfmlalbq_laneq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "BFMLALB Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfmlaltq_lane_f32",
        "intrinsic": "float32x4_t vbfmlaltq_lane_f32(float32x4_t r, bfloat16x8_t a, bfloat16x4_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfmlaltq_lane_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.4H; 0 <= lane <= 3",
        "aarch64_instruction": "BFMLALT Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      },
      {
        "name": "vbfmlaltq_laneq_f32",
        "intrinsic": "float32x4_t vbfmlaltq_laneq_f32(float32x4_t r, bfloat16x8_t a, bfloat16x8_t b, const int lane)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vbfmlaltq_laneq_f32",
        "argument_preparation": "r -> Vd.4S; a -> Vn.8H; b -> Vm.8H; 0 <= lane <= 7",
        "aarch64_instruction": "BFMLALT Vd.4S,Vn.8H,Vm.H[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A32/A64"
      }
    ]
  },
  "Modal 8-bit floating-point intrinsics": {
    "Data type conversion": [
      {
        "name": "vcvt1_bf16_mf8_fpm",
        "intrinsic": "bfloat16x8_t vcvt1_bf16_mf8_fpm(mfloat8x8_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt1_bf16_mf8_fpm",
        "argument_preparation": "vn -> Vn.8B",
        "aarch64_instruction": "BF1CVTL Vd.8H,Vn.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt1_low_bf16_mf8_fpm",
        "intrinsic": "bfloat16x8_t vcvt1_low_bf16_mf8_fpm(mfloat8x16_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt1_low_bf16_mf8_fpm",
        "argument_preparation": "vn -> Vn.8B",
        "aarch64_instruction": "BF1CVTL Vd.8H,Vn.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt2_bf16_mf8_fpm",
        "intrinsic": "bfloat16x8_t vcvt2_bf16_mf8_fpm(mfloat8x8_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt2_bf16_mf8_fpm",
        "argument_preparation": "vn -> Vn.8B",
        "aarch64_instruction": "BF2CVTL Vd.8H,Vn.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt2_low_bf16_mf8_fpm",
        "intrinsic": "bfloat16x8_t vcvt2_low_bf16_mf8_fpm(mfloat8x16_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt2_low_bf16_mf8_fpm",
        "argument_preparation": "vn -> Vn.8B",
        "aarch64_instruction": "BF2CVTL Vd.8H,Vn.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt1_high_bf16_mf8_fpm",
        "intrinsic": "bfloat16x8_t vcvt1_high_bf16_mf8_fpm(mfloat8x16_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt1_high_bf16_mf8_fpm",
        "argument_preparation": "vn -> Vn.16B",
        "aarch64_instruction": "BF1CVTL2 Vd.8H,Vn.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt2_high_bf16_mf8_fpm",
        "intrinsic": "bfloat16x8_t vcvt2_high_bf16_mf8_fpm(mfloat8x16_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt2_high_bf16_mf8_fpm",
        "argument_preparation": "vn -> Vn.16B",
        "aarch64_instruction": "BF2CVTL2 Vd.8H,Vn.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt1_f16_mf8_fpm",
        "intrinsic": "float16x8_t vcvt1_f16_mf8_fpm(mfloat8x8_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt1_f16_mf8_fpm",
        "argument_preparation": "vn -> Vn.8B",
        "aarch64_instruction": "F1CVTL Vd.8H,Vn.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt1_low_f16_mf8_fpm",
        "intrinsic": "float16x8_t vcvt1_low_f16_mf8_fpm(mfloat8x16_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt1_low_f16_mf8_fpm",
        "argument_preparation": "vn -> Vn.8B",
        "aarch64_instruction": "F1CVTL Vd.8H,Vn.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt2_f16_mf8_fpm",
        "intrinsic": "float16x8_t vcvt2_f16_mf8_fpm(mfloat8x8_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt2_f16_mf8_fpm",
        "argument_preparation": "vn -> Vn.8B",
        "aarch64_instruction": "F2CVTL Vd.8H,Vn.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt2_low_f16_mf8_fpm",
        "intrinsic": "float16x8_t vcvt2_low_f16_mf8_fpm(mfloat8x16_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt2_low_f16_mf8_fpm",
        "argument_preparation": "vn -> Vn.8B",
        "aarch64_instruction": "F2CVTL Vd.8H,Vn.8B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt1_high_f16_mf8_fpm",
        "intrinsic": "float16x8_t vcvt1_high_f16_mf8_fpm(mfloat8x16_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt1_high_f16_mf8_fpm",
        "argument_preparation": "vn -> Vn.16B",
        "aarch64_instruction": "F1CVTL2 Vd.8H,Vn.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt2_high_f16_mf8_fpm",
        "intrinsic": "float16x8_t vcvt2_high_f16_mf8_fpm(mfloat8x16_t vn, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt2_high_f16_mf8_fpm",
        "argument_preparation": "vn -> Vn.16B",
        "aarch64_instruction": "F2CVTL2 Vd.8H,Vn.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_mf8_f32_fpm",
        "intrinsic": "mfloat8x8_t vcvt_mf8_f32_fpm(float32x4_t vn, float32x4_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_mf8_f32_fpm",
        "argument_preparation": "vn -> Vn.4S; vm -> Vm.4S",
        "aarch64_instruction": "FCVTN Vd.8B, Vn.4S, Vm.4S",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_high_mf8_f32_fpm",
        "intrinsic": "mfloat8x16_t vcvt_high_mf8_f32_fpm(mfloat8x8_t vd, float32x4_t vn, float32x4_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_high_mf8_f32_fpm",
        "argument_preparation": "vn -> Vn.4S; vm -> Vm.4S",
        "aarch64_instruction": "FCVTN2 Vd.16B, Vn.4S, Vm.4S",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvt_mf8_f16_fpm",
        "intrinsic": "mfloat8x8_t vcvt_mf8_f16_fpm(float16x4_t vn, float16x4_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvt_mf8_f16_fpm",
        "argument_preparation": "vn -> Vn.4H; vm -> Vm.4H",
        "aarch64_instruction": "FCVTN Vd.8B, Vn.4H, Vm.4H",
        "result": "Vd.8B -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vcvtq_mf8_f16_fpm",
        "intrinsic": "mfloat8x16_t vcvtq_mf8_f16_fpm(float16x8_t vn, float16x8_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vcvtq_mf8_f16_fpm",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm.8H",
        "aarch64_instruction": "FCVTN Vd.16B, Vn.8H, Vm.8H",
        "result": "Vd.16B -> result",
        "supported_architectures": "A64"
      }
    ],
    "Vector arithmetic": [
      {
        "name": "vscale_f16",
        "intrinsic": "float16x4_t vscale_f16(float16x4_t vn, int16x4_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vscale_f16",
        "argument_preparation": "vn -> Vn.4H; vm -> Vm.4H",
        "aarch64_instruction": "FSCALE Vd.4H, Vn.4H, Vm.4H",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vscaleq_f16",
        "intrinsic": "float16x8_t vscaleq_f16(float16x8_t vn, int16x8_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vscaleq_f16",
        "argument_preparation": "vn -> Vn.8H; vm -> Vm.8H",
        "aarch64_instruction": "FSCALE Vd.8H, Vn.8H, Vm.8H",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vscale_f32",
        "intrinsic": "float32x2_t vscale_f32(float32x2_t vn, int32x2_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vscale_f32",
        "argument_preparation": "vn -> Vn.2S; vm -> Vm.2S",
        "aarch64_instruction": "FSCALE Vd.2S, Vn.2S, Vm.2S",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vscaleq_f32",
        "intrinsic": "float32x4_t vscaleq_f32(float32x4_t vn, int32x4_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vscaleq_f32",
        "argument_preparation": "vn -> Vn.4S; vm -> Vm.4S",
        "aarch64_instruction": "FSCALE Vd.4S, Vn.4S, Vm.4S",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vscaleq_f64",
        "intrinsic": "float64x2_t vscaleq_f64(float64x2_t vn, int64x2_t vm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vscaleq_f64",
        "argument_preparation": "vn -> Vn.2D; vm -> Vm.2D",
        "aarch64_instruction": "FSCALE Vd.2D, Vn.2D, Vm.2D",
        "result": "Vd.2D -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdot_f32_mf8_fpm",
        "intrinsic": "float32x2_t vdot_f32_mf8_fpm(float32x2_t vd, mfloat8x8_t vn, mfloat8x8_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.2S; vn -> Vn.8B; vm -> Vm.8B",
        "aarch64_instruction": "FDOT Vd.2S, Vn.8B, Vm.8B",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdotq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vdotq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vn -> Vn.16B; vm -> Vm.16B",
        "aarch64_instruction": "FDOT Vd.4S, Vn.16B, Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdot_lane_f32_mf8_fpm",
        "intrinsic": "float32x2_t vdot_lane_f32_mf8_fpm(float32x2_t vd, mfloat8x8_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_lane_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.2S; vn -> Vn.8B; vm -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "FDOT Vd.2S, Vn.8B, Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdot_laneq_f32_mf8_fpm",
        "intrinsic": "float32x2_t vdot_laneq_f32_mf8_fpm(float32x2_t vd, mfloat8x8_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_laneq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.2S; vn -> Vn.16B; vm -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "FDOT Vd.2S, Vn.8B, Vm.4B[lane]",
        "result": "Vd.2S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdotq_lane_f32_mf8_fpm",
        "intrinsic": "float32x4_t vdotq_lane_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_lane_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vn -> Vn.8B; vm -> Vm.4B; 0 <= lane <= 1",
        "aarch64_instruction": "FDOT Vd.4S, Vn.8B, Vm.4B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdotq_laneq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vdotq_laneq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_laneq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vn -> Vn.16; vm -> Vm.4B; 0 <= lane <= 3",
        "aarch64_instruction": "FDOT Vd.4S, Vn.8B, Vm.4B[lane]",
        "result": "Vd.4SB -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdot_f16_mf8_fpm",
        "intrinsic": "float16x4_t vdot_f16_mf8_fpm(float16x4_t vd, mfloat8x8_t vn, mfloat8x8_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.4H; vn -> Vn.8B; vm -> Vm.8B",
        "aarch64_instruction": "FDOT Vd.4H, Vn.8B, Vm.8B",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdotq_f16_mf8_fpm",
        "intrinsic": "float16x8_t vdotq_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x16_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.16B",
        "aarch64_instruction": "FDOT Vd.8H, Vn.16B, Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdot_lane_f16_mf8_fpm",
        "intrinsic": "float16x4_t vdot_lane_f16_mf8_fpm(float16x4_t vd, mfloat8x8_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_lane_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.4H; vn -> Vn.8B; vm -> Vm.2B; 0 <= lane <= 3",
        "aarch64_instruction": "FDOT Vd.4H, Vn.8B, Vm.2B[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdot_laneq_f16_mf8_fpm",
        "intrinsic": "float16x4_t vdot_laneq_f16_mf8_fpm(float16x4_t vd, mfloat8x8_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdot_laneq_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.4H; vn -> Vn.8B; vm -> Vm.2B; 0 <= lane <= 7",
        "aarch64_instruction": "FDOT Vd.4H, Vn.8B, Vm.2B[lane]",
        "result": "Vd.4H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdotq_lane_f16_mf8_fpm",
        "intrinsic": "float16x8_t vdotq_lane_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_lane_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.2B; 0 <= lane <= 3",
        "aarch64_instruction": "FDOT Vd.8H, Vn.16B, Vm.2B[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vdotq_laneq_f16_mf8_fpm",
        "intrinsic": "float16x8_t vdotq_laneq_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vdotq_laneq_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.2B; 0 <= lane <= 7",
        "aarch64_instruction": "FDOT Vd.8H, Vn.16B, Vm.2B[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlalbq_f16_mf8_fpm",
        "intrinsic": "float16x8_t vmlalbq_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x16_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlalbq_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.16B",
        "aarch64_instruction": "FMLALB Vd.8H, Vn.16B, Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaltq_f16_mf8_fpm",
        "intrinsic": "float16x8_t vmlaltq_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x16_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaltq_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.16B",
        "aarch64_instruction": "FMLALT Vd.8H, Vn.16B, Vm.16B",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlalbq_lane_f16_mf8_fpm",
        "intrinsic": "float16x8_t vmlalbq_lane_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlalbq_lane_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.B; 0 <= lane <= 7",
        "aarch64_instruction": "FMLALB Vd.8H, Vn.16B, Vm.B[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlalbq_laneq_f16_mf8_fpm",
        "intrinsic": "float16x8_t vmlalbq_laneq_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlalbq_laneq_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.B; 0 <= lane <= 15",
        "aarch64_instruction": "FMLALB Vd.8H, Vn.16B, Vm.B[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaltq_lane_f16_mf8_fpm",
        "intrinsic": "float16x8_t vmlaltq_lane_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaltq_lane_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.B; 0 <= lane <= 7",
        "aarch64_instruction": "FMLALT Vd.8H, Vn.16B, Vm.B[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlaltq_laneq_f16_mf8_fpm",
        "intrinsic": "float16x8_t vmlaltq_laneq_f16_mf8_fpm(float16x8_t vd, mfloat8x16_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlaltq_laneq_f16_mf8_fpm",
        "argument_preparation": "vd -> Vd.8H; vn -> Vn.16B; vm -> Vm.B; 0 <= lane <= 15",
        "aarch64_instruction": "FMLALT Vd.8H, Vn.16B, Vm.B[lane]",
        "result": "Vd.8H -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallbbq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallbbq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallbbq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vn -> Vn.16B; vm -> Vm.16B",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallbtq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallbtq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallbtq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vn -> Vn.16B; vm -> Vm.16B",
        "aarch64_instruction": "FMLALLBT Vd.4S, Vn.16B, Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlalltbq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlalltbq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlalltbq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vn -> Vn.16B; vm -> Vm.16B",
        "aarch64_instruction": "FMLALLTB Vd.4S, Vn.16B, Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallttq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallttq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallttq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vn -> Vn.16B; vm -> Vm.16B",
        "aarch64_instruction": "FMLALLTT Vd.4S, Vn.16B, Vm.16B",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallbbq_lane_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallbbq_lane_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallbbq_lane_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vm -> Vn.16B; vm -> Vm.B; 0 <= lane <= 7",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallbbq_laneq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallbbq_laneq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallbbq_laneq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vm -> Vn.16B; vm -> Vm.B; 0 <= lane <= 15",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallbtq_lane_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallbtq_lane_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallbtq_lane_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vm -> Vn.16B; vm -> Vm.B; 0 <= lane <= 7",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallbtq_laneq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallbtq_laneq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallbtq_laneq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vm -> Vn.16B; vm -> Vm.B; 0 <= lane <= 15",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlalltbq_lane_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlalltbq_lane_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlalltbq_lane_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vm -> Vn.16B; vm -> Vm.B; 0 <= lane <= 7",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlalltbq_laneq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlalltbq_laneq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlalltbq_laneq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vm -> Vn.16B; vm -> Vm.B; 0 <= lane <= 15",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallttq_lane_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallttq_lane_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x8_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallttq_lane_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vm -> Vn.16B; vm -> Vm.B; 0 <= lane <= 7",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      },
      {
        "name": "vmlallttq_laneq_f32_mf8_fpm",
        "intrinsic": "float32x4_t vmlallttq_laneq_f32_mf8_fpm(float32x4_t vd, mfloat8x16_t vn, mfloat8x16_t vm, const int lane, fpm_t fpm)",
        "url": "https://developer.arm.com/architectures/instruction-sets/intrinsics/vmlallttq_laneq_f32_mf8_fpm",
        "argument_preparation": "vd -> Vd.4S; vm -> Vn.16B; vm -> Vm.B; 0 <= lane <= 15",
        "aarch64_instruction": "FMLALLBB Vd.4S, Vn.16B, Vm.B[lane]",
        "result": "Vd.4S -> result",
        "supported_architectures": "A64"
      }
    ]
  }
}